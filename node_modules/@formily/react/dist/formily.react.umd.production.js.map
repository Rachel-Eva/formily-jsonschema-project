{"version":3,"file":"formily.react.umd.production.js","sources":["../src/hooks/useAttach.ts","../src/shared/context.ts","../src/hooks/useForm.ts","../src/hooks/useField.ts","../src/hooks/useExpressionScope.ts","../../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","../src/components/FormProvider.tsx","../src/components/FormConsumer.tsx","../src/components/ReactiveField.tsx","../src/components/ArrayField.tsx","../src/components/ObjectField.tsx","../src/components/VoidField.tsx","../src/components/Field.tsx","../src/components/ExpressionScope.tsx","../src/components/RecursionField.tsx","../src/shared/render.ts","../src/components/SchemaField.tsx","../src/components/RecordScope.tsx","../src/components/RecordsScope.tsx","../src/shared/connect.ts","../src/hooks/useFieldSchema.ts","../src/hooks/useFormEffects.ts","../src/hooks/useParentForm.ts"],"sourcesContent":["import { unstable_useCompatEffect } from '@formily/reactive-react'\ninterface IRecycleTarget {\n  onMount: () => void\n  onUnmount: () => void\n}\n\nexport const useAttach = <T extends IRecycleTarget>(target: T): T => {\n  unstable_useCompatEffect(() => {\n    target.onMount()\n    return () => target.onUnmount()\n  }, [target])\n  return target\n}\n","import React, { createContext } from 'react'\nimport { Form, GeneralField } from '@formily/core'\nimport { Schema } from '@formily/json-schema'\nimport {\n  ISchemaFieldReactFactoryOptions,\n  SchemaReactComponents,\n} from '../types'\n\nconst createContextCleaner = <T>(...contexts: React.Context<T>[]) => {\n  return ({ children }) => {\n    return contexts.reduce((buf, ctx) => {\n      return React.createElement(ctx.Provider, { value: undefined }, buf)\n    }, children)\n  }\n}\n\nexport const FormContext = createContext<Form>(null)\nexport const FieldContext = createContext<GeneralField>(null)\nexport const SchemaMarkupContext = createContext<Schema>(null)\nexport const SchemaContext = createContext<Schema>(null)\nexport const SchemaExpressionScopeContext = createContext<any>(null)\nexport const SchemaComponentsContext =\n  createContext<SchemaReactComponents>(null)\nexport const SchemaOptionsContext =\n  createContext<ISchemaFieldReactFactoryOptions>(null)\n\nexport const ContextCleaner = createContextCleaner(\n  FieldContext,\n  SchemaMarkupContext,\n  SchemaContext,\n  SchemaExpressionScopeContext,\n  SchemaComponentsContext,\n  SchemaOptionsContext\n)\n","import { useContext } from 'react'\nimport { Form } from '@formily/core'\nimport { FormContext } from '../shared'\n\nexport const useForm = <T extends object = any>(): Form<T> => {\n  return useContext(FormContext)\n}\n","import { useContext } from 'react'\nimport { GeneralField } from '@formily/core'\nimport { FieldContext } from '../shared'\n\nexport const useField = <T = GeneralField>(): T => {\n  return useContext(FieldContext) as any\n}\n","import { useContext } from 'react'\nimport { SchemaExpressionScopeContext } from '../shared/context'\n\nexport const useExpressionScope = () => useContext(SchemaExpressionScopeContext)\n","'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","import React from 'react'\nimport { useAttach } from '../hooks/useAttach'\nimport { FormContext, ContextCleaner } from '../shared'\nimport { IProviderProps, ReactFC } from '../types'\n\nexport const FormProvider: ReactFC<IProviderProps> = (props) => {\n  const form = useAttach(props.form)\n  return (\n    <ContextCleaner>\n      <FormContext.Provider value={form}>{props.children}</FormContext.Provider>\n    </ContextCleaner>\n  )\n}\n\nFormProvider.displayName = 'FormProvider'\n","import React, { Fragment } from 'react'\nimport { isFn } from '@formily/shared'\nimport { observer } from '@formily/reactive-react'\nimport { useForm } from '../hooks'\nimport { IFormSpyProps, ReactFC } from '../types'\n\nexport const FormConsumer: ReactFC<IFormSpyProps> = observer((props) => {\n  const children = isFn(props.children) ? props.children(useForm()) : null\n  return <Fragment>{children}</Fragment>\n})\n\nFormConsumer.displayName = 'FormConsumer'\n","import React, { Fragment, useContext } from 'react'\nimport { toJS } from '@formily/reactive'\nimport { observer } from '@formily/reactive-react'\nimport { FormPath, isFn } from '@formily/shared'\nimport { isVoidField, GeneralField, Form } from '@formily/core'\nimport { SchemaComponentsContext } from '../shared'\nimport { RenderPropsChildren } from '../types'\ninterface IReactiveFieldProps {\n  field: GeneralField\n  children?: RenderPropsChildren<GeneralField>\n}\n\nconst mergeChildren = (\n  children: RenderPropsChildren<GeneralField>,\n  content: React.ReactNode\n) => {\n  if (!children && !content) return\n  if (isFn(children)) return\n  return (\n    <Fragment>\n      {children}\n      {content}\n    </Fragment>\n  )\n}\n\nconst isValidComponent = (target: any) =>\n  target && (typeof target === 'object' || typeof target === 'function')\n\nconst renderChildren = (\n  children: RenderPropsChildren<GeneralField>,\n  field?: GeneralField,\n  form?: Form\n) => (isFn(children) ? children(field, form) : children)\n\nconst ReactiveInternal: React.FC<IReactiveFieldProps> = (props) => {\n  const components = useContext(SchemaComponentsContext)\n  if (!props.field) {\n    return <Fragment>{renderChildren(props.children)}</Fragment>\n  }\n  const field = props.field\n  const content = mergeChildren(\n    renderChildren(props.children, field, field.form),\n    field.content ?? field.componentProps.children\n  )\n  if (field.display !== 'visible') return null\n\n  const getComponent = (target: any) => {\n    return isValidComponent(target)\n      ? target\n      : FormPath.getIn(components, target) ?? target\n  }\n\n  const renderDecorator = (children: React.ReactNode) => {\n    if (!field.decoratorType) {\n      return <Fragment>{children}</Fragment>\n    }\n\n    return React.createElement(\n      getComponent(field.decoratorType),\n      toJS(field.decoratorProps),\n      children\n    )\n  }\n\n  const renderComponent = () => {\n    if (!field.componentType) return content\n    const value = !isVoidField(field) ? field.value : undefined\n    const onChange = !isVoidField(field)\n      ? (...args: any[]) => {\n          field.onInput(...args)\n          field.componentProps?.onChange?.(...args)\n        }\n      : field.componentProps?.onChange\n    const onFocus = !isVoidField(field)\n      ? (...args: any[]) => {\n          field.onFocus(...args)\n          field.componentProps?.onFocus?.(...args)\n        }\n      : field.componentProps?.onFocus\n    const onBlur = !isVoidField(field)\n      ? (...args: any[]) => {\n          field.onBlur(...args)\n          field.componentProps?.onBlur?.(...args)\n        }\n      : field.componentProps?.onBlur\n    const disabled = !isVoidField(field)\n      ? field.pattern === 'disabled' || field.pattern === 'readPretty'\n      : undefined\n    const readOnly = !isVoidField(field)\n      ? field.pattern === 'readOnly'\n      : undefined\n    return React.createElement(\n      getComponent(field.componentType),\n      {\n        disabled,\n        readOnly,\n        ...toJS(field.componentProps),\n        value,\n        onChange,\n        onFocus,\n        onBlur,\n      },\n      content\n    )\n  }\n\n  return renderDecorator(renderComponent())\n}\n\nReactiveInternal.displayName = 'ReactiveField'\n\nexport const ReactiveField = observer(ReactiveInternal, {\n  forwardRef: true,\n})\n","import React from 'react'\nimport { ArrayField as ArrayFieldType } from '@formily/core'\nimport { useForm, useField } from '../hooks'\nimport { useAttach } from '../hooks/useAttach'\nimport { FieldContext } from '../shared'\nimport { JSXComponent, IFieldProps } from '../types'\nimport { ReactiveField } from './ReactiveField'\n\nexport const ArrayField = <D extends JSXComponent, C extends JSXComponent>(\n  props: IFieldProps<D, C, ArrayFieldType>\n) => {\n  const form = useForm()\n  const parent = useField()\n  const field = useAttach(\n    form.createArrayField({\n      basePath: parent?.address,\n      ...props,\n    })\n  )\n  return (\n    <FieldContext.Provider value={field}>\n      <ReactiveField field={field}>{props.children}</ReactiveField>\n    </FieldContext.Provider>\n  )\n}\n\nArrayField.displayName = 'ArrayField'\n","import React from 'react'\nimport { ObjectField as ObjectFieldType } from '@formily/core'\nimport { useForm, useField } from '../hooks'\nimport { useAttach } from '../hooks/useAttach'\nimport { ReactiveField } from './ReactiveField'\nimport { FieldContext } from '../shared'\nimport { JSXComponent, IFieldProps } from '../types'\n\nexport const ObjectField = <D extends JSXComponent, C extends JSXComponent>(\n  props: IFieldProps<D, C, ObjectFieldType>\n) => {\n  const form = useForm()\n  const parent = useField()\n  const field = useAttach(\n    form.createObjectField({ basePath: parent?.address, ...props })\n  )\n  return (\n    <FieldContext.Provider value={field}>\n      <ReactiveField field={field}>{props.children}</ReactiveField>\n    </FieldContext.Provider>\n  )\n}\n\nObjectField.displayName = 'ObjectField'\n","import React from 'react'\nimport { useForm, useField } from '../hooks'\nimport { useAttach } from '../hooks/useAttach'\nimport { ReactiveField } from './ReactiveField'\nimport { FieldContext } from '../shared'\nimport { JSXComponent, IVoidFieldProps } from '../types'\n\nexport const VoidField = <D extends JSXComponent, C extends JSXComponent>(\n  props: IVoidFieldProps<D, C>\n) => {\n  const form = useForm()\n  const parent = useField()\n  const field = useAttach(\n    form.createVoidField({ basePath: parent?.address, ...props })\n  )\n  return (\n    <FieldContext.Provider value={field}>\n      <ReactiveField field={field}>{props.children}</ReactiveField>\n    </FieldContext.Provider>\n  )\n}\n\nVoidField.displayName = 'VoidField'\n","import React, { useEffect } from 'react'\nimport { useField, useForm } from '../hooks'\nimport { ReactiveField } from './ReactiveField'\nimport { FieldContext } from '../shared'\nimport { JSXComponent, IFieldProps } from '../types'\n\nexport const Field = <D extends JSXComponent, C extends JSXComponent>(\n  props: IFieldProps<D, C>\n) => {\n  const form = useForm()\n  const parent = useField()\n  const field = form.createField({ basePath: parent?.address, ...props })\n  useEffect(() => {\n    field?.onMount()\n    return () => {\n      field?.onUnmount()\n    }\n  }, [field])\n  return (\n    <FieldContext.Provider value={field}>\n      <ReactiveField field={field}>{props.children}</ReactiveField>\n    </FieldContext.Provider>\n  )\n}\n\nField.displayName = 'Field'\n","import React, { useContext } from 'react'\nimport { lazyMerge } from '@formily/shared'\nimport { SchemaExpressionScopeContext } from '../shared'\nimport { IExpressionScopeProps, ReactFC } from '../types'\n\nexport const ExpressionScope: ReactFC<IExpressionScopeProps> = (props) => {\n  const scope = useContext(SchemaExpressionScopeContext)\n  return (\n    <SchemaExpressionScopeContext.Provider\n      value={lazyMerge(scope, props.value)}\n    >\n      {props.children}\n    </SchemaExpressionScopeContext.Provider>\n  )\n}\n","import React, { Fragment, useMemo } from 'react'\nimport { FormPath, isBool, isFn, isValid } from '@formily/shared'\nimport { GeneralField } from '@formily/core'\nimport { Schema } from '@formily/json-schema'\nimport { SchemaContext } from '../shared'\nimport { IRecursionFieldProps, ReactFC } from '../types'\nimport { useField, useExpressionScope } from '../hooks'\nimport { ObjectField } from './ObjectField'\nimport { ArrayField } from './ArrayField'\nimport { Field } from './Field'\nimport { VoidField } from './VoidField'\nimport { ExpressionScope } from './ExpressionScope'\nimport { observable } from '@formily/reactive'\n\nconst useFieldProps = (schema: Schema) => {\n  const scope = useExpressionScope()\n  return schema.toFieldProps({\n    scope,\n  }) as any\n}\n\nconst useBasePath = (props: IRecursionFieldProps) => {\n  const parent = useField()\n  if (props.onlyRenderProperties) {\n    return props.basePath || parent?.address.concat(props.name)\n  }\n  return props.basePath || parent?.address\n}\n\nexport const RecursionField: ReactFC<IRecursionFieldProps> = (props) => {\n  const basePath = useBasePath(props)\n  const fieldSchema = useMemo(() => new Schema(props.schema), [props.schema])\n  const fieldProps = useFieldProps(fieldSchema)\n\n  const renderSlots = (innerSchema, key) => {\n    const slot = innerSchema['x-slot-node']\n    const { target, isRenderProp } = slot\n    if (isRenderProp) {\n      const args = observable({ $slotArgs: [] })\n      FormPath.setIn(fieldSchema.properties, target, (..._args: any) => {\n        args.$slotArgs = _args\n        return (\n          <ExpressionScope value={args}>\n            <RecursionField schema={innerSchema} name={key} />\n          </ExpressionScope>\n        )\n      })\n    } else {\n      FormPath.setIn(\n        fieldSchema.properties,\n        target,\n        <RecursionField schema={innerSchema} name={key} />\n      )\n    }\n  }\n\n  const renderProperties = (field?: GeneralField) => {\n    if (props.onlyRenderSelf) return\n    const properties = Schema.getOrderProperties(fieldSchema)\n    if (!properties.length) return\n    return (\n      <Fragment>\n        {properties.map(({ schema: item, key: name }, index) => {\n          const base = field?.address || basePath\n          let schema: Schema = item\n          if (schema['x-slot-node']) {\n            renderSlots(schema, name)\n            return null\n          }\n\n          if (isFn(props.mapProperties)) {\n            const mapped = props.mapProperties(item, name)\n            if (mapped) {\n              schema = mapped\n            }\n          }\n          if (isFn(props.filterProperties)) {\n            if (props.filterProperties(schema, name) === false) {\n              return null\n            }\n          }\n          if (isBool(props.propsRecursion) && props.propsRecursion) {\n            return (\n              <RecursionField\n                propsRecursion={true}\n                filterProperties={props.filterProperties}\n                mapProperties={props.mapProperties}\n                schema={schema}\n                key={`${index}-${name}`}\n                name={name}\n                basePath={base}\n              />\n            )\n          }\n          return (\n            <RecursionField\n              schema={schema}\n              key={`${index}-${name}`}\n              name={name}\n              basePath={base}\n            />\n          )\n        })}\n      </Fragment>\n    )\n  }\n\n  const render = () => {\n    if (!isValid(props.name)) return renderProperties()\n    if (fieldSchema.type === 'object') {\n      if (props.onlyRenderProperties) return renderProperties()\n      return (\n        <ObjectField {...fieldProps} name={props.name} basePath={basePath}>\n          {renderProperties}\n        </ObjectField>\n      )\n    } else if (fieldSchema.type === 'array') {\n      return (\n        <ArrayField {...fieldProps} name={props.name} basePath={basePath} />\n      )\n    } else if (fieldSchema.type === 'void') {\n      if (props.onlyRenderProperties) return renderProperties()\n      return (\n        <VoidField {...fieldProps} name={props.name} basePath={basePath}>\n          {renderProperties}\n        </VoidField>\n      )\n    }\n    return <Field {...fieldProps} name={props.name} basePath={basePath} />\n  }\n\n  if (!fieldSchema) return <Fragment />\n\n  return (\n    <SchemaContext.Provider value={fieldSchema}>\n      {render()}\n    </SchemaContext.Provider>\n  )\n}\n","import React, { ReactNode, ReactPortal } from 'react'\nimport { globalThisPolyfill } from '@formily/shared'\n\ninterface Env {\n  portalDOM?: HTMLDivElement\n  createPortal?: (children: ReactNode, container: Element) => ReactPortal\n}\n\nconst env: Env = {\n  portalDOM: globalThisPolyfill?.document?.createElement?.('div'),\n  createPortal: globalThisPolyfill?.['ReactDOM']?.createPortal,\n}\n\n/* istanbul ignore next */\nconst loadCreatePortal = () => {\n  if (!env.createPortal) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      env.createPortal ??= require('react-dom')?.createPortal\n    } catch {}\n  }\n  if (!env.createPortal) {\n    try {\n      // @ts-ignore\n      import('react-dom')\n        .then((module) => (env.createPortal ??= module?.createPortal))\n        .catch()\n    } catch {}\n  }\n}\n\nexport const render = (element: React.ReactElement) => {\n  if (globalThisPolyfill.navigator?.product === 'ReactNative') return null\n  if (env.portalDOM && env.createPortal) {\n    return env.createPortal(element, env.portalDOM)\n  } else {\n    return React.createElement('template', {}, element)\n  }\n}\n\nloadCreatePortal()\n","import React, { useContext, Fragment } from 'react'\nimport { ISchema, Schema } from '@formily/json-schema'\nimport { RecursionField } from './RecursionField'\nimport { render } from '../shared/render'\nimport {\n  SchemaMarkupContext,\n  SchemaOptionsContext,\n  SchemaComponentsContext,\n} from '../shared'\nimport {\n  ReactComponentPath,\n  JSXComponent,\n  ISchemaFieldReactFactoryOptions,\n  SchemaReactComponents,\n  ISchemaFieldProps,\n  ISchemaMarkupFieldProps,\n  ISchemaTypeFieldProps,\n} from '../types'\nimport { lazyMerge } from '@formily/shared'\nimport { ExpressionScope } from './ExpressionScope'\nconst env = {\n  nonameId: 0,\n}\n\nconst getRandomName = () => {\n  return `NO_NAME_FIELD_$${env.nonameId++}`\n}\n\nexport function createSchemaField<Components extends SchemaReactComponents>(\n  options: ISchemaFieldReactFactoryOptions<Components> = {}\n) {\n  function SchemaField<\n    Decorator extends JSXComponent,\n    Component extends JSXComponent\n  >(props: ISchemaFieldProps<Decorator, Component>) {\n    const schema = Schema.isSchemaInstance(props.schema)\n      ? props.schema\n      : new Schema({\n          type: 'object',\n          ...props.schema,\n        })\n    const renderMarkup = () => {\n      env.nonameId = 0\n      if (props.schema) return null\n      return render(\n        <SchemaMarkupContext.Provider value={schema}>\n          {props.children}\n        </SchemaMarkupContext.Provider>\n      )\n    }\n\n    const renderChildren = () => {\n      return <RecursionField {...props} schema={schema} />\n    }\n\n    return (\n      <SchemaOptionsContext.Provider value={options}>\n        <SchemaComponentsContext.Provider\n          value={lazyMerge(options.components, props.components)}\n        >\n          <ExpressionScope value={lazyMerge(options.scope, props.scope)}>\n            {renderMarkup()}\n            {renderChildren()}\n          </ExpressionScope>\n        </SchemaComponentsContext.Provider>\n      </SchemaOptionsContext.Provider>\n    )\n  }\n\n  SchemaField.displayName = 'SchemaField'\n\n  function MarkupRender(props: any) {\n    const parent = useContext(SchemaMarkupContext)\n    if (!parent) return <Fragment />\n    const renderChildren = () => {\n      return <React.Fragment>{props.children}</React.Fragment>\n    }\n    const appendArraySchema = (schema: ISchema) => {\n      const items = parent.items as Schema\n      if (items && items.name !== props.name) {\n        return parent.addProperty(props.name, schema)\n      } else {\n        return parent.setItems(schema)\n      }\n    }\n    if (parent.type === 'object' || parent.type === 'void') {\n      const schema = parent.addProperty(props.name, props)\n      return (\n        <SchemaMarkupContext.Provider value={schema}>\n          {renderChildren()}\n        </SchemaMarkupContext.Provider>\n      )\n    } else if (parent.type === 'array') {\n      const schema = appendArraySchema(props)\n      return (\n        <SchemaMarkupContext.Provider\n          value={Array.isArray(schema) ? schema[0] : schema}\n        >\n          {props.children}\n        </SchemaMarkupContext.Provider>\n      )\n    } else {\n      return renderChildren()\n    }\n  }\n\n  function MarkupField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaMarkupFieldProps<Components, Component, Decorator>) {\n    return <MarkupRender {...props} name={props.name || getRandomName()} />\n  }\n\n  MarkupField.displayName = 'MarkupField'\n\n  function StringField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"string\" />\n  }\n\n  StringField.displayName = 'StringField'\n\n  function ObjectField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"object\" />\n  }\n\n  ObjectField.displayName = 'ObjectField'\n\n  function ArrayField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"array\" />\n  }\n\n  ArrayField.displayName = 'ArrayField'\n  function BooleanField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"boolean\" />\n  }\n\n  BooleanField.displayName = 'BooleanField'\n\n  function NumberField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"number\" />\n  }\n\n  NumberField.displayName = 'NumberField'\n\n  function DateField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"date\" />\n  }\n\n  DateField.displayName = 'DateField'\n\n  function DateTimeField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"datetime\" />\n  }\n\n  DateTimeField.displayName = 'DateTimeField'\n\n  function VoidField<\n    Decorator extends ReactComponentPath<Components>,\n    Component extends ReactComponentPath<Components>\n  >(props: ISchemaTypeFieldProps<Components, Component, Decorator>) {\n    return <MarkupField {...props} type=\"void\" />\n  }\n\n  VoidField.displayName = 'VoidField'\n\n  SchemaField.Markup = MarkupField\n  SchemaField.String = StringField\n  SchemaField.Object = ObjectField\n  SchemaField.Array = ArrayField\n  SchemaField.Boolean = BooleanField\n  SchemaField.Date = DateField\n  SchemaField.DateTime = DateTimeField\n  SchemaField.Void = VoidField\n  SchemaField.Number = NumberField\n\n  return SchemaField\n}\n","import React from 'react'\nimport { lazyMerge } from '@formily/shared'\nimport { ExpressionScope } from './ExpressionScope'\nimport { ReactFC, IRecordScopeProps } from '../types'\nimport { useExpressionScope } from '../hooks'\n\nexport const RecordScope: ReactFC<IRecordScopeProps> = (props) => {\n  const scope = useExpressionScope()\n  return (\n    <ExpressionScope\n      value={{\n        get $lookup() {\n          return scope?.$record\n        },\n        get $record() {\n          const record = props.getRecord?.()\n          if (typeof record === 'object') {\n            return lazyMerge(record, {\n              get $lookup() {\n                return scope?.$record\n              },\n              get $index() {\n                return props.getIndex?.()\n              },\n            })\n          }\n          return record\n        },\n        get $index() {\n          return props.getIndex?.()\n        },\n      }}\n    >\n      {props.children}\n    </ExpressionScope>\n  )\n}\n","import React from 'react'\nimport { ExpressionScope } from './ExpressionScope'\nimport { ReactFC, IRecordsScopeProps } from '../types'\n\nexport const RecordsScope: ReactFC<IRecordsScopeProps> = (props) => {\n  return (\n    <ExpressionScope\n      value={{\n        get $records() {\n          return props.getRecords?.() ?? []\n        },\n      }}\n    >\n      {props.children}\n    </ExpressionScope>\n  )\n}\n","import React from 'react'\nimport { isFn, isStr, FormPath, each, isValid } from '@formily/shared'\nimport { isVoidField } from '@formily/core'\nimport { observer, Observer } from '@formily/reactive-react'\nimport { JSXComponent, IComponentMapper, IStateMapper } from '../types'\nimport { useField } from '../hooks'\nimport hoistNonReactStatics from 'hoist-non-react-statics'\n\nexport function mapProps<T extends JSXComponent>(\n  ...args: IStateMapper<React.ComponentProps<T>>[]\n) {\n  return (target: T) => {\n    return observer(\n      (props: any) => {\n        const field = useField()\n        const results = args.reduce(\n          (props, mapper) => {\n            if (isFn(mapper)) {\n              props = Object.assign(props, mapper(props, field))\n            } else {\n              each(mapper, (to, extract) => {\n                const extractValue = FormPath.getIn(field, extract)\n                const targetValue = isStr(to) ? to : (extract as any)\n                const originalValue = FormPath.getIn(props, targetValue)\n                if (extract === 'value') {\n                  if (to !== extract) {\n                    delete props.value\n                  }\n                }\n                if (isValid(originalValue) && !isValid(extractValue)) return\n                FormPath.setIn(props, targetValue, extractValue)\n              })\n            }\n            return props\n          },\n          { ...props }\n        )\n        return React.createElement(target, results)\n      },\n      {\n        forwardRef: true,\n      }\n    )\n  }\n}\n\nexport function mapReadPretty<T extends JSXComponent, C extends JSXComponent>(\n  component: C,\n  readPrettyProps?: React.ComponentProps<C>\n) {\n  return (target: T) => {\n    return observer(\n      (props) => {\n        const field = useField()\n        if (!isVoidField(field) && field?.pattern === 'readPretty') {\n          return React.createElement(component, {\n            ...readPrettyProps,\n            ...props,\n          })\n        }\n        return React.createElement(target, props)\n      },\n      {\n        forwardRef: true,\n      }\n    )\n  }\n}\n\nexport function connect<T extends JSXComponent>(\n  target: T,\n  ...args: IComponentMapper<T>[]\n) {\n  const Target = args.reduce((target, mapper) => {\n    return mapper(target)\n  }, target)\n\n  const Destination = React.forwardRef(\n    (props: Partial<React.ComponentProps<T>>, ref) => {\n      return React.createElement(Target, { ...props, ref })\n    }\n  )\n\n  if (target) hoistNonReactStatics(Destination, target as any)\n\n  return Destination\n}\n\nexport { observer, Observer }\n","import { useContext } from 'react'\nimport { SchemaContext } from '../shared'\nimport { Schema } from '@formily/json-schema'\n\nexport const useFieldSchema = (): Schema => {\n  return useContext(SchemaContext)\n}\n","import { unstable_useCompatFactory } from '@formily/reactive-react'\nimport { Form } from '@formily/core'\nimport { uid } from '@formily/shared'\nimport { useForm } from './useForm'\n\nexport const useFormEffects = (effects?: (form: Form) => void) => {\n  const form = useForm()\n  unstable_useCompatFactory(() => {\n    const id = uid()\n    form.addEffects(id, effects)\n    return {\n      dispose() {\n        form.removeEffects(id)\n      },\n    }\n  })\n}\n","import { isObjectField, GeneralField, Form, ObjectField } from '@formily/core'\nimport { useField } from './useField'\nimport { useForm } from './useForm'\n\nexport const useParentForm = (): Form | ObjectField => {\n  const field = useField()\n  const form = useForm()\n  const findObjectParent = (field: GeneralField) => {\n    if (!field) return form\n    if (isObjectField(field)) return field\n    return findObjectParent(field?.parent)\n  }\n  return findObjectParent(field)\n}\n"],"names":["useAttach","target","Formily","ReactiveReact","unstable_useCompatEffect","FormContext","React","createContext","FieldContext","SchemaMarkupContext","SchemaContext","SchemaExpressionScopeContext","SchemaComponentsContext","SchemaOptionsContext","ContextCleaner","_a","children","contexts","reduce","buf","ctx","createElement","Provider","value","undefined","createContextCleaner","useForm","useContext","useField","useExpressionScope","REACT_STATICS","childContextTypes","contextType","contextTypes","defaultProps","displayName","getDefaultProps","getDerivedStateFromError","getDerivedStateFromProps","mixins","propTypes","type","KNOWN_STATICS","name","length","prototype","caller","callee","arguments","arity","MEMO_STATICS","$$typeof","compare","TYPE_STATICS","getStatics","component","reactIs","isMemo","ForwardRef","render","Memo","defineProperty","Object","getOwnPropertyNames","getOwnPropertySymbols","getOwnPropertyDescriptor","getPrototypeOf","objectPrototype","hoistNonReactStatics_cjs","hoistNonReactStatics","targetComponent","sourceComponent","blacklist","inheritedComponent","keys","concat","targetStatics","sourceStatics","i","key","descriptor","e","FormProvider","props","form","FormConsumer","observer","Shared","isFn","Fragment","renderChildren","field","ReactiveInternal","components","content","mergeChildren","componentProps","display","FormPath","getIn","Core","isVoidField","onChange","onInput","apply","__spreadArray","__read","args","onFocus","_b","onBlur","_c","disabled","readOnly","pattern","getComponent","componentType","__assign","Reactive","toJS","renderComponent","decoratorType","decoratorProps","ReactiveField","forwardRef","ArrayField","parent","ObjectField","VoidField","Field","createField","basePath","address","useEffect","onMount","onUnmount","ExpressionScope","scope","lazyMerge","RecursionField","schema","useBasePath","fieldSchema","useMemo","JSONSchema","Schema","fieldProps","getOrderProperties","properties","map","index","base","innerSchema","slot","observable","$slotArgs","setIn","args_1","_args","renderSlots","mapProperties","mapped","filterProperties","isBool","propsRecursion","isValid","renderProperties","env","portalDOM","globalThisPolyfill","document","call","createPortal","require","Promise","resolve","ReactDOM","catch","_d","loadCreatePortal","nonameId","$lookup","$record","record","getRecord","$index","getIndex","$records","mapper","Destination","options","isSchemaInstance","element","navigator","product","addProperty","items","setItems","appendArraySchema","Array","isArray","MarkupRender","SchemaField","MarkupField","StringField","BooleanField","NumberField","DateField","DateTimeField","Markup","String","Boolean","Date","DateTime","Void","Number","assign","each","to","extract","targetValue","isStr","extractValue","readPrettyProps","effects","unstable_useCompatFactory","id","uid","addEffects","removeEffects","isObjectField","findObjectParent"],"mappings":"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"}