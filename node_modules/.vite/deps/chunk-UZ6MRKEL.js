// node_modules/@formily/shared/esm/checkers.js
var toString = Object.prototype.toString;
var isType = function(type) {
  return function(obj) {
    return getType(obj) === "[object ".concat(type, "]");
  };
};
var getType = function(obj) {
  return toString.call(obj);
};
var isFn = function(val) {
  return typeof val === "function";
};
var isArr = Array.isArray;
var isPlainObj = isType("Object");
var isStr = isType("String");
var isBool = isType("Boolean");
var isNum = isType("Number");
var isNumberLike = function(index) {
  return isNum(index) || /^\d+$/.test(index);
};
var isObj = function(val) {
  return typeof val === "object";
};
var isRegExp = isType("RegExp");

// node_modules/@formily/shared/esm/array.js
var toArr = function(val) {
  return isArr(val) ? val : val ? [val] : [];
};
function each(val, iterator, revert) {
  if (isArr(val) || isStr(val)) {
    if (revert) {
      for (var i = val.length - 1; i >= 0; i--) {
        if (iterator(val[i], i) === false) {
          return;
        }
      }
    } else {
      for (var i = 0; i < val.length; i++) {
        if (iterator(val[i], i) === false) {
          return;
        }
      }
    }
  } else if (isObj(val)) {
    var key = void 0;
    for (key in val) {
      if (Object.hasOwnProperty.call(val, key)) {
        if (iterator(val[key], key) === false) {
          return;
        }
      }
    }
  }
}
function map(val, iterator, revert) {
  var res = isArr(val) || isStr(val) ? [] : {};
  each(val, function(item, key) {
    var value = iterator(item, key);
    if (isArr(res)) {
      ;
      res.push(value);
    } else {
      res[key] = value;
    }
  }, revert);
  return res;
}
function reduce(val, iterator, accumulator, revert) {
  var result = accumulator;
  each(val, function(item, key) {
    result = iterator(result, item, key);
  }, revert);
  return result;
}
function move(array, fromIndex, toIndex) {
  if (fromIndex === toIndex)
    return array;
  if (toIndex < 0 || fromIndex < 0 || toIndex > array.length - 1 || fromIndex > array.length - 1) {
    return array;
  }
  if (fromIndex < toIndex) {
    var fromItem = array[fromIndex];
    for (var index = fromIndex; index < toIndex; index++) {
      array[index] = array[index + 1];
    }
    array[toIndex] = fromItem;
  } else {
    var fromItem = array[fromIndex];
    for (var index = fromIndex; index > toIndex; index--) {
      array[index] = array[index - 1];
    }
    array[toIndex] = fromItem;
  }
  return array;
}

// node_modules/@formily/shared/esm/global.js
function globalSelf() {
  try {
    if (typeof self !== "undefined") {
      return self;
    }
  } catch (e) {
  }
  try {
    if (typeof window !== "undefined") {
      return window;
    }
  } catch (e) {
  }
  try {
    if (typeof global !== "undefined") {
      return global;
    }
  } catch (e) {
  }
  return Function("return this")();
}
var globalThisPolyfill = globalSelf();

// node_modules/@formily/shared/esm/instanceof.js
var instOf = function(value, cls) {
  if (isFn(cls))
    return value instanceof cls;
  if (isStr(cls)) {
    return globalThisPolyfill[cls] ? value instanceof globalThisPolyfill[cls] : false;
  }
  return false;
};

// node_modules/@formily/shared/esm/compare.js
var isArray = isArr;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;
function equal(a, b) {
  if (a === b) {
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    var arrA = isArray(a);
    var arrB = isArray(b);
    var i = void 0;
    var length_1;
    var key = void 0;
    if (arrA && arrB) {
      length_1 = a.length;
      if (length_1 !== b.length) {
        return false;
      }
      for (i = length_1; i-- !== 0; ) {
        if (!equal(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    if (arrA !== arrB) {
      return false;
    }
    var momentA = a && a._isAMomentObject;
    var momentB = b && b._isAMomentObject;
    if (momentA !== momentB)
      return false;
    if (momentA && momentB)
      return a.isSame(b);
    var immutableA = a && a.toJS;
    var immutableB = b && b.toJS;
    if (immutableA !== immutableB)
      return false;
    if (immutableA)
      return a.is ? a.is(b) : a === b;
    var dateA = instOf(a, "Date");
    var dateB = instOf(b, "Date");
    if (dateA !== dateB) {
      return false;
    }
    if (dateA && dateB) {
      return a.getTime() === b.getTime();
    }
    var regexpA = instOf(a, "RegExp");
    var regexpB = instOf(b, "RegExp");
    if (regexpA !== regexpB) {
      return false;
    }
    if (regexpA && regexpB) {
      return a.toString() === b.toString();
    }
    var urlA = instOf(a, "URL");
    var urlB = instOf(b, "URL");
    if (urlA !== urlB) {
      return false;
    }
    if (urlA && urlB) {
      return a.href === b.href;
    }
    var schemaA = a && a.toJSON;
    var schemaB = b && b.toJSON;
    if (schemaA !== schemaB)
      return false;
    if (schemaA && schemaB)
      return equal(a.toJSON(), b.toJSON());
    var keys = keyList(a);
    length_1 = keys.length;
    if (length_1 !== keyList(b).length) {
      return false;
    }
    for (i = length_1; i-- !== 0; ) {
      if (!hasProp.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length_1; i-- !== 0; ) {
      key = keys[i];
      if (key === "_owner" && a.$$typeof) {
        continue;
      } else {
        if (!equal(a[key], b[key])) {
          return false;
        }
      }
    }
    return true;
  }
  return a !== a && b !== b;
}
var isEqual = function exportedEqual(a, b) {
  try {
    return equal(a, b);
  } catch (error) {
    if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
      console.warn("Warning: react-fast-compare does not handle circular references.", error.name, error.message);
      return false;
    }
    throw error;
  }
};

// node_modules/@formily/shared/esm/clone.js
var clone = function(values) {
  if (Array.isArray(values)) {
    var res_1 = [];
    values.forEach(function(item) {
      res_1.push(clone(item));
    });
    return res_1;
  } else if (isPlainObj(values)) {
    if ("$$typeof" in values && "_owner" in values) {
      return values;
    }
    if (values["_isBigNumber"]) {
      return values;
    }
    if (values["_isAMomentObject"]) {
      return values;
    }
    if (values["_isJSONSchemaObject"]) {
      return values;
    }
    if (isFn(values["toJS"])) {
      return values["toJS"]();
    }
    if (isFn(values["toJSON"])) {
      return values["toJSON"]();
    }
    var res = {};
    for (var key in values) {
      if (Object.hasOwnProperty.call(values, key)) {
        res[key] = clone(values[key]);
      }
    }
    return res;
  } else {
    return values;
  }
};

// node_modules/@formily/shared/esm/isEmpty.js
var has = Object.prototype.hasOwnProperty;
var toString2 = Object.prototype.toString;
var isUndef = function(val) {
  return val === void 0;
};
var isValid = function(val) {
  return val !== void 0 && val !== null;
};
function isEmpty(val, strict) {
  if (strict === void 0) {
    strict = false;
  }
  if (val == null) {
    return true;
  }
  if (typeof val === "boolean") {
    return false;
  }
  if (typeof val === "number") {
    return false;
  }
  if (typeof val === "string") {
    return val.length === 0;
  }
  if (typeof val === "function") {
    return val.length === 0;
  }
  if (Array.isArray(val)) {
    if (val.length === 0) {
      return true;
    }
    for (var i = 0; i < val.length; i++) {
      if (strict) {
        if (val[i] !== void 0 && val[i] !== null) {
          return false;
        }
      } else {
        if (val[i] !== void 0 && val[i] !== null && val[i] !== "" && val[i] !== 0) {
          return false;
        }
      }
    }
    return true;
  }
  if (instOf(val, "Error")) {
    return val.message === "";
  }
  if (val.toString === toString2) {
    switch (val.toString()) {
      // Maps, Sets, Files and Errors...
      case "[object File]":
      case "[object Map]":
      case "[object Set]": {
        return val.size === 0;
      }
      // Plain objects...
      case "[object Object]": {
        for (var key in val) {
          if (has.call(val, key)) {
            return false;
          }
        }
        return true;
      }
    }
  }
  return false;
}

// node_modules/tslib/tslib.es6.mjs
var __assign = function() {
  __assign = Object.assign || function __assign9(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};

// node_modules/lower-case/dist.es2015/index.js
function lowerCase(str) {
  return str.toLowerCase();
}

// node_modules/no-case/dist.es2015/index.js
var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
function noCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  var _a2 = options.splitRegexp, splitRegexp = _a2 === void 0 ? DEFAULT_SPLIT_REGEXP : _a2, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? " " : _d;
  var result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
  var start = 0;
  var end = result.length;
  while (result.charAt(start) === "\0")
    start++;
  while (result.charAt(end - 1) === "\0")
    end--;
  return result.slice(start, end).split("\0").map(transform).join(delimiter);
}
function replace(input, re, value) {
  if (re instanceof RegExp)
    return input.replace(re, value);
  return re.reduce(function(input2, re2) {
    return input2.replace(re2, value);
  }, input);
}

// node_modules/pascal-case/dist.es2015/index.js
function pascalCaseTransform(input, index) {
  var firstChar = input.charAt(0);
  var lowerChars = input.substr(1).toLowerCase();
  if (index > 0 && firstChar >= "0" && firstChar <= "9") {
    return "_" + firstChar + lowerChars;
  }
  return "" + firstChar.toUpperCase() + lowerChars;
}
function pascalCase(input, options) {
  if (options === void 0) {
    options = {};
  }
  return noCase(input, __assign({ delimiter: "", transform: pascalCaseTransform }, options));
}

// node_modules/@formily/shared/esm/string.js
var ansiRegex = function() {
  var pattern = [
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"
  ].join("|");
  return new RegExp(pattern, "g");
};
var regex = "[\uD800-\uDBFF][\uDC00-\uDFFF]";
var astralRegex = function(opts) {
  return opts && opts.exact ? new RegExp("^".concat(regex, "$")) : new RegExp(regex, "g");
};
var stripAnsi = function(input) {
  return typeof input === "string" ? input.replace(ansiRegex(), "") : input;
};
var stringLength = function(input) {
  return stripAnsi(input).replace(astralRegex(), " ").length;
};

// node_modules/@formily/path/esm/contexts.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var ContextType = function(flag, props) {
  return __assign2({ flag }, props);
};
var bracketContext = ContextType("[]");
var bracketArrayContext = ContextType("[\\d]");
var bracketDContext = ContextType("[[]]");
var parenContext = ContextType("()");
var braceContext = ContextType("{}");
var destructorContext = ContextType("{x}");

// node_modules/@formily/path/esm/tokens.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var TokenType = function(flag, props) {
  return __assign3({ flag }, props);
};
var nameTok = TokenType("name", {
  expectNext: function(next) {
    if (this.includesContext(destructorContext)) {
      return next === nameTok || next === commaTok || next === bracketRTok || next === braceRTok || next === colonTok;
    }
    return next === dotTok || next === commaTok || next === eofTok || next === bracketRTok || next === parenRTok || next === colonTok || next === expandTok || next === bracketLTok;
  }
});
var starTok = TokenType("*", {
  expectNext: function(next) {
    return next === dotTok || next === parenLTok || next === bracketLTok || next === eofTok || next === commaTok || next === parenRTok;
  }
});
var dbStarTok = TokenType("**", {
  expectNext: function(next) {
    return next === dotTok || next === bracketLTok || next === eofTok || next === commaTok || next === parenRTok;
  }
});
var dotTok = TokenType(".", {
  expectNext: function(next) {
    return next === dotTok || next === nameTok || next === bracketDLTok || next === starTok || next === dbStarTok || next === bracketLTok || next === braceLTok || next === eofTok;
  },
  expectPrev: function(prev) {
    return prev === dotTok || prev === nameTok || prev === bracketDRTok || prev === starTok || prev === parenRTok || prev === bracketRTok || prev === expandTok || prev === braceRTok;
  }
});
var bangTok = TokenType("!", {
  expectNext: function(next) {
    return next === nameTok || next === bracketDLTok;
  }
});
var colonTok = TokenType(":", {
  expectNext: function(next) {
    if (this.includesContext(destructorContext)) {
      return next === nameTok || next === braceLTok || next === bracketLTok;
    }
    return next === nameTok || next === bracketDLTok || next === bracketRTok;
  }
});
var braceLTok = TokenType("{", {
  expectNext: function(next) {
    return next === nameTok;
  },
  expectPrev: function(prev) {
    if (this.includesContext(destructorContext)) {
      return prev === colonTok || prev === commaTok || prev === bracketLTok;
    }
    return prev === dotTok || prev === colonTok || prev === parenLTok;
  },
  updateContext: function() {
    this.state.context.push(braceContext);
  }
});
var braceRTok = TokenType("}", {
  expectNext: function(next) {
    if (this.includesContext(destructorContext)) {
      return next === commaTok || next === braceRTok || next === eofTok || next === bracketRTok;
    }
    return next === dotTok || next === eofTok || next === commaTok;
  },
  expectPrev: function(prev) {
    return prev === nameTok || prev === braceRTok || prev === bracketRTok;
  },
  updateContext: function() {
    this.state.context.pop(braceContext);
  }
});
var bracketLTok = TokenType("[", {
  expectNext: function(next) {
    if (this.includesContext(destructorContext)) {
      return next === nameTok || next === bracketLTok || next === braceLTok || next === bracketRTok;
    }
    return next === nameTok || next === bracketDLTok || next === colonTok || next === bracketLTok || next === ignoreTok || next === bracketRTok;
  },
  expectPrev: function(prev) {
    if (this.includesContext(destructorContext)) {
      return prev === colonTok || prev === commaTok || prev === bracketLTok;
    }
    return prev === starTok || prev === bracketLTok || prev === dotTok || prev === nameTok || prev === parenLTok || // never reach
    prev == commaTok;
  },
  updateContext: function() {
    this.state.context.push(bracketContext);
  }
});
var bracketRTok = TokenType("]", {
  expectNext: function(next) {
    if (this.includesContext(destructorContext)) {
      return next === commaTok || next === braceRTok || next === bracketRTok || next === eofTok;
    }
    return next === dotTok || next === eofTok || next === commaTok || next === parenRTok || next === bracketRTok;
  },
  updateContext: function() {
    if (this.includesContext(bracketArrayContext))
      return;
    if (!this.includesContext(bracketContext))
      throw this.unexpect();
    this.state.context.pop();
  }
});
var bracketDLTok = TokenType("[[", {
  updateContext: function() {
    this.state.context.push(bracketDContext);
  }
});
var bracketDRTok = TokenType("]]", {
  updateContext: function() {
    if (this.curContext() !== bracketDContext)
      throw this.unexpect();
    this.state.context.pop();
  }
});
var parenLTok = TokenType("(", {
  expectNext: function(next) {
    return next === nameTok || next === bracketDLTok || next === braceLTok || next === bangTok || next === bracketLTok;
  },
  expectPrev: function(prev) {
    return prev === starTok;
  },
  updateContext: function() {
    this.state.context.push(parenContext);
  }
});
var parenRTok = TokenType(")", {
  expectNext: function(next) {
    return next === dotTok || next === eofTok || next === commaTok || next === parenRTok;
  },
  updateContext: function() {
    if (this.curContext() !== parenContext)
      throw this.unexpect();
    this.state.context.pop();
  }
});
var commaTok = TokenType(",", {
  expectNext: function(next) {
    return next === nameTok || next === bracketDLTok || next === bracketLTok || next === braceLTok;
  }
});
var ignoreTok = TokenType("ignore", {
  expectNext: function(next) {
    return next === bracketDRTok;
  },
  expectPrev: function(prev) {
    return prev == bracketDLTok;
  }
});
var expandTok = TokenType("expandTok", {
  expectNext: function(next) {
    return next === dotTok || next === eofTok || next === commaTok || next === parenRTok;
  }
});
var eofTok = TokenType("eof");

// node_modules/@formily/path/esm/tokenizer.js
var nonASCIIWhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
var fullCharCodeAtPos = function(input, pos) {
  if (String.fromCharCode)
    return input.codePointAt(pos);
  var code = input.charCodeAt(pos);
  if (code <= 55295 || code >= 57344)
    return code;
  var next = input.charCodeAt(pos + 1);
  return (code << 10) + next - 56613888;
};
var isRewordCode = function(code) {
  return code === 42 || code === 46 || code === 33 || code === 91 || code === 93 || code === 40 || code === 41 || code === 44 || code === 58 || code === 126 || code === 123 || code === 125;
};
var getError = function(message, props) {
  var err = new Error(message);
  Object.assign(err, props);
  return err;
};
var slice = function(string, start, end) {
  var str = "";
  for (var i = start; i < end; i++) {
    var ch = string.charAt(i);
    if (ch !== "\\") {
      str += ch;
    }
  }
  return str;
};
var Tokenizer = (
  /** @class */
  function() {
    function Tokenizer2(input) {
      this.input = input;
      this.state = {
        context: [],
        type: null,
        pos: 0
      };
      this.type_ = null;
    }
    Tokenizer2.prototype.curContext = function() {
      return this.state.context[this.state.context.length - 1];
    };
    Tokenizer2.prototype.includesContext = function(context) {
      for (var len = this.state.context.length - 1; len >= 0; len--) {
        if (this.state.context[len] === context) {
          return true;
        }
      }
      return false;
    };
    Tokenizer2.prototype.unexpect = function(type) {
      type = type || this.state.type;
      return getError('Unexpect token "'.concat(type.flag, '" in ').concat(this.state.pos, " char."), {
        pos: this.state.pos
      });
    };
    Tokenizer2.prototype.expectNext = function(type, next) {
      if (type && type.expectNext) {
        if (next && !type.expectNext.call(this, next)) {
          throw getError('Unexpect token "'.concat(next.flag, '" token should not be behind "').concat(type.flag, '" token.(').concat(this.state.pos, "th char)"), {
            pos: this.state.pos
          });
        }
      }
    };
    Tokenizer2.prototype.expectPrev = function(type, prev) {
      if (type && type.expectPrev) {
        if (prev && !type.expectPrev.call(this, prev)) {
          throw getError('Unexpect token "'.concat(type.flag, '" should not be behind "').concat(prev.flag, '"(').concat(this.state.pos, "th char)."), {
            pos: this.state.pos
          });
        }
      }
    };
    Tokenizer2.prototype.match = function(type) {
      return this.state.type === type;
    };
    Tokenizer2.prototype.skipSpace = function() {
      if (this.curContext() === bracketDContext)
        return;
      loop: while (this.state.pos < this.input.length) {
        var ch = this.input.charCodeAt(this.state.pos);
        switch (ch) {
          case 32:
          case 160:
            ++this.state.pos;
            break;
          case 13:
            if (this.input.charCodeAt(this.state.pos + 1) === 10) {
              ++this.state.pos;
            }
          case 10:
          case 8232:
          case 8233:
            ++this.state.pos;
            break;
          default:
            if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIWhitespace.test(String.fromCharCode(ch))) {
              ++this.state.pos;
            } else {
              break loop;
            }
        }
      }
    };
    Tokenizer2.prototype.next = function() {
      this.type_ = this.state.type;
      if (this.input.length <= this.state.pos) {
        return this.finishToken(eofTok);
      }
      this.skipSpace();
      this.readToken(this.getCode(), this.state.pos > 0 ? this.getCode(this.state.pos - 1) : -Infinity);
    };
    Tokenizer2.prototype.getCode = function(pos) {
      if (pos === void 0) {
        pos = this.state.pos;
      }
      return fullCharCodeAtPos(this.input, pos);
    };
    Tokenizer2.prototype.eat = function(type) {
      if (this.match(type)) {
        this.next();
        return true;
      } else {
        return false;
      }
    };
    Tokenizer2.prototype.readKeyWord = function() {
      var startPos = this.state.pos, string = "";
      while (true) {
        var code = this.getCode();
        var prevCode = this.getCode(this.state.pos - 1);
        if (this.input.length === this.state.pos) {
          string = slice(this.input, startPos, this.state.pos + 1);
          break;
        }
        if (!isRewordCode(code) || prevCode === 92) {
          if (code === 32 || code === 160 || code === 10 || code === 8232 || code === 8233) {
            string = slice(this.input, startPos, this.state.pos);
            break;
          }
          if (code === 13 && this.input.charCodeAt(this.state.pos + 1) === 10) {
            string = slice(this.input, startPos, this.state.pos);
            break;
          }
          if (code > 8 && code < 14 || code >= 5760 && nonASCIIWhitespace.test(String.fromCharCode(code))) {
            string = slice(this.input, startPos, this.state.pos);
            break;
          }
          this.state.pos++;
        } else {
          string = slice(this.input, startPos, this.state.pos);
          break;
        }
      }
      this.finishToken(nameTok, string);
    };
    Tokenizer2.prototype.readIgnoreString = function() {
      var startPos = this.state.pos, prevCode, string = "";
      while (true) {
        var code = this.getCode();
        if (this.state.pos >= this.input.length)
          break;
        if ((code === 91 || code === 93) && prevCode === 92) {
          this.state.pos++;
          prevCode = "";
        } else if (code == 93 && prevCode === 93) {
          string = this.input.slice(startPos, this.state.pos - 1).replace(/\\([\[\]])/g, "$1");
          this.state.pos++;
          break;
        } else {
          this.state.pos++;
          prevCode = code;
        }
      }
      this.finishToken(ignoreTok, string);
      this.finishToken(bracketDRTok);
    };
    Tokenizer2.prototype.finishToken = function(type, value) {
      var preType = this.state.type;
      this.state.type = type;
      if (value !== void 0)
        this.state.value = value;
      this.expectNext(preType, type);
      this.expectPrev(type, preType);
      if (type.updateContext) {
        type.updateContext.call(this, preType);
      }
    };
    Tokenizer2.prototype.readToken = function(code, prevCode) {
      if (prevCode === 92) {
        return this.readKeyWord();
      }
      if (this.input.length <= this.state.pos) {
        this.finishToken(eofTok);
      } else if (this.curContext() === bracketDContext) {
        this.readIgnoreString();
      } else if (code === 123) {
        this.state.pos++;
        this.finishToken(braceLTok);
      } else if (code === 125) {
        this.state.pos++;
        this.finishToken(braceRTok);
      } else if (code === 42) {
        this.state.pos++;
        if (this.getCode() === 42) {
          this.state.pos++;
          return this.finishToken(dbStarTok);
        }
        this.finishToken(starTok);
      } else if (code === 33) {
        this.state.pos++;
        this.finishToken(bangTok);
      } else if (code === 46) {
        this.state.pos++;
        this.finishToken(dotTok);
      } else if (code === 91) {
        this.state.pos++;
        if (this.getCode() === 91) {
          this.state.pos++;
          return this.finishToken(bracketDLTok);
        }
        this.finishToken(bracketLTok);
      } else if (code === 126) {
        this.state.pos++;
        this.finishToken(expandTok);
      } else if (code === 93) {
        this.state.pos++;
        this.finishToken(bracketRTok);
      } else if (code === 40) {
        this.state.pos++;
        this.finishToken(parenLTok);
      } else if (code === 41) {
        this.state.pos++;
        this.finishToken(parenRTok);
      } else if (code === 44) {
        this.state.pos++;
        this.finishToken(commaTok);
      } else if (code === 58) {
        this.state.pos++;
        this.finishToken(colonTok);
      } else {
        this.readKeyWord();
      }
    };
    return Tokenizer2;
  }()
);

// node_modules/@formily/path/esm/types.js
var isType2 = function(type) {
  return function(obj) {
    return obj && obj.type === type;
  };
};
var isIdentifier = isType2("Identifier");
var isIgnoreExpression = isType2("IgnoreExpression");
var isDotOperator = isType2("DotOperator");
var isWildcardOperator = isType2("WildcardOperator");
var isExpandOperator = isType2("ExpandOperator");
var isGroupExpression = isType2("GroupExpression");
var isRangeExpression = isType2("RangeExpression");
var isDestructorExpression = isType2("DestructorExpression");
var isObjectPattern = isType2("ObjectPattern");
var isObjectPatternProperty = isType2("ObjectPatternProperty");
var isArrayPattern = isType2("ArrayPattern");

// node_modules/@formily/path/esm/shared.js
var toString3 = Object.prototype.toString;
var isType3 = function(type) {
  return function(obj) {
    return toString3.call(obj) === "[object ".concat(type, "]");
  };
};
var isFn2 = isType3("Function");
var isArr2 = Array.isArray || isType3("Array");
var isPlainObj2 = isType3("Object");
var isStr2 = isType3("String");
var isBool2 = isType3("Boolean");
var isNum2 = isType3("Number");
var isObj2 = function(val) {
  return typeof val === "object";
};
var isRegExp2 = isType3("RegExp");
var isNumberLike2 = function(t) {
  return isNum2(t) || /^(\d+)(\.\d+)?$/.test(t);
};
var isArray2 = isArr2;
var keyList2 = Object.keys;
var hasProp2 = Object.prototype.hasOwnProperty;
var toArr2 = function(val) {
  return Array.isArray(val) ? val : val !== void 0 ? [val] : [];
};
var isEqual2 = function(a, b) {
  if (a === b) {
    return true;
  }
  if (a && b && typeof a === "object" && typeof b === "object") {
    var arrA = isArray2(a);
    var arrB = isArray2(b);
    var i = void 0;
    var length = void 0;
    var key = void 0;
    if (arrA && arrB) {
      length = a.length;
      if (length !== b.length) {
        return false;
      }
      for (i = length; i-- !== 0; ) {
        if (!isEqual2(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    if (arrA !== arrB) {
      return false;
    }
    var keys = keyList2(a);
    length = keys.length;
    if (length !== keyList2(b).length) {
      return false;
    }
    for (i = length; i-- !== 0; ) {
      if (!hasProp2.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0; ) {
      key = keys[i];
      if (!isEqual2(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
};
var isSegmentEqual = function(a, b) {
  a = typeof a === "symbol" ? a : "".concat(a);
  b = typeof b === "symbol" ? b : "".concat(b);
  return a === b;
};

// node_modules/@formily/path/esm/destructor.js
var DestructorCache = /* @__PURE__ */ new Map();
var isValid2 = function(val) {
  return val !== void 0 && val !== null;
};
var getDestructor = function(source) {
  return DestructorCache.get(source);
};
var setDestructor = function(source, rules) {
  DestructorCache.set(source, rules);
};
var parseDestructorRules = function(node) {
  var rules = [];
  if (isObjectPattern(node)) {
    var index_1 = 0;
    node.properties.forEach(function(child) {
      rules[index_1] = {
        path: []
      };
      rules[index_1].key = child.key.value;
      rules[index_1].path.push(child.key.value);
      if (isIdentifier(child.value)) {
        rules[index_1].key = child.value.value;
      }
      var basePath = rules[index_1].path;
      var childRules = parseDestructorRules(child.value);
      var k = index_1;
      childRules.forEach(function(rule) {
        if (rules[k]) {
          rules[k].key = rule.key;
          rules[k].path = basePath.concat(rule.path);
        } else {
          rules[k] = {
            key: rule.key,
            path: basePath.concat(rule.path)
          };
        }
        k++;
      });
      if (k > index_1) {
        index_1 = k;
      } else {
        index_1++;
      }
    });
    return rules;
  } else if (isArrayPattern(node)) {
    var index_2 = 0;
    node.elements.forEach(function(child, key) {
      rules[index_2] = {
        path: []
      };
      rules[index_2].key = key;
      rules[index_2].path.push(key);
      if (isIdentifier(child)) {
        rules[index_2].key = child.value;
      }
      var basePath = rules[index_2].path;
      var childRules = parseDestructorRules(child);
      var k = index_2;
      childRules.forEach(function(rule) {
        if (rules[k]) {
          rules[k].key = rule.key;
          rules[k].path = basePath.concat(rule.path);
        } else {
          rules[k] = {
            key: rule.key,
            path: basePath.concat(rule.path)
          };
        }
        k++;
      });
      if (k > index_2) {
        index_2 = k;
      } else {
        index_2++;
      }
    });
    return rules;
  }
  if (isDestructorExpression(node)) {
    return parseDestructorRules(node.value);
  }
  return rules;
};
var setInByDestructor = function(source, rules, value, mutators) {
  rules.forEach(function(_a2) {
    var key = _a2.key, path = _a2.path;
    mutators.setIn([key], source, mutators.getIn(path, value));
  });
};
var getInByDestructor = function(source, rules, mutators) {
  var response = {};
  if (rules.length) {
    if (isNum2(rules[0].path[0])) {
      response = [];
    }
  }
  source = isValid2(source) ? source : {};
  rules.forEach(function(_a2) {
    var key = _a2.key, path = _a2.path;
    mutators.setIn(path, response, source[key]);
  });
  return response;
};
var deleteInByDestructor = function(source, rules, mutators) {
  rules.forEach(function(_a2) {
    var key = _a2.key;
    mutators.deleteIn([key], source);
  });
};
var existInByDestructor = function(source, rules, start, mutators) {
  return rules.every(function(_a2) {
    var key = _a2.key;
    return mutators.existIn([key], source, start);
  });
};

// node_modules/@formily/path/esm/parser.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var createTreeBySegments = function(segments, afterNode) {
  if (segments === void 0) {
    segments = [];
  }
  var segLen = segments.length;
  var build = function(start) {
    if (start === void 0) {
      start = 0;
    }
    var after = start < segLen - 1 ? build(start + 1) : afterNode;
    var dot = after && {
      type: "DotOperator",
      after
    };
    return {
      type: "Identifier",
      value: segments[start],
      after: dot
    };
  };
  return build();
};
var calculate = function(a, b, operator) {
  if (isNumberLike2(a) && isNumberLike2(b)) {
    if (operator === "+")
      return String(Number(a) + Number(b));
    if (operator === "-")
      return String(Number(a) - Number(b));
    if (operator === "*")
      return String(Number(a) * Number(b));
    if (operator === "/")
      return String(Number(a) / Number(b));
  } else {
    if (operator === "+")
      return String(a) + String(b);
    if (operator === "-")
      return "NaN";
    if (operator === "*")
      return "NaN";
    if (operator === "/")
      return "NaN";
  }
  return String(Number(b));
};
var Parser = (
  /** @class */
  function(_super) {
    __extends(Parser2, _super);
    function Parser2(input, base) {
      var _this = _super.call(this, input) || this;
      _this.isMatchPattern = false;
      _this.isWildMatchPattern = false;
      _this.haveExcludePattern = false;
      _this.haveRelativePattern = false;
      _this.base = base;
      return _this;
    }
    Parser2.prototype.parse = function() {
      var node;
      this.data = {
        segments: []
      };
      if (!this.eat(eofTok)) {
        this.next();
        node = this.parseAtom(this.state.type);
      }
      this.data.tree = node;
      return node;
    };
    Parser2.prototype.append = function(parent, node) {
      if (parent && node) {
        parent.after = node;
      }
    };
    Parser2.prototype.parseAtom = function(type) {
      switch (type) {
        case braceLTok:
        case bracketLTok:
          if (this.includesContext(destructorContext)) {
            if (type === braceLTok) {
              return this.parseObjectPattern();
            } else {
              return this.parseArrayPattern();
            }
          }
          return this.parseDestructorExpression();
        case nameTok:
          return this.parseIdentifier();
        case expandTok:
          return this.parseExpandOperator();
        case dbStarTok:
        case starTok:
          return this.parseWildcardOperator();
        case bracketDLTok:
          return this.parseIgnoreExpression();
        case dotTok:
          return this.parseDotOperator();
      }
    };
    Parser2.prototype.pushSegments = function(key) {
      this.data.segments.push(key);
    };
    Parser2.prototype.parseIdentifier = function() {
      var node = {
        type: "Identifier",
        value: this.state.value
      };
      var hasNotInDestructor = !this.includesContext(destructorContext) && !this.isMatchPattern && !this.isWildMatchPattern;
      this.next();
      if (this.includesContext(bracketArrayContext)) {
        if (this.state.type !== bracketRTok) {
          throw this.unexpect();
        } else {
          this.state.context.pop();
          this.next();
        }
      } else if (hasNotInDestructor) {
        this.pushSegments(node.value);
      }
      if (this.state.type === bracketLTok) {
        this.next();
        if (this.state.type !== nameTok) {
          throw this.unexpect();
        }
        this.state.context.push(bracketArrayContext);
        var isNumberKey = false;
        if (/^\d+$/.test(this.state.value)) {
          isNumberKey = true;
        }
        var value = this.state.value;
        this.pushSegments(isNumberKey ? Number(value) : value);
        var after = this.parseAtom(this.state.type);
        if (isNumberKey) {
          after.arrayIndex = true;
        }
        this.append(node, after);
      } else {
        this.append(node, this.parseAtom(this.state.type));
      }
      return node;
    };
    Parser2.prototype.parseExpandOperator = function() {
      var node = {
        type: "ExpandOperator"
      };
      this.isMatchPattern = true;
      this.isWildMatchPattern = true;
      this.data.segments = [];
      this.next();
      this.append(node, this.parseAtom(this.state.type));
      return node;
    };
    Parser2.prototype.parseWildcardOperator = function() {
      var node = {
        type: "WildcardOperator"
      };
      if (this.state.type === dbStarTok) {
        node.optional = true;
      }
      this.isMatchPattern = true;
      this.isWildMatchPattern = true;
      this.data.segments = [];
      this.next();
      if (this.state.type === parenLTok) {
        node.filter = this.parseGroupExpression(node);
      } else if (this.state.type === bracketLTok) {
        node.filter = this.parseRangeExpression(node);
      }
      this.append(node, this.parseAtom(this.state.type));
      return node;
    };
    Parser2.prototype.parseDestructorExpression = function() {
      var _this = this;
      var node = {
        type: "DestructorExpression"
      };
      this.state.context.push(destructorContext);
      var startPos = this.state.pos - 1;
      node.value = this.state.type === braceLTok ? this.parseObjectPattern() : this.parseArrayPattern();
      var endPos = this.state.pos;
      this.state.context.pop();
      node.source = this.input.substring(startPos, endPos).replace(/\[\s*([\+\-\*\/])?\s*([^,\]\s]*)\s*\]/, function(match, operator, target) {
        if (_this.relative !== void 0) {
          if (operator) {
            if (target) {
              return calculate(_this.relative, target, operator);
            } else {
              return calculate(_this.relative, 1, operator);
            }
          } else {
            if (target) {
              return calculate(_this.relative, target, "+");
            } else {
              return String(_this.relative);
            }
          }
        }
        return match;
      }).replace(/\s*\.\s*/g, "").replace(/\s*/g, "");
      if (this.relative === void 0) {
        setDestructor(node.source, parseDestructorRules(node));
      }
      this.relative = void 0;
      this.pushSegments(node.source);
      this.next();
      this.append(node, this.parseAtom(this.state.type));
      return node;
    };
    Parser2.prototype.parseArrayPattern = function() {
      var node = {
        type: "ArrayPattern",
        elements: []
      };
      this.next();
      node.elements = this.parseArrayPatternElements();
      return node;
    };
    Parser2.prototype.parseArrayPatternElements = function() {
      var nodes = [];
      while (this.state.type !== bracketRTok && this.state.type !== eofTok) {
        nodes.push(this.parseAtom(this.state.type));
        if (this.state.type === bracketRTok) {
          if (this.includesContext(destructorContext)) {
            this.next();
          }
          return nodes;
        }
        this.next();
      }
      return nodes;
    };
    Parser2.prototype.parseObjectPattern = function() {
      var node = {
        type: "ObjectPattern",
        properties: []
      };
      this.next();
      node.properties = this.parseObjectProperties();
      return node;
    };
    Parser2.prototype.parseObjectProperties = function() {
      var nodes = [];
      while (this.state.type !== braceRTok && this.state.type !== eofTok) {
        var node = {
          type: "ObjectPatternProperty",
          key: this.parseAtom(this.state.type)
        };
        nodes.push(node);
        if (this.state.type === colonTok) {
          this.next();
          node.value = this.parseAtom(this.state.type);
        }
        if (this.state.type === braceRTok) {
          if (this.includesContext(destructorContext)) {
            this.next();
          }
          return nodes;
        }
        this.next();
      }
      return nodes;
    };
    Parser2.prototype.parseDotOperator = function() {
      var node = {
        type: "DotOperator"
      };
      var prevToken = this.type_;
      if (!prevToken && this.base) {
        if (this.base.isMatchPattern) {
          throw new Error("Base path must be an absolute path.");
        }
        this.data.segments = this.base.toArr();
        while (this.state.type === dotTok) {
          this.relative = this.data.segments.pop();
          this.haveRelativePattern = true;
          this.next();
        }
        return createTreeBySegments(this.data.segments.slice(), this.parseAtom(this.state.type));
      } else {
        this.next();
      }
      this.append(node, this.parseAtom(this.state.type));
      return node;
    };
    Parser2.prototype.parseIgnoreExpression = function() {
      this.next();
      var value = String(this.state.value).replace(/\s*/g, "");
      var node = {
        type: "IgnoreExpression",
        value
      };
      this.pushSegments(value);
      this.next();
      this.append(node, this.parseAtom(this.state.type));
      this.next();
      return node;
    };
    Parser2.prototype.parseGroupExpression = function(parent) {
      var node = {
        type: "GroupExpression",
        value: []
      };
      this.isMatchPattern = true;
      this.data.segments = [];
      this.next();
      loop: while (true) {
        switch (this.state.type) {
          case commaTok:
            this.next();
            break;
          case bangTok:
            node.isExclude = true;
            this.haveExcludePattern = true;
            this.next();
            break;
          case eofTok:
            break loop;
          case parenRTok:
            break loop;
          default:
            node.value.push(this.parseAtom(this.state.type));
        }
      }
      this.next();
      this.append(parent, this.parseAtom(this.state.type));
      return node;
    };
    Parser2.prototype.parseRangeExpression = function(parent) {
      var node = {
        type: "RangeExpression"
      };
      this.next();
      this.isMatchPattern = true;
      this.data.segments = [];
      var start = false, hasColon = false;
      loop: while (true) {
        switch (this.state.type) {
          case colonTok:
            hasColon = true;
            start = true;
            this.next();
            break;
          case bracketRTok:
            if (!hasColon && !node.end) {
              node.end = node.start;
            }
            break loop;
          case commaTok:
            throw this.unexpect();
          case eofTok:
            break loop;
          default:
            if (!start) {
              node.start = this.parseAtom(this.state.type);
            } else {
              node.end = this.parseAtom(this.state.type);
            }
        }
      }
      this.next();
      this.append(parent, this.parseAtom(this.state.type));
      return node;
    };
    return Parser2;
  }(Tokenizer)
);

// node_modules/@formily/path/esm/matcher.js
var Matcher = (
  /** @class */
  function() {
    function Matcher2(tree, record) {
      this.tree = tree;
      this.stack = [];
      this.excluding = false;
      this.wildcards = [];
      this.record = record;
    }
    Matcher2.prototype.next = function(node, pos) {
      if (node.after) {
        return this.matchNode(node.after, pos);
      }
      if (isWildcardOperator(node) && !node.filter) {
        if (this.excluding) {
          return false;
        } else {
          if (pos === 0 || node.optional)
            return true;
          return !!this.take(pos);
        }
      }
      var isLastToken = pos === this.path.length - 1;
      if (isLastToken) {
        return !!this.take(pos);
      } else {
        var wildcard = this.wildcards.pop();
        if (wildcard && wildcard.after) {
          return this.next(wildcard, pos);
        }
      }
      return false;
    };
    Matcher2.prototype.shot = function() {
      var _a2;
      if (((_a2 = this.record) === null || _a2 === void 0 ? void 0 : _a2.score) >= 0) {
        this.record.score++;
      }
    };
    Matcher2.prototype.take = function(pos) {
      var _a2;
      return String((_a2 = this.path[pos]) !== null && _a2 !== void 0 ? _a2 : "");
    };
    Matcher2.prototype.matchExcludeIdentifier = function(matched, node, pos) {
      var isLastToken = pos === this.path.length - 1;
      var isContainToken = pos < this.path.length;
      if (!node.after) {
        this.excluding = false;
      }
      if (matched) {
        if (node.after) {
          return this.next(node, pos);
        }
        if (isLastToken) {
          return false;
        }
      }
      if (isLastToken) {
        return true;
      }
      return isContainToken;
    };
    Matcher2.prototype.matchIdentifier = function(node, pos) {
      var current = this.take(pos);
      var matched = false;
      if (isExpandOperator(node.after)) {
        if (current.indexOf(node.value) === 0) {
          this.shot();
          matched = true;
        }
        if (this.excluding) {
          return this.matchExcludeIdentifier(matched, node.after, pos);
        } else {
          return matched && this.next(node.after, pos);
        }
      } else if (current === node.value) {
        this.shot();
        matched = true;
      }
      if (this.excluding) {
        return this.matchExcludeIdentifier(matched, node, pos);
      } else {
        return matched && this.next(node, pos);
      }
    };
    Matcher2.prototype.matchIgnoreExpression = function(node, pos) {
      return isEqual2(node.value, this.take(pos)) && this.next(node, pos);
    };
    Matcher2.prototype.matchDestructorExpression = function(node, pos) {
      return isEqual2(node.source, this.take(pos)) && this.next(node, pos);
    };
    Matcher2.prototype.matchExpandOperator = function(node, pos) {
      return this.next(node, pos);
    };
    Matcher2.prototype.matchWildcardOperator = function(node, pos) {
      var matched = false;
      if (node.filter) {
        this.stack.push(node);
        matched = this.matchNode(node.filter, pos);
        this.stack.pop();
      } else {
        matched = this.next(node, pos);
      }
      return matched;
    };
    Matcher2.prototype.matchGroupExpression = function(node, pos) {
      var _this = this;
      var excluding = false;
      if (node.isExclude) {
        excluding = !this.excluding;
      }
      return toArr2(node.value)[excluding ? "every" : "some"](function(item) {
        _this.wildcards = _this.stack.slice();
        _this.excluding = excluding;
        return _this.matchNode(item, pos);
      });
    };
    Matcher2.prototype.matchRangeExpression = function(node, pos) {
      var current = Number(this.take(pos));
      if (node.start) {
        if (node.end) {
          return current >= Number(node.start.value) && current <= Number(node.end.value);
        } else {
          return current >= Number(node.start.value);
        }
      } else {
        if (node.end) {
          return current <= Number(node.end.value);
        } else {
          this.wildcards = this.stack.slice();
          return this.next(node, pos);
        }
      }
    };
    Matcher2.prototype.matchNode = function(node, pos) {
      if (pos === void 0) {
        pos = 0;
      }
      if (isDotOperator(node)) {
        return this.next(node, pos + 1);
      } else if (isIdentifier(node)) {
        return this.matchIdentifier(node, pos);
      } else if (isIgnoreExpression(node)) {
        return this.matchIgnoreExpression(node, pos);
      } else if (isDestructorExpression(node)) {
        return this.matchDestructorExpression(node, pos);
      } else if (isExpandOperator(node)) {
        return this.matchExpandOperator(node, pos);
      } else if (isWildcardOperator(node)) {
        return this.matchWildcardOperator(node, pos);
      } else if (isGroupExpression(node)) {
        return this.matchGroupExpression(node, pos);
      } else if (isRangeExpression(node)) {
        return this.matchRangeExpression(node, pos);
      }
      return false;
    };
    Matcher2.prototype.match = function(path) {
      this.path = path;
      return { matched: this.matchNode(this.tree), record: this.record };
    };
    Matcher2.matchSegments = function(source, target, record) {
      if (source.length !== target.length)
        return { matched: false, record };
      var match = function(pos) {
        if (pos === void 0) {
          pos = 0;
        }
        var current = isSegmentEqual(source[pos], target[pos]);
        if ((record === null || record === void 0 ? void 0 : record.score) >= 0) {
          record.score++;
        }
        return current && (pos < source.length - 1 ? match(pos + 1) : true);
      };
      return { matched: match(), record };
    };
    return Matcher2;
  }()
);

// node_modules/@formily/path/esm/index.js
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var pathCache = /* @__PURE__ */ new Map();
var isMatcher = Symbol("PATH_MATCHER");
var isValid3 = function(val) {
  return val !== void 0 && val !== null;
};
var isSimplePath = function(val) {
  return val.indexOf("*") === -1 && val.indexOf("~") === -1 && val.indexOf("[") === -1 && val.indexOf("]") === -1 && val.indexOf(",") === -1 && val.indexOf(":") === -1 && val.indexOf(" ") === -1 && val[0] !== ".";
};
var isAssignable = function(val) {
  return typeof val === "object" || typeof val === "function";
};
var isNumberIndex = function(val) {
  return isStr2(val) ? /^\d+$/.test(val) : isNum2(val);
};
var getIn = function(segments, source) {
  for (var i = 0; i < segments.length; i++) {
    var index = segments[i];
    var rules = getDestructor(index);
    if (!rules) {
      if (!isValid3(source))
        return;
      source = source[index];
    } else {
      source = getInByDestructor(source, rules, { setIn, getIn });
      break;
    }
  }
  return source;
};
var setIn = function(segments, source, value) {
  for (var i = 0; i < segments.length; i++) {
    var index = segments[i];
    var rules = getDestructor(index);
    if (!rules) {
      if (!isValid3(source) || !isAssignable(source))
        return;
      if (isArr2(source) && !isNumberIndex(index)) {
        return;
      }
      if (!isValid3(source[index])) {
        if (value === void 0) {
          if (source[index] === null)
            source[index] = value;
          return;
        }
        if (i < segments.length - 1) {
          source[index] = isNum2(segments[i + 1]) ? [] : {};
        }
      }
      if (i === segments.length - 1) {
        source[index] = value;
      }
      source = source[index];
    } else {
      setInByDestructor(source, rules, value, { setIn, getIn });
      break;
    }
  }
};
var deleteIn = function(segments, source) {
  for (var i = 0; i < segments.length; i++) {
    var index = segments[i];
    var rules = getDestructor(index);
    if (!rules) {
      if (i === segments.length - 1 && isValid3(source)) {
        delete source[index];
        return;
      }
      if (!isValid3(source) || !isAssignable(source))
        return;
      source = source[index];
      if (!isObj2(source)) {
        return;
      }
    } else {
      deleteInByDestructor(source, rules, {
        setIn,
        getIn,
        deleteIn
      });
      break;
    }
  }
};
var hasOwnProperty = Object.prototype.hasOwnProperty;
var existIn = function(segments, source, start) {
  if (start instanceof Path) {
    start = start.length;
  }
  for (var i = start; i < segments.length; i++) {
    var index = segments[i];
    var rules = getDestructor(index);
    if (!rules) {
      if (i === segments.length - 1) {
        return hasOwnProperty.call(source, index);
      }
      if (!isValid3(source) || !isAssignable(source))
        return false;
      source = source[index];
      if (!isObj2(source)) {
        return false;
      }
    } else {
      return existInByDestructor(source, rules, start, {
        setIn,
        getIn,
        deleteIn,
        existIn
      });
    }
  }
};
var parse = function(pattern, base) {
  if (pattern instanceof Path) {
    return {
      entire: pattern.entire,
      segments: pattern.segments.slice(),
      isRegExp: false,
      haveRelativePattern: pattern.haveRelativePattern,
      isWildMatchPattern: pattern.isWildMatchPattern,
      isMatchPattern: pattern.isMatchPattern,
      haveExcludePattern: pattern.haveExcludePattern,
      tree: pattern.tree
    };
  } else if (isStr2(pattern)) {
    if (!pattern) {
      return {
        entire: "",
        segments: [],
        isRegExp: false,
        isWildMatchPattern: false,
        haveExcludePattern: false,
        isMatchPattern: false
      };
    }
    if (isSimplePath(pattern)) {
      return {
        entire: pattern,
        segments: pattern.split("."),
        isRegExp: false,
        isWildMatchPattern: false,
        haveExcludePattern: false,
        isMatchPattern: false
      };
    }
    var parser = new Parser(pattern, Path.parse(base));
    var tree = parser.parse();
    if (!parser.isMatchPattern) {
      var segments = parser.data.segments;
      return {
        entire: segments.join("."),
        segments,
        tree,
        isRegExp: false,
        haveRelativePattern: parser.haveRelativePattern,
        isWildMatchPattern: false,
        haveExcludePattern: false,
        isMatchPattern: false
      };
    } else {
      return {
        entire: pattern,
        segments: [],
        isRegExp: false,
        haveRelativePattern: false,
        isWildMatchPattern: parser.isWildMatchPattern,
        haveExcludePattern: parser.haveExcludePattern,
        isMatchPattern: true,
        tree
      };
    }
  } else if (isFn2(pattern) && pattern[isMatcher]) {
    return parse(pattern["path"]);
  } else if (isArr2(pattern)) {
    return {
      entire: pattern.join("."),
      segments: pattern.reduce(function(buf, key) {
        return buf.concat(parseString(key));
      }, []),
      isRegExp: false,
      haveRelativePattern: false,
      isWildMatchPattern: false,
      haveExcludePattern: false,
      isMatchPattern: false
    };
  } else if (isRegExp2(pattern)) {
    return {
      entire: pattern,
      segments: [],
      isRegExp: true,
      haveRelativePattern: false,
      isWildMatchPattern: false,
      haveExcludePattern: false,
      isMatchPattern: true
    };
  } else {
    return {
      entire: "",
      isRegExp: false,
      segments: pattern !== void 0 ? [pattern] : [],
      haveRelativePattern: false,
      isWildMatchPattern: false,
      haveExcludePattern: false,
      isMatchPattern: false
    };
  }
};
var parseString = function(source) {
  if (isStr2(source)) {
    source = source.replace(/\s*/g, "");
    try {
      var _a2 = parse(source), segments = _a2.segments, isMatchPattern = _a2.isMatchPattern;
      return !isMatchPattern ? segments : source;
    } catch (e) {
      return source;
    }
  } else if (source instanceof Path) {
    return source.segments;
  }
  return source;
};
var Path = (
  /** @class */
  function() {
    function Path2(input, base) {
      var _this = this;
      this.concat = function() {
        var _a3;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error("".concat(_this.entire, " cannot be concat"));
        }
        var path = new Path2("");
        path.segments = (_a3 = _this.segments).concat.apply(_a3, __spreadArray([], __read(args.map(function(s) {
          return parseString(s);
        })), false));
        path.entire = path.segments.join(".");
        return path;
      };
      this.slice = function(start, end) {
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error("".concat(_this.entire, " cannot be slice"));
        }
        var path = new Path2("");
        path.segments = _this.segments.slice(start, end);
        path.entire = path.segments.join(".");
        return path;
      };
      this.push = function() {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          items[_i] = arguments[_i];
        }
        return _this.concat.apply(_this, __spreadArray([], __read(items), false));
      };
      this.pop = function() {
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error("".concat(_this.entire, " cannot be pop"));
        }
        return new Path2(_this.segments.slice(0, _this.segments.length - 1));
      };
      this.splice = function(start, deleteCount) {
        var items = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          items[_i - 2] = arguments[_i];
        }
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error("".concat(_this.entire, " cannot be splice"));
        }
        items = items.reduce(function(buf, item) {
          return buf.concat(parseString(item));
        }, []);
        var segments_ = _this.segments.slice();
        segments_.splice.apply(segments_, __spreadArray([start, deleteCount], __read(items), false));
        return new Path2(segments_);
      };
      this.forEach = function(callback) {
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error("".concat(_this.entire, " cannot be each"));
        }
        _this.segments.forEach(callback);
      };
      this.map = function(callback) {
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error("".concat(_this.entire, " cannot be map"));
        }
        return _this.segments.map(callback);
      };
      this.reduce = function(callback, initial) {
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error("".concat(_this.entire, " cannot be reduce"));
        }
        return _this.segments.reduce(callback, initial);
      };
      this.parent = function() {
        return _this.slice(0, _this.length - 1);
      };
      this.includes = function(pattern) {
        var _a3 = Path2.parse(pattern), entire2 = _a3.entire, segments2 = _a3.segments, isMatchPattern2 = _a3.isMatchPattern;
        var cache = _this.includesCache.get(entire2);
        if (cache !== void 0)
          return cache;
        var cacheWith = function(value) {
          _this.includesCache.set(entire2, value);
          return value;
        };
        if (_this.isMatchPattern) {
          if (!isMatchPattern2) {
            return cacheWith(_this.match(segments2));
          } else {
            throw new Error("".concat(_this.entire, " cannot be used to match ").concat(entire2));
          }
        }
        if (isMatchPattern2) {
          throw new Error("".concat(_this.entire, " cannot be used to match ").concat(entire2));
        }
        if (segments2.length > _this.segments.length)
          return cacheWith(false);
        for (var i = 0; i < segments2.length; i++) {
          if (!isEqual2(String(segments2[i]), String(_this.segments[i]))) {
            return cacheWith(false);
          }
        }
        return cacheWith(true);
      };
      this.transform = function(regexp, callback) {
        if (!isFn2(callback))
          return "";
        if (_this.isMatchPattern) {
          throw new Error("".concat(_this.entire, " cannot be transformed"));
        }
        var reg = new RegExp(regexp);
        var args = _this.segments.filter(function(key) {
          return reg.test(key);
        });
        return callback.apply(void 0, __spreadArray([], __read(args), false));
      };
      this.match = function(pattern) {
        var _a3, _b;
        var path = Path2.parse(pattern);
        var cache = _this.matchCache.get(path.entire);
        if (cache !== void 0) {
          if (cache.record && cache.record.score !== void 0) {
            _this.matchScore = cache.record.score;
          }
          return cache.matched;
        }
        var cacheWith = function(value) {
          _this.matchCache.set(path.entire, value);
          return value;
        };
        if (path.isMatchPattern) {
          if (_this.isMatchPattern) {
            throw new Error("".concat(path.entire, " cannot match ").concat(_this.entire));
          } else {
            _this.matchScore = 0;
            return cacheWith(path.match(_this.segments));
          }
        } else {
          if (_this.isMatchPattern) {
            if (_this.isRegExp) {
              try {
                return (_b = (_a3 = _this["entire"]) === null || _a3 === void 0 ? void 0 : _a3["test"]) === null || _b === void 0 ? void 0 : _b.call(_a3, path.entire);
              } finally {
                ;
                _this.entire.lastIndex = 0;
              }
            }
            var record = {
              score: 0
            };
            var result = cacheWith(new Matcher(_this.tree, record).match(path.segments));
            _this.matchScore = record.score;
            return result.matched;
          } else {
            var record = {
              score: 0
            };
            var result = cacheWith(Matcher.matchSegments(_this.segments, path.segments, record));
            _this.matchScore = record.score;
            return result.matched;
          }
        }
      };
      this.matchAliasGroup = function(name, alias) {
        var namePath = Path2.parse(name);
        var aliasPath = Path2.parse(alias);
        var nameMatched = _this.match(namePath);
        var nameMatchedScore = _this.matchScore;
        var aliasMatched = _this.match(aliasPath);
        var aliasMatchedScore = _this.matchScore;
        if (_this.haveExcludePattern) {
          if (nameMatchedScore >= aliasMatchedScore) {
            return nameMatched;
          } else {
            return aliasMatched;
          }
        } else {
          return nameMatched || aliasMatched;
        }
      };
      this.existIn = function(source, start) {
        if (start === void 0) {
          start = 0;
        }
        return existIn(_this.segments, source, start);
      };
      this.getIn = function(source) {
        return getIn(_this.segments, source);
      };
      this.setIn = function(source, value) {
        setIn(_this.segments, source, value);
        return source;
      };
      this.deleteIn = function(source) {
        deleteIn(_this.segments, source);
        return source;
      };
      this.ensureIn = function(source, defaults) {
        var results = _this.getIn(source);
        if (results === void 0) {
          _this.setIn(source, defaults);
          return _this.getIn(source);
        }
        return results;
      };
      var _a2 = parse(input, base), tree = _a2.tree, segments = _a2.segments, entire = _a2.entire, isRegExp3 = _a2.isRegExp, isMatchPattern = _a2.isMatchPattern, isWildMatchPattern = _a2.isWildMatchPattern, haveRelativePattern = _a2.haveRelativePattern, haveExcludePattern = _a2.haveExcludePattern;
      this.entire = entire;
      this.segments = segments;
      this.isMatchPattern = isMatchPattern;
      this.isWildMatchPattern = isWildMatchPattern;
      this.haveRelativePattern = haveRelativePattern;
      this.isRegExp = isRegExp3;
      this.haveExcludePattern = haveExcludePattern;
      this.tree = tree;
      this.matchCache = /* @__PURE__ */ new Map();
      this.includesCache = /* @__PURE__ */ new Map();
    }
    Path2.prototype.toString = function() {
      var _a2;
      return (_a2 = this.entire) === null || _a2 === void 0 ? void 0 : _a2.toString();
    };
    Path2.prototype.toArr = function() {
      var _a2;
      return (_a2 = this.segments) === null || _a2 === void 0 ? void 0 : _a2.slice();
    };
    Object.defineProperty(Path2.prototype, "length", {
      get: function() {
        return this.segments.length;
      },
      enumerable: false,
      configurable: true
    });
    Path2.match = function(pattern) {
      var path = Path2.parse(pattern);
      var matcher = function(target) {
        return path.match(target);
      };
      matcher[isMatcher] = true;
      matcher.path = path;
      return matcher;
    };
    Path2.isPathPattern = function(target) {
      return !!(isStr2(target) || isArr2(target) || isRegExp2(target) || isFn2(target) && target[isMatcher]);
    };
    Path2.transform = function(pattern, regexp, callback) {
      return Path2.parse(pattern).transform(regexp, callback);
    };
    Path2.parse = function(path, base) {
      if (path === void 0) {
        path = "";
      }
      if (path instanceof Path2) {
        var found = pathCache.get(path.entire);
        if (found) {
          return found;
        } else {
          pathCache.set(path.entire, path);
          return path;
        }
      } else if (path && path[isMatcher]) {
        return Path2.parse(path["path"]);
      } else {
        var key_ = base ? Path2.parse(base) : "";
        var key = "".concat(path, ":").concat(key_);
        var found = pathCache.get(key);
        if (found) {
          return found;
        } else {
          path = new Path2(path, base);
          pathCache.set(key, path);
          return path;
        }
      }
    };
    Path2.getIn = function(source, pattern) {
      var path = Path2.parse(pattern);
      return path.getIn(source);
    };
    Path2.setIn = function(source, pattern, value) {
      var path = Path2.parse(pattern);
      return path.setIn(source, value);
    };
    Path2.deleteIn = function(source, pattern) {
      var path = Path2.parse(pattern);
      return path.deleteIn(source);
    };
    Path2.existIn = function(source, pattern, start) {
      var path = Path2.parse(pattern);
      return path.existIn(source, start);
    };
    Path2.ensureIn = function(source, pattern, defaultValue) {
      var path = Path2.parse(pattern);
      return path.ensureIn(source, defaultValue);
    };
    return Path2;
  }()
);

// node_modules/@formily/shared/esm/subscribable.js
var Subscribable = (
  /** @class */
  /* @__PURE__ */ function() {
    function Subscribable2() {
      var _this = this;
      this.subscribers = {
        index: 0
      };
      this.subscribe = function(callback) {
        if (isFn(callback)) {
          var index = _this.subscribers.index + 1;
          _this.subscribers[index] = callback;
          _this.subscribers.index++;
          return index;
        }
      };
      this.unsubscribe = function(index) {
        if (_this.subscribers[index]) {
          delete _this.subscribers[index];
        } else if (!index) {
          _this.subscribers = {
            index: 0
          };
        }
      };
      this.notify = function(payload, silent) {
        if (_this.subscription) {
          if (_this.subscription && isFn(_this.subscription.notify)) {
            if (_this.subscription.notify.call(_this, payload) === false) {
              return;
            }
          }
        }
        if (silent)
          return;
        var filter = function(payload2) {
          if (_this.subscription && isFn(_this.subscription.filter)) {
            return _this.subscription.filter.call(_this, payload2);
          }
          return payload2;
        };
        each(_this.subscribers, function(callback) {
          if (isFn(callback))
            callback(filter(payload));
        });
      };
    }
    return Subscribable2;
  }()
);

// node_modules/@formily/shared/esm/middleware.js
var applyMiddleware = function(payload, fns) {
  if (fns === void 0) {
    fns = [];
  }
  var compose = function(payload2, fns2) {
    var prevPayload = payload2;
    return Promise.resolve(fns2[0](payload2, function(payload3) {
      return compose(payload3 !== null && payload3 !== void 0 ? payload3 : prevPayload, fns2.slice(1));
    }));
  };
  return new Promise(function(resolve, reject) {
    compose(payload, fns.concat(function(payload2) {
      resolve(payload2);
    })).catch(reject);
  });
};

// node_modules/@formily/shared/esm/merge.js
function defaultIsMergeableObject(value) {
  return isNonNullObject(value) && !isSpecial(value);
}
function isNonNullObject(value) {
  return Boolean(value) && typeof value === "object";
}
function isSpecial(value) {
  if ("$$typeof" in value && "_owner" in value) {
    return true;
  }
  if (value._isAMomentObject) {
    return true;
  }
  if (value._isJSONSchemaObject) {
    return true;
  }
  if (isFn(value.toJS)) {
    return true;
  }
  if (isFn(value.toJSON)) {
    return true;
  }
  return !isPlainObj(value);
}
function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options) {
  var _a2;
  if (options.clone !== false && ((_a2 = options.isMergeableObject) === null || _a2 === void 0 ? void 0 : _a2.call(options, value))) {
    return deepmerge(emptyTarget(value), value, options);
  }
  return value;
}
function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function(element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}
function getMergeFunction(key, options) {
  if (!options.customMerge) {
    return deepmerge;
  }
  var customMerge = options.customMerge(key);
  return typeof customMerge === "function" ? customMerge : deepmerge;
}
function getEnumerableOwnPropertySymbols(target) {
  return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
    return target.propertyIsEnumerable(symbol);
  }) : [];
}
function getKeys(target) {
  if (!isValid(target))
    return [];
  return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}
function propertyIsOnObject(object, property) {
  try {
    return property in object;
  } catch (_) {
    return false;
  }
}
function propertyIsUnsafe(target, key) {
  return propertyIsOnObject(target, key) && // Properties are safe to merge if they don't exist in the target yet,
  !(Object.hasOwnProperty.call(target, key) && // unsafe if they exist up the prototype chain,
  Object.propertyIsEnumerable.call(target, key));
}
function mergeObject(target, source, options) {
  var destination = options.assign ? target || {} : {};
  if (!options.isMergeableObject(target))
    return target;
  if (!options.assign) {
    getKeys(target).forEach(function(key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }
  getKeys(source).forEach(function(key) {
    if (propertyIsUnsafe(target, key)) {
      return;
    }
    if (isEmpty(target[key])) {
      destination[key] = source[key];
    } else if (propertyIsOnObject(target, key) && // @ts-ignore
    options.isMergeableObject(source[key])) {
      destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
    } else {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    }
  });
  return destination;
}
function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject;
  options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}
var lazyMerge = function(target) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  var _lazyMerge = function(target2, source) {
    if (!isValid(source))
      return target2;
    if (!isValid(target2))
      return source;
    var isTargetObject = typeof target2 === "object";
    var isSourceObject = typeof source === "object";
    var isTargetFn = typeof target2 === "function";
    var isSourceFn = typeof source === "function";
    if (!isTargetObject && !isTargetFn)
      return source;
    if (!isSourceObject && !isSourceFn)
      return target2;
    var getTarget = function() {
      return isTargetFn ? target2() : target2;
    };
    var getSource = function() {
      return isSourceFn ? source() : source;
    };
    var set = function(_, key, value) {
      var source2 = getSource();
      var target3 = getTarget();
      if (key in source2) {
        source2[key] = value;
      } else if (key in target3) {
        target3[key] = value;
      } else {
        source2[key] = value;
      }
      return true;
    };
    var get = function(_, key) {
      var source2 = getSource();
      if (key in source2) {
        return source2[key];
      }
      return getTarget()[key];
    };
    var ownKeys = function() {
      var source2 = getSource();
      var target3 = getTarget();
      var keys = Object.keys(target3);
      for (var key in source2) {
        if (!(key in target3)) {
          keys.push(key);
        }
      }
      return keys;
    };
    var getOwnPropertyDescriptor = function(_, key) {
      return {
        value: get(_, key),
        enumerable: true,
        configurable: true
      };
    };
    var has2 = function(_, key) {
      if (key in getSource() || key in getTarget())
        return true;
      return false;
    };
    var getPrototypeOf = function() {
      return Object.getPrototypeOf({});
    };
    return new Proxy(/* @__PURE__ */ Object.create(null), {
      set,
      get,
      ownKeys,
      getPrototypeOf,
      getOwnPropertyDescriptor,
      has: has2
    });
  };
  return args.reduce(function(buf, arg) {
    return _lazyMerge(buf, arg);
  }, target);
};
var merge = deepmerge;

// node_modules/@formily/shared/esm/uid.js
var IDX = 36;
var HEX = "";
while (IDX--)
  HEX += IDX.toString(36);
function uid(len) {
  var str = "", num = len || 11;
  while (num--)
    str += HEX[Math.random() * 36 | 0];
  return str;
}

// node_modules/@formily/core/esm/models/LifeCycle.js
var LifeCycle = (
  /** @class */
  /* @__PURE__ */ function() {
    function LifeCycle2() {
      var params = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        params[_i] = arguments[_i];
      }
      var _this = this;
      this.buildListener = function(params2) {
        return function(payload, ctx) {
          var _this2 = this;
          for (var index = 0; index < params2.length; index++) {
            var item = params2[index];
            if (isFn(item)) {
              item.call(this, payload, ctx);
            } else if (isStr(item) && isFn(params2[index + 1])) {
              if (item === payload.type) {
                params2[index + 1].call(this, payload.payload, ctx);
              }
              index++;
            } else {
              each(item, function(handler, type) {
                if (isFn(handler) && isStr(type)) {
                  if (type === payload.type) {
                    handler.call(_this2, payload.payload, ctx);
                    return false;
                  }
                }
              });
            }
          }
        };
      };
      this.notify = function(type, payload, ctx) {
        if (isStr(type)) {
          _this.listener.call(ctx, { type, payload }, ctx);
        }
      };
      this.listener = this.buildListener(params);
    }
    return LifeCycle2;
  }()
);

// node_modules/@formily/core/esm/models/Heart.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Heart = (
  /** @class */
  function(_super) {
    __extends2(Heart2, _super);
    function Heart2(_a2) {
      var _b = _a2 === void 0 ? {} : _a2, lifecycles = _b.lifecycles, context = _b.context;
      var _this = _super.call(this) || this;
      _this.lifecycles = [];
      _this.outerLifecycles = /* @__PURE__ */ new Map();
      _this.buildLifeCycles = function(lifecycles2) {
        return lifecycles2.reduce(function(buf, item) {
          if (item instanceof LifeCycle) {
            return buf.concat(item);
          } else {
            if (isArr(item)) {
              return _this.buildLifeCycles(item);
            } else if (typeof item === "object") {
              _this.context = item;
              return buf;
            }
            return buf;
          }
        }, []);
      };
      _this.addLifeCycles = function(id, lifecycles2) {
        if (lifecycles2 === void 0) {
          lifecycles2 = [];
        }
        var observers = _this.buildLifeCycles(lifecycles2);
        if (observers.length) {
          _this.outerLifecycles.set(id, observers);
        }
      };
      _this.hasLifeCycles = function(id) {
        return _this.outerLifecycles.has(id);
      };
      _this.removeLifeCycles = function(id) {
        _this.outerLifecycles.delete(id);
      };
      _this.setLifeCycles = function(lifecycles2) {
        if (lifecycles2 === void 0) {
          lifecycles2 = [];
        }
        _this.lifecycles = _this.buildLifeCycles(lifecycles2);
      };
      _this.publish = function(type, payload, context2) {
        if (isStr(type)) {
          _this.lifecycles.forEach(function(lifecycle) {
            lifecycle.notify(type, payload, context2 || _this.context);
          });
          _this.outerLifecycles.forEach(function(lifecycles2) {
            lifecycles2.forEach(function(lifecycle) {
              lifecycle.notify(type, payload, context2 || _this.context);
            });
          });
          _this.notify({
            type,
            payload
          });
        }
      };
      _this.clear = function() {
        _this.lifecycles = [];
        _this.outerLifecycles.clear();
        _this.unsubscribe();
      };
      _this.lifecycles = _this.buildLifeCycles(lifecycles || []);
      _this.context = context;
      return _this;
    }
    return Heart2;
  }(Subscribable)
);

// node_modules/@formily/reactive/esm/checkers.js
var toString4 = Object.prototype.toString;
var isMap = function(val) {
  return val && val instanceof Map;
};
var isSet = function(val) {
  return val && val instanceof Set;
};
var isWeakMap = function(val) {
  return val && val instanceof WeakMap;
};
var isWeakSet = function(val) {
  return val && val instanceof WeakSet;
};
var isFn3 = function(val) {
  return typeof val === "function";
};
var isArr3 = Array.isArray;
var isPlainObj3 = function(val) {
  return toString4.call(val) === "[object Object]";
};
var isValid4 = function(val) {
  return val !== null && val !== void 0;
};
var isCollectionType = function(target) {
  return isMap(target) || isWeakMap(target) || isSet(target) || isWeakSet(target);
};
var isNormalType = function(target) {
  return isPlainObj3(target) || isArr3(target);
};

// node_modules/@formily/reactive/esm/array.js
var toArray = function(value) {
  return Array.isArray(value) ? value : value !== void 0 && value !== null ? [value] : [];
};
var ArraySet = (
  /** @class */
  function() {
    function ArraySet2(value) {
      if (value === void 0) {
        value = [];
      }
      this.forEachIndex = 0;
      this.value = value;
    }
    ArraySet2.prototype.add = function(item) {
      if (!this.has(item)) {
        this.value.push(item);
      }
    };
    ArraySet2.prototype.has = function(item) {
      return this.value.indexOf(item) > -1;
    };
    ArraySet2.prototype.delete = function(item) {
      var len = this.value.length;
      if (len === 0)
        return;
      if (len === 1 && this.value[0] === item) {
        this.value = [];
        return;
      }
      var findIndex = this.value.indexOf(item);
      if (findIndex > -1) {
        this.value.splice(findIndex, 1);
        if (findIndex <= this.forEachIndex) {
          this.forEachIndex -= 1;
        }
      }
    };
    ArraySet2.prototype.forEach = function(callback) {
      if (this.value.length === 0)
        return;
      this.forEachIndex = 0;
      for (; this.forEachIndex < this.value.length; this.forEachIndex++) {
        callback(this.value[this.forEachIndex]);
      }
    };
    ArraySet2.prototype.batchDelete = function(callback) {
      if (this.value.length === 0)
        return;
      this.forEachIndex = 0;
      for (; this.forEachIndex < this.value.length; this.forEachIndex++) {
        var value = this.value[this.forEachIndex];
        this.value.splice(this.forEachIndex, 1);
        this.forEachIndex--;
        callback(value);
      }
    };
    ArraySet2.prototype.clear = function() {
      this.value.length = 0;
    };
    return ArraySet2;
  }()
);

// node_modules/@formily/reactive/esm/environment.js
var ProxyRaw = /* @__PURE__ */ new WeakMap();
var RawProxy = /* @__PURE__ */ new WeakMap();
var RawShallowProxy = /* @__PURE__ */ new WeakMap();
var RawNode = /* @__PURE__ */ new WeakMap();
var RawReactionsMap = /* @__PURE__ */ new WeakMap();
var ReactionStack = [];
var BatchCount = { value: 0 };
var UntrackCount = { value: 0 };
var BatchScope = { value: false };
var DependencyCollected = { value: false };
var PendingReactions = new ArraySet();
var PendingScopeReactions = new ArraySet();
var BatchEndpoints = new ArraySet();
var ObserverListeners = new ArraySet();
var MakeObModelSymbol = Symbol("MakeObModelSymbol");
var ObModelSymbol = Symbol("ObModelSymbol");
var ObModelNodeSymbol = Symbol("ObModelNodeSymbol");

// node_modules/@formily/reactive/esm/reaction.js
var ITERATION_KEY = Symbol("iteration key");
var addRawReactionsMap = function(target, key, reaction2) {
  var reactionsMap = RawReactionsMap.get(target);
  if (reactionsMap) {
    var reactions = reactionsMap.get(key);
    if (reactions) {
      reactions.add(reaction2);
    } else {
      reactionsMap.set(key, new ArraySet([reaction2]));
    }
    return reactionsMap;
  } else {
    var reactionsMap_1 = /* @__PURE__ */ new Map([
      [key, new ArraySet([reaction2])]
    ]);
    RawReactionsMap.set(target, reactionsMap_1);
    return reactionsMap_1;
  }
};
var addReactionsMapToReaction = function(reaction2, reactionsMap) {
  var bindSet = reaction2._reactionsSet;
  if (bindSet) {
    bindSet.add(reactionsMap);
  } else {
    reaction2._reactionsSet = new ArraySet([reactionsMap]);
  }
  return bindSet;
};
var getReactionsFromTargetKey = function(target, key) {
  var reactionsMap = RawReactionsMap.get(target);
  var reactions = [];
  if (reactionsMap) {
    var map2 = reactionsMap.get(key);
    if (map2) {
      map2.forEach(function(reaction2) {
        if (reactions.indexOf(reaction2) === -1) {
          reactions.push(reaction2);
        }
      });
    }
  }
  return reactions;
};
var runReactions = function(target, key) {
  var reactions = getReactionsFromTargetKey(target, key);
  var prevUntrackCount = UntrackCount.value;
  UntrackCount.value = 0;
  for (var i = 0, len = reactions.length; i < len; i++) {
    var reaction2 = reactions[i];
    if (reaction2._isComputed) {
      reaction2._scheduler(reaction2);
    } else if (isScopeBatching()) {
      PendingScopeReactions.add(reaction2);
    } else if (isBatching()) {
      PendingReactions.add(reaction2);
    } else {
      if (isFn3(reaction2._scheduler)) {
        reaction2._scheduler(reaction2);
      } else {
        reaction2();
      }
    }
  }
  UntrackCount.value = prevUntrackCount;
};
var notifyObservers = function(operation) {
  ObserverListeners.forEach(function(fn) {
    return fn(operation);
  });
};
var bindTargetKeyWithCurrentReaction = function(operation) {
  var key = operation.key, type = operation.type, target = operation.target;
  if (type === "iterate") {
    key = ITERATION_KEY;
  }
  var reactionLen = ReactionStack.length;
  if (reactionLen === 0)
    return;
  var current = ReactionStack[reactionLen - 1];
  if (isUntracking())
    return;
  if (current) {
    DependencyCollected.value = true;
    addReactionsMapToReaction(current, addRawReactionsMap(target, key, current));
  }
};
var bindComputedReactions = function(reaction2) {
  if (isFn3(reaction2)) {
    var current = ReactionStack[ReactionStack.length - 1];
    if (current) {
      var computes = current._computesSet;
      if (computes) {
        computes.add(reaction2);
      } else {
        current._computesSet = new ArraySet([reaction2]);
      }
    }
  }
};
var runReactionsFromTargetKey = function(operation) {
  var key = operation.key, type = operation.type, target = operation.target, oldTarget = operation.oldTarget;
  batchStart();
  notifyObservers(operation);
  if (type === "clear") {
    oldTarget.forEach(function(_, key2) {
      runReactions(target, key2);
    });
  } else {
    runReactions(target, key);
  }
  if (type === "add" || type === "delete" || type === "clear") {
    var newKey = Array.isArray(target) ? "length" : ITERATION_KEY;
    runReactions(target, newKey);
  }
  batchEnd();
};
var hasRunningReaction = function() {
  return ReactionStack.length > 0;
};
var releaseBindingReactions = function(reaction2) {
  var _a2;
  (_a2 = reaction2._reactionsSet) === null || _a2 === void 0 ? void 0 : _a2.forEach(function(reactionsMap) {
    reactionsMap.forEach(function(reactions) {
      reactions.delete(reaction2);
    });
  });
  PendingReactions.delete(reaction2);
  PendingScopeReactions.delete(reaction2);
  delete reaction2._reactionsSet;
};
var suspendComputedReactions = function(current) {
  var _a2;
  (_a2 = current._computesSet) === null || _a2 === void 0 ? void 0 : _a2.forEach(function(reaction2) {
    var reactions = getReactionsFromTargetKey(reaction2._context, reaction2._property);
    if (reactions.length === 0) {
      disposeBindingReactions(reaction2);
      reaction2._dirty = true;
    }
  });
};
var disposeBindingReactions = function(reaction2) {
  reaction2._disposed = true;
  releaseBindingReactions(reaction2);
  suspendComputedReactions(reaction2);
};
var batchStart = function() {
  BatchCount.value++;
};
var batchEnd = function() {
  BatchCount.value--;
  if (BatchCount.value === 0) {
    var prevUntrackCount = UntrackCount.value;
    UntrackCount.value = 0;
    executePendingReactions();
    executeBatchEndpoints();
    UntrackCount.value = prevUntrackCount;
  }
};
var batchScopeStart = function() {
  BatchScope.value = true;
};
var batchScopeEnd = function() {
  var prevUntrackCount = UntrackCount.value;
  BatchScope.value = false;
  UntrackCount.value = 0;
  PendingScopeReactions.batchDelete(function(reaction2) {
    if (isFn3(reaction2._scheduler)) {
      reaction2._scheduler(reaction2);
    } else {
      reaction2();
    }
  });
  UntrackCount.value = prevUntrackCount;
};
var untrackStart = function() {
  UntrackCount.value++;
};
var untrackEnd = function() {
  UntrackCount.value--;
};
var isBatching = function() {
  return BatchCount.value > 0;
};
var isScopeBatching = function() {
  return BatchScope.value;
};
var isUntracking = function() {
  return UntrackCount.value > 0;
};
var executePendingReactions = function() {
  PendingReactions.batchDelete(function(reaction2) {
    if (isFn3(reaction2._scheduler)) {
      reaction2._scheduler(reaction2);
    } else {
      reaction2();
    }
  });
};
var executeBatchEndpoints = function() {
  BatchEndpoints.batchDelete(function(callback) {
    callback();
  });
};
var hasDepsChange = function(newDeps, oldDeps) {
  if (newDeps === oldDeps)
    return false;
  if (newDeps.length !== oldDeps.length)
    return true;
  if (newDeps.some(function(value, index) {
    return value !== oldDeps[index];
  }))
    return true;
  return false;
};
var disposeEffects = function(reaction2) {
  if (reaction2._effects) {
    try {
      batchStart();
      reaction2._effects.queue.forEach(function(item) {
        if (!item || !item.dispose)
          return;
        item.dispose();
      });
    } finally {
      batchEnd();
    }
  }
};

// node_modules/@formily/reactive/esm/tree.js
var DataChange = (
  /** @class */
  function() {
    function DataChange2(operation, node) {
      this.node = node;
      this.key = operation.key;
      this.type = operation.type;
      this.object = operation.target;
      this.value = operation.value;
      this.oldValue = operation.oldValue;
    }
    Object.defineProperty(DataChange2.prototype, "path", {
      get: function() {
        return this.node.path.concat(this.key);
      },
      enumerable: false,
      configurable: true
    });
    return DataChange2;
  }()
);
var DataNode = (
  /** @class */
  function() {
    function DataNode2(target, key, value) {
      this.target = target;
      this.key = key;
      this.value = value;
    }
    Object.defineProperty(DataNode2.prototype, "path", {
      get: function() {
        if (!this.parent)
          return this.key ? [this.key] : [];
        return this.parent.path.concat(this.key);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DataNode2.prototype, "targetRaw", {
      get: function() {
        return raw(this.target);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(DataNode2.prototype, "parent", {
      get: function() {
        if (!this.target)
          return;
        return getDataNode(this.targetRaw);
      },
      enumerable: false,
      configurable: true
    });
    DataNode2.prototype.isEqual = function(node) {
      if (this.key) {
        return node.targetRaw === this.targetRaw && node.key === this.key;
      }
      return node.value === this.value;
    };
    DataNode2.prototype.contains = function(node) {
      if (node === this)
        return true;
      var parent = node.parent;
      while (!!parent) {
        if (this.isEqual(parent))
          return true;
        parent = parent.parent;
      }
      return false;
    };
    return DataNode2;
  }()
);
var getDataNode = function(raw2) {
  if (raw2 === null || raw2 === void 0 ? void 0 : raw2[ObModelNodeSymbol]) {
    return raw2[ObModelNodeSymbol];
  }
  return RawNode.get(raw2);
};
var setDataNode = function(raw2, node) {
  if (raw2 === null || raw2 === void 0 ? void 0 : raw2[ObModelSymbol]) {
    raw2[ObModelNodeSymbol] = node;
    return;
  }
  RawNode.set(raw2, node);
};
var buildDataTree = function(target, key, value) {
  var raw2 = raw(value);
  var currentNode = getDataNode(raw2);
  if (currentNode)
    return currentNode;
  setDataNode(raw2, new DataNode(target, key, value));
};

// node_modules/@formily/reactive/esm/externals.js
var RAW_TYPE = Symbol("RAW_TYPE");
var OBSERVABLE_TYPE = Symbol("OBSERVABLE_TYPE");
var hasOwnProperty2 = Object.prototype.hasOwnProperty;
var isObservable = function(target) {
  return ProxyRaw.has(target) || !!(target === null || target === void 0 ? void 0 : target[ObModelSymbol]);
};
var isAnnotation = function(target) {
  return target && !!target[MakeObModelSymbol];
};
var isSupportObservable = function(target) {
  if (!isValid4(target))
    return false;
  if (isArr3(target))
    return true;
  if (isPlainObj3(target)) {
    if (target[RAW_TYPE]) {
      return false;
    }
    if (target[OBSERVABLE_TYPE]) {
      return true;
    }
    if ("$$typeof" in target && "_owner" in target) {
      return false;
    }
    if (target["_isAMomentObject"]) {
      return false;
    }
    if (target["_isJSONSchemaObject"]) {
      return false;
    }
    if (isFn3(target["toJS"])) {
      return false;
    }
    if (isFn3(target["toJSON"])) {
      return false;
    }
    return true;
  }
  if (isMap(target) || isWeakMap(target) || isSet(target) || isWeakSet(target))
    return true;
  return false;
};
var markRaw = function(target) {
  if (!target)
    return;
  if (isFn3(target)) {
    target.prototype[RAW_TYPE] = true;
  } else {
    target[RAW_TYPE] = true;
  }
  return target;
};
var raw = function(target) {
  if (target === null || target === void 0 ? void 0 : target[ObModelSymbol])
    return target[ObModelSymbol];
  return ProxyRaw.get(target) || target;
};
var toJS = function(values) {
  var visited = /* @__PURE__ */ new WeakSet();
  var _toJS = function(values2) {
    if (visited.has(values2)) {
      return values2;
    }
    if (values2 && values2[RAW_TYPE])
      return values2;
    if (isArr3(values2)) {
      if (isObservable(values2)) {
        visited.add(values2);
        var res_1 = [];
        values2.forEach(function(item) {
          res_1.push(_toJS(item));
        });
        visited.delete(values2);
        return res_1;
      }
    } else if (isPlainObj3(values2)) {
      if (isObservable(values2)) {
        visited.add(values2);
        var res = {};
        for (var key in values2) {
          if (hasOwnProperty2.call(values2, key)) {
            res[key] = _toJS(values2[key]);
          }
        }
        visited.delete(values2);
        return res;
      }
    }
    return values2;
  };
  return _toJS(values);
};
var contains = function(target, property) {
  var targetRaw = raw(target);
  var propertyRaw = raw(property);
  if (targetRaw === propertyRaw)
    return true;
  var targetNode = getDataNode(targetRaw);
  var propertyNode = getDataNode(propertyRaw);
  if (!targetNode)
    return false;
  if (!propertyNode)
    return false;
  return targetNode.contains(propertyNode);
};
var hasCollected = function(callback) {
  DependencyCollected.value = false;
  callback === null || callback === void 0 ? void 0 : callback();
  return DependencyCollected.value;
};

// node_modules/@formily/reactive/esm/handlers.js
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var _a;
var wellKnownSymbols = new Set(Object.getOwnPropertyNames(Symbol).reduce(function(buf, key) {
  if (key === "arguments" || key === "caller")
    return buf;
  var value = Symbol[key];
  if (typeof value === "symbol")
    return buf.concat(value);
  return buf;
}, []));
var hasOwnProperty3 = Object.prototype.hasOwnProperty;
function findObservable(target, key, value) {
  var observableObj = RawProxy.get(value);
  if (observableObj) {
    return observableObj;
  }
  if (!isObservable(value) && isSupportObservable(value)) {
    return createObservable(target, key, value);
  }
  return value;
}
function patchIterator(target, key, iterator, isEntries) {
  var originalNext = iterator.next;
  iterator.next = function() {
    var _a2 = originalNext.call(iterator), done = _a2.done, value = _a2.value;
    if (!done) {
      if (isEntries) {
        value[1] = findObservable(target, key, value[1]);
      } else {
        value = findObservable(target, key, value);
      }
    }
    return { done, value };
  };
  return iterator;
}
var instrumentations = (_a = {
  has: function(key) {
    var target = ProxyRaw.get(this);
    var proto = Reflect.getPrototypeOf(this);
    bindTargetKeyWithCurrentReaction({ target, key, type: "has" });
    return proto.has.apply(target, arguments);
  },
  get: function(key) {
    var target = ProxyRaw.get(this);
    var proto = Reflect.getPrototypeOf(this);
    bindTargetKeyWithCurrentReaction({ target, key, type: "get" });
    return findObservable(target, key, proto.get.apply(target, arguments));
  },
  add: function(key) {
    var target = ProxyRaw.get(this);
    var proto = Reflect.getPrototypeOf(this);
    var hadKey = proto.has.call(target, key);
    var result = proto.add.apply(target, arguments);
    if (!hadKey) {
      runReactionsFromTargetKey({ target, key, value: key, type: "add" });
    }
    return result;
  },
  set: function(key, value) {
    var target = ProxyRaw.get(this);
    var proto = Reflect.getPrototypeOf(this);
    var hadKey = proto.has.call(target, key);
    var oldValue = proto.get.call(target, key);
    var result = proto.set.apply(target, arguments);
    if (!hadKey) {
      runReactionsFromTargetKey({ target, key, value, type: "add" });
    } else if (value !== oldValue) {
      runReactionsFromTargetKey({ target, key, value, oldValue, type: "set" });
    }
    return result;
  },
  delete: function(key) {
    var target = ProxyRaw.get(this);
    var proto = Reflect.getPrototypeOf(this);
    var hadKey = proto.has.call(target, key);
    var oldValue = proto.get ? proto.get.call(target, key) : void 0;
    var result = proto.delete.apply(target, arguments);
    if (hadKey) {
      runReactionsFromTargetKey({ target, key, oldValue, type: "delete" });
    }
    return result;
  },
  clear: function() {
    var target = ProxyRaw.get(this);
    var proto = Reflect.getPrototypeOf(this);
    var hadItems = target.size !== 0;
    var oldTarget = target instanceof Map ? new Map(target) : new Set(target);
    var result = proto.clear.apply(target, arguments);
    if (hadItems) {
      runReactionsFromTargetKey({ target, oldTarget, type: "clear" });
    }
    return result;
  },
  forEach: function(cb) {
    var _a2;
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    var target = ProxyRaw.get(this);
    var proto = Reflect.getPrototypeOf(this);
    bindTargetKeyWithCurrentReaction({ target, type: "iterate" });
    var wrappedCb = function(value, key) {
      var args2 = [];
      for (var _i2 = 2; _i2 < arguments.length; _i2++) {
        args2[_i2 - 2] = arguments[_i2];
      }
      return cb.apply(void 0, __spreadArray2([findObservable(target, key, value), key], __read2(args2), false));
    };
    return (_a2 = proto.forEach).call.apply(_a2, __spreadArray2([target, wrappedCb], __read2(args), false));
  },
  keys: function() {
    var target = ProxyRaw.get(this);
    var proto = Reflect.getPrototypeOf(this);
    bindTargetKeyWithCurrentReaction({ target, type: "iterate" });
    return proto.keys.apply(target, arguments);
  },
  values: function() {
    var target = ProxyRaw.get(this);
    var proto = Reflect.getPrototypeOf(this);
    bindTargetKeyWithCurrentReaction({ target, type: "iterate" });
    var iterator = proto.values.apply(target, arguments);
    return patchIterator(target, "", iterator, false);
  },
  entries: function() {
    var target = ProxyRaw.get(this);
    var proto = Reflect.getPrototypeOf(this);
    bindTargetKeyWithCurrentReaction({ target, type: "iterate" });
    var iterator = proto.entries.apply(target, arguments);
    return patchIterator(target, "", iterator, true);
  }
}, _a[Symbol.iterator] = function() {
  var target = ProxyRaw.get(this);
  var proto = Reflect.getPrototypeOf(this);
  bindTargetKeyWithCurrentReaction({ target, type: "iterate" });
  var iterator = proto[Symbol.iterator].apply(target, arguments);
  return patchIterator(target, "", iterator, target instanceof Map);
}, Object.defineProperty(_a, "size", {
  get: function() {
    var target = ProxyRaw.get(this);
    var proto = Reflect.getPrototypeOf(this);
    bindTargetKeyWithCurrentReaction({ target, type: "iterate" });
    return Reflect.get(proto, "size", target);
  },
  enumerable: false,
  configurable: true
}), _a);
var collectionHandlers = {
  get: function(target, key, receiver) {
    target = hasOwnProperty3.call(instrumentations, key) ? instrumentations : target;
    return Reflect.get(target, key, receiver);
  }
};
var baseHandlers = {
  get: function(target, key, receiver) {
    if (!key)
      return;
    var result = target[key];
    if (typeof key === "symbol" && wellKnownSymbols.has(key)) {
      return result;
    }
    bindTargetKeyWithCurrentReaction({ target, key, receiver, type: "get" });
    var observableResult = RawProxy.get(result);
    if (observableResult) {
      return observableResult;
    }
    if (!isObservable(result) && isSupportObservable(result)) {
      var descriptor = Reflect.getOwnPropertyDescriptor(target, key);
      if (!descriptor || !(descriptor.writable === false && descriptor.configurable === false)) {
        return createObservable(target, key, result);
      }
    }
    return result;
  },
  has: function(target, key) {
    var result = Reflect.has(target, key);
    bindTargetKeyWithCurrentReaction({ target, key, type: "has" });
    return result;
  },
  ownKeys: function(target) {
    var keys = Reflect.ownKeys(target);
    bindTargetKeyWithCurrentReaction({ target, type: "iterate" });
    return keys;
  },
  set: function(target, key, value, receiver) {
    if (key === "__proto__") {
      target[key] = value;
      return true;
    }
    var hadKey = hasOwnProperty3.call(target, key);
    var newValue = createObservable(target, key, value);
    var oldValue = target[key];
    target[key] = newValue;
    if (!hadKey) {
      runReactionsFromTargetKey({
        target,
        key,
        value: newValue,
        oldValue,
        receiver,
        type: "add"
      });
    } else if (value !== oldValue) {
      runReactionsFromTargetKey({
        target,
        key,
        value: newValue,
        oldValue,
        receiver,
        type: "set"
      });
    }
    return true;
  },
  deleteProperty: function(target, key) {
    var oldValue = target[key];
    delete target[key];
    runReactionsFromTargetKey({
      target,
      key,
      oldValue,
      type: "delete"
    });
    return true;
  }
};

// node_modules/@formily/reactive/esm/internals.js
var createNormalProxy = function(target, shallow2) {
  var proxy = new Proxy(target, baseHandlers);
  ProxyRaw.set(proxy, target);
  if (shallow2) {
    RawShallowProxy.set(target, proxy);
  } else {
    RawProxy.set(target, proxy);
  }
  return proxy;
};
var createCollectionProxy = function(target, shallow2) {
  var proxy = new Proxy(target, collectionHandlers);
  ProxyRaw.set(proxy, target);
  if (shallow2) {
    RawShallowProxy.set(target, proxy);
  } else {
    RawProxy.set(target, proxy);
  }
  return proxy;
};
var createShallowProxy = function(target) {
  if (isNormalType(target))
    return createNormalProxy(target, true);
  if (isCollectionType(target))
    return createCollectionProxy(target, true);
  return target;
};
var createObservable = function(target, key, value, shallow2) {
  if (typeof value !== "object")
    return value;
  var raw2 = ProxyRaw.get(value);
  if (!!raw2) {
    var node = getDataNode(raw2);
    if (!node.target)
      node.target = target;
    node.key = key;
    return value;
  }
  if (!isSupportObservable(value))
    return value;
  if (target) {
    var parentRaw = ProxyRaw.get(target) || target;
    var isShallowParent = RawShallowProxy.get(parentRaw);
    if (isShallowParent)
      return value;
  }
  buildDataTree(target, key, value);
  if (shallow2)
    return createShallowProxy(value);
  if (isNormalType(value))
    return createNormalProxy(value);
  if (isCollectionType(value))
    return createCollectionProxy(value);
  return value;
};
var createAnnotation = function(maker) {
  var annotation = function(target) {
    return maker({ value: target });
  };
  if (isFn3(maker)) {
    annotation[MakeObModelSymbol] = maker;
  }
  return annotation;
};
var getObservableMaker = function(target) {
  if (target[MakeObModelSymbol]) {
    if (!target[MakeObModelSymbol][MakeObModelSymbol]) {
      return target[MakeObModelSymbol];
    }
    return getObservableMaker(target[MakeObModelSymbol]);
  }
};
var createBoundaryFunction = function(start, end) {
  function boundary(fn) {
    var results;
    try {
      start();
      if (isFn3(fn)) {
        results = fn();
      }
    } finally {
      end();
    }
    return results;
  }
  boundary.bound = createBindFunction(boundary);
  return boundary;
};
var createBindFunction = function(boundary) {
  function bind(callback, context) {
    return function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return boundary(function() {
        return callback.apply(context, args);
      });
    };
  }
  return bind;
};
var createBoundaryAnnotation = function(start, end) {
  var boundary = createBoundaryFunction(start, end);
  var annotation = createAnnotation(function(_a2) {
    var target = _a2.target, key = _a2.key;
    target[key] = boundary.bound(target[key], target);
    return target;
  });
  boundary[MakeObModelSymbol] = annotation;
  boundary.bound[MakeObModelSymbol] = annotation;
  return boundary;
};

// node_modules/@formily/reactive/esm/batch.js
var batch = createBoundaryAnnotation(batchStart, batchEnd);
batch.scope = createBoundaryAnnotation(batchScopeStart, batchScopeEnd);
batch.endpoint = function(callback) {
  if (!isFn3(callback))
    return;
  if (BatchCount.value === 0) {
    callback();
  } else {
    BatchEndpoints.add(callback);
  }
};

// node_modules/@formily/reactive/esm/action.js
var action = createBoundaryAnnotation(function() {
  batchStart();
  untrackStart();
}, function() {
  untrackEnd();
  batchEnd();
});
action.scope = createBoundaryAnnotation(function() {
  batchScopeStart();
  untrackStart();
}, function() {
  untrackEnd();
  batchScopeEnd();
});

// node_modules/@formily/reactive/esm/untracked.js
var untracked = createBoundaryFunction(untrackStart, untrackEnd);

// node_modules/@formily/reactive/esm/annotations/observable.js
var observable = createAnnotation(function(_a2) {
  var target = _a2.target, key = _a2.key, value = _a2.value;
  var store = {
    value: createObservable(target, key, target ? target[key] : value)
  };
  function get() {
    bindTargetKeyWithCurrentReaction({
      target,
      key,
      type: "get"
    });
    return store.value;
  }
  function set(value2) {
    var oldValue = store.value;
    value2 = createObservable(target, key, value2);
    store.value = value2;
    if (oldValue === value2)
      return;
    runReactionsFromTargetKey({
      target,
      key,
      type: "set",
      oldValue,
      value: value2
    });
  }
  if (target) {
    Object.defineProperty(target, key, {
      set,
      get,
      enumerable: true,
      configurable: false
    });
    return target;
  }
  return store.value;
});

// node_modules/@formily/reactive/esm/annotations/box.js
var box = createAnnotation(function(_a2) {
  var target = _a2.target, key = _a2.key, value = _a2.value;
  var store = {
    value: target ? target[key] : value
  };
  var proxy = {
    set,
    get
  };
  ProxyRaw.set(proxy, store);
  RawProxy.set(store, proxy);
  buildDataTree(target, key, store);
  function get() {
    bindTargetKeyWithCurrentReaction({
      target: store,
      key,
      type: "get"
    });
    return store.value;
  }
  function set(value2) {
    var oldValue = store.value;
    store.value = value2;
    if (oldValue !== value2) {
      runReactionsFromTargetKey({
        target: store,
        key,
        type: "set",
        oldValue,
        value: value2
      });
    }
  }
  if (target) {
    Object.defineProperty(target, key, {
      value: proxy,
      enumerable: true,
      configurable: false,
      writable: false
    });
    return target;
  }
  return proxy;
});

// node_modules/@formily/reactive/esm/annotations/ref.js
var ref = createAnnotation(function(_a2) {
  var target = _a2.target, key = _a2.key, value = _a2.value;
  var store = {
    value: target ? target[key] : value
  };
  var proxy = {};
  var context = target ? target : store;
  var property = target ? key : "value";
  function get() {
    bindTargetKeyWithCurrentReaction({
      target: context,
      key: property,
      type: "get"
    });
    return store.value;
  }
  function set(value2) {
    var oldValue = store.value;
    store.value = value2;
    if (oldValue !== value2) {
      runReactionsFromTargetKey({
        target: context,
        key: property,
        type: "set",
        oldValue,
        value: value2
      });
    }
  }
  if (target) {
    Object.defineProperty(target, key, {
      get,
      set,
      enumerable: true
    });
    return target;
  } else {
    Object.defineProperty(proxy, "value", {
      set,
      get
    });
    buildDataTree(target, key, store);
    proxy[ObModelSymbol] = store;
  }
  return proxy;
});

// node_modules/@formily/reactive/esm/annotations/shallow.js
var shallow = createAnnotation(function(_a2) {
  var target = _a2.target, key = _a2.key, value = _a2.value;
  var store = {
    value: createObservable(target, key, target ? target[key] : value, true)
  };
  function get() {
    bindTargetKeyWithCurrentReaction({
      target,
      key,
      type: "get"
    });
    return store.value;
  }
  function set(value2) {
    var oldValue = store.value;
    value2 = createObservable(target, key, value2, true);
    store.value = value2;
    if (oldValue === value2)
      return;
    runReactionsFromTargetKey({
      target,
      key,
      type: "set",
      oldValue,
      value: value2
    });
  }
  if (target) {
    Object.defineProperty(target, key, {
      set,
      get,
      enumerable: true,
      configurable: false
    });
    return target;
  }
  return store.value;
});

// node_modules/@formily/reactive/esm/annotations/computed.js
var getDescriptor = Object.getOwnPropertyDescriptor;
var getProto = Object.getPrototypeOf;
var ClassDescriptorSymbol = Symbol("ClassDescriptorSymbol");
function getPropertyDescriptor(obj, key) {
  if (!obj)
    return;
  return getDescriptor(obj, key) || getPropertyDescriptor(getProto(obj), key);
}
function getPropertyDescriptorCache(obj, key) {
  var constructor = obj.constructor;
  if (constructor === Object || constructor === Array)
    return getPropertyDescriptor(obj, key);
  var cache = constructor[ClassDescriptorSymbol] || {};
  var descriptor = cache[key];
  if (descriptor)
    return descriptor;
  var newDesc = getPropertyDescriptor(obj, key);
  constructor[ClassDescriptorSymbol] = cache;
  cache[key] = newDesc;
  return newDesc;
}
function getPrototypeDescriptor(target, key, value) {
  if (!target) {
    if (value) {
      if (isFn3(value)) {
        return { get: value };
      } else {
        return value;
      }
    }
    return {};
  }
  var descriptor = getPropertyDescriptorCache(target, key);
  if (descriptor) {
    return descriptor;
  }
  return {};
}
var computed = createAnnotation(function(_a2) {
  var target = _a2.target, key = _a2.key, value = _a2.value;
  var store = {};
  var proxy = {};
  var context = target ? target : store;
  var property = target ? key : "value";
  var descriptor = getPrototypeDescriptor(target, property, value);
  function compute() {
    var _a3;
    store.value = (_a3 = descriptor.get) === null || _a3 === void 0 ? void 0 : _a3.call(context);
  }
  function reaction2() {
    if (ReactionStack.indexOf(reaction2) === -1) {
      releaseBindingReactions(reaction2);
      try {
        ReactionStack.push(reaction2);
        compute();
      } finally {
        ReactionStack.pop();
      }
    }
  }
  reaction2._name = "ComputedReaction";
  reaction2._scheduler = function() {
    reaction2._dirty = true;
    runReactionsFromTargetKey({
      target: context,
      key: property,
      value: store.value,
      type: "set"
    });
  };
  reaction2._isComputed = true;
  reaction2._dirty = true;
  reaction2._context = context;
  reaction2._property = property;
  function get() {
    if (hasRunningReaction()) {
      bindComputedReactions(reaction2);
    }
    if (!isUntracking()) {
      if (reaction2._dirty) {
        reaction2();
        reaction2._dirty = false;
      }
    } else {
      compute();
    }
    bindTargetKeyWithCurrentReaction({
      target: context,
      key: property,
      type: "get"
    });
    return store.value;
  }
  function set(value2) {
    var _a3;
    try {
      batchStart();
      (_a3 = descriptor.set) === null || _a3 === void 0 ? void 0 : _a3.call(context, value2);
    } finally {
      batchEnd();
    }
  }
  if (target) {
    Object.defineProperty(target, key, {
      get,
      set,
      enumerable: true
    });
    return target;
  } else {
    Object.defineProperty(proxy, "value", {
      set,
      get
    });
    buildDataTree(target, key, store);
    proxy[ObModelSymbol] = store;
  }
  return proxy;
});

// node_modules/@formily/reactive/esm/observable.js
function observable2(target) {
  return createObservable(null, null, target);
}
observable2.box = box;
observable2.ref = ref;
observable2.deep = observable;
observable2.shallow = shallow;
observable2.computed = computed;
observable2[MakeObModelSymbol] = observable;

// node_modules/@formily/reactive/esm/model.js
function define(target, annotations) {
  if (isObservable(target))
    return target;
  if (!isSupportObservable(target))
    return target;
  target[ObModelSymbol] = target;
  buildDataTree(void 0, void 0, target);
  for (var key in annotations) {
    var annotation = annotations[key];
    if (isAnnotation(annotation)) {
      getObservableMaker(annotation)({
        target,
        key
      });
    }
  }
  return target;
}
function model(target) {
  var annotations = Object.keys(target || {}).reduce(function(buf, key) {
    var descriptor = Object.getOwnPropertyDescriptor(target, key);
    if (descriptor && descriptor.get) {
      buf[key] = observable2.computed;
    } else if (isFn3(target[key])) {
      buf[key] = action;
    } else {
      buf[key] = observable2;
    }
    return buf;
  }, {});
  return define(target, annotations);
}

// node_modules/@formily/reactive/esm/autorun.js
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
var autorun = function(tracker, name) {
  if (name === void 0) {
    name = "AutoRun";
  }
  var reaction2 = function() {
    if (!isFn3(tracker))
      return;
    if (reaction2._boundary > 0)
      return;
    if (ReactionStack.indexOf(reaction2) === -1) {
      releaseBindingReactions(reaction2);
      try {
        batchStart();
        ReactionStack.push(reaction2);
        tracker();
      } finally {
        ReactionStack.pop();
        reaction2._boundary++;
        batchEnd();
        reaction2._boundary = 0;
        reaction2._memos.cursor = 0;
        reaction2._effects.cursor = 0;
      }
    }
  };
  var cleanRefs = function() {
    reaction2._memos = {
      queue: [],
      cursor: 0
    };
    reaction2._effects = {
      queue: [],
      cursor: 0
    };
  };
  reaction2._boundary = 0;
  reaction2._name = name;
  cleanRefs();
  reaction2();
  return function() {
    disposeBindingReactions(reaction2);
    disposeEffects(reaction2);
    cleanRefs();
  };
};
autorun.memo = function(callback, dependencies) {
  if (!isFn3(callback))
    return;
  var current = ReactionStack[ReactionStack.length - 1];
  if (!current || !current._memos)
    throw new Error("autorun.memo must used in autorun function body.");
  var deps = toArray(dependencies || []);
  var id = current._memos.cursor++;
  var old = current._memos.queue[id];
  if (!old || hasDepsChange(deps, old.deps)) {
    var value = callback();
    current._memos.queue[id] = {
      value,
      deps
    };
    return value;
  }
  return old.value;
};
autorun.effect = function(callback, dependencies) {
  if (!isFn3(callback))
    return;
  var current = ReactionStack[ReactionStack.length - 1];
  if (!current || !current._effects)
    throw new Error("autorun.effect must used in autorun function body.");
  var effects = current._effects;
  var deps = toArray(dependencies || [{}]);
  var id = effects.cursor++;
  var old = effects.queue[id];
  if (!old || hasDepsChange(deps, old.deps)) {
    Promise.resolve(0).then(function() {
      if (current._disposed)
        return;
      var dispose = callback();
      if (isFn3(dispose)) {
        effects.queue[id].dispose = dispose;
      }
    });
    effects.queue[id] = {
      deps
    };
  }
};
var reaction = function(tracker, subscriber, options) {
  var realOptions = __assign4({ name: "Reaction" }, options);
  var value = {};
  var dirtyCheck = function() {
    if (isFn3(realOptions.equals))
      return !realOptions.equals(value.oldValue, value.currentValue);
    return value.oldValue !== value.currentValue;
  };
  var fireAction = function() {
    try {
      batchStart();
      if (isFn3(subscriber))
        subscriber(value.currentValue, value.oldValue);
    } finally {
      batchEnd();
    }
  };
  var reaction2 = function() {
    if (ReactionStack.indexOf(reaction2) === -1) {
      releaseBindingReactions(reaction2);
      try {
        ReactionStack.push(reaction2);
        value.currentValue = tracker();
      } finally {
        ReactionStack.pop();
      }
    }
  };
  reaction2._scheduler = function(looping) {
    looping();
    if (dirtyCheck())
      fireAction();
    value.oldValue = value.currentValue;
  };
  reaction2._name = realOptions.name;
  reaction2();
  value.oldValue = value.currentValue;
  if (realOptions.fireImmediately) {
    fireAction();
  }
  return function() {
    disposeBindingReactions(reaction2);
  };
};

// node_modules/@formily/reactive/esm/tracker.js
var Tracker = (
  /** @class */
  /* @__PURE__ */ function() {
    function Tracker2(scheduler, name) {
      if (name === void 0) {
        name = "TrackerReaction";
      }
      var _this = this;
      this.track = function(tracker) {
        if (!isFn3(tracker))
          return _this.results;
        if (_this.track._boundary > 0)
          return;
        if (ReactionStack.indexOf(_this.track) === -1) {
          releaseBindingReactions(_this.track);
          try {
            batchStart();
            ReactionStack.push(_this.track);
            _this.results = tracker();
          } finally {
            ReactionStack.pop();
            _this.track._boundary++;
            batchEnd();
            _this.track._boundary = 0;
          }
        }
        return _this.results;
      };
      this.dispose = function() {
        disposeBindingReactions(_this.track);
      };
      this.track._scheduler = function(callback) {
        if (_this.track._boundary === 0)
          _this.dispose();
        if (isFn3(callback))
          scheduler(callback);
      };
      this.track._name = name;
      this.track._boundary = 0;
    }
    return Tracker2;
  }()
);

// node_modules/@formily/reactive/esm/observe.js
var observe = function(target, observer, deep) {
  if (deep === void 0) {
    deep = true;
  }
  var addListener = function(target2) {
    var raw2 = raw(target2);
    var node = getDataNode(raw2);
    var listener = function(operation) {
      var targetRaw = raw(operation.target);
      var targetNode = getDataNode(targetRaw);
      if (deep) {
        if (node.contains(targetNode)) {
          observer(new DataChange(operation, targetNode));
          return;
        }
      }
      if (node === targetNode || node.targetRaw === targetRaw && node.key === operation.key) {
        observer(new DataChange(operation, targetNode));
      }
    };
    if (node && isFn3(observer)) {
      ObserverListeners.add(listener);
    }
    return function() {
      ObserverListeners.delete(listener);
    };
  };
  if (target && typeof target !== "object")
    throw Error("Can not observe ".concat(typeof target, " type."));
  return addListener(target);
};

// node_modules/@formily/core/esm/shared/checkers.js
var isForm = function(node) {
  return node instanceof Form;
};
var isGeneralField = function(node) {
  return node instanceof Field || node instanceof VoidField;
};
var isField = function(node) {
  return node instanceof Field;
};
var isArrayField = function(node) {
  return node instanceof ArrayField;
};
var isObjectField = function(node) {
  return node instanceof ObjectField;
};
var isVoidField = function(node) {
  return node instanceof VoidField;
};
var isFormState = function(state) {
  if (isFn(state === null || state === void 0 ? void 0 : state.initialize))
    return false;
  return (state === null || state === void 0 ? void 0 : state.displayName) === "Form";
};
var isFieldState = function(state) {
  if (isFn(state === null || state === void 0 ? void 0 : state.initialize))
    return false;
  return (state === null || state === void 0 ? void 0 : state.displayName) === "Field";
};
var isGeneralFieldState = function(node) {
  var _a2;
  if (isFn(node === null || node === void 0 ? void 0 : node.initialize))
    return false;
  return ((_a2 = node === null || node === void 0 ? void 0 : node.displayName) === null || _a2 === void 0 ? void 0 : _a2.indexOf("Field")) > -1;
};
var isArrayFieldState = function(state) {
  if (isFn(state === null || state === void 0 ? void 0 : state.initialize))
    return false;
  return (state === null || state === void 0 ? void 0 : state.displayName) === "ArrayField";
};
var isDataField = function(node) {
  return isField(node) || isArrayField(node) || isObjectField(node);
};
var isDataFieldState = function(node) {
  return isFieldState(node) || isObjectFieldState(node) || isArrayFieldState(node);
};
var isObjectFieldState = function(state) {
  if (isFn(state === null || state === void 0 ? void 0 : state.initialize))
    return false;
  return (state === null || state === void 0 ? void 0 : state.displayName) === "ObjectField";
};
var isVoidFieldState = function(state) {
  if (isFn(state === null || state === void 0 ? void 0 : state.initialize))
    return false;
  return (state === null || state === void 0 ? void 0 : state.displayName) === "VoidField";
};
var isQuery = function(query) {
  return query && query instanceof Query;
};

// node_modules/@formily/core/esm/models/Graph.js
var Graph = (
  /** @class */
  /* @__PURE__ */ function() {
    function Graph2(form) {
      var _this = this;
      this.getGraph = function() {
        var graph = {};
        graph[""] = _this.form.getState();
        each(_this.form.fields, function(field, identifier) {
          graph[identifier] = field.getState();
        });
        return graph;
      };
      this.setGraph = function(graph) {
        var form2 = _this.form;
        var createField = function(identifier, state) {
          var address = Path.parse(identifier);
          var name = address.segments[address.segments.length - 1];
          var basePath = address.parent();
          if (isFieldState(state)) {
            return _this.form.createField({ name, basePath });
          } else if (isArrayFieldState(state)) {
            return _this.form.createArrayField({ name, basePath });
          } else if (isObjectFieldState(state)) {
            return _this.form.createObjectField({ name, basePath });
          } else {
            return _this.form.createVoidField({ name, basePath });
          }
        };
        each(graph, function(state, address) {
          if (isFormState(state)) {
            form2.setState(state);
          } else {
            var field = form2.fields[address];
            if (field) {
              field.setState(state);
            } else {
              createField(address, state).setState(state);
            }
          }
        });
      };
      this.form = form;
      define(this, {
        setGraph: batch
      });
    }
    return Graph2;
  }()
);

// node_modules/@formily/validator/esm/types.js
var isValidateResult = function(obj) {
  return !!obj["type"] && !!obj["message"];
};

// node_modules/@formily/validator/esm/registry.js
var getIn2 = Path.getIn;
var self2 = globalThisPolyfill;
var defaultLanguage = "en";
var getBrowserlanguage = function() {
  if (!self2.navigator) {
    return defaultLanguage;
  }
  return self2.navigator.browserlanguage || self2.navigator.language || defaultLanguage;
};
var registry = {
  locales: {
    messages: {},
    language: getBrowserlanguage()
  },
  formats: {},
  rules: {},
  template: null
};
var getISOCode = function(language) {
  var isoCode = registry.locales.language;
  if (registry.locales.messages[language]) {
    return language;
  }
  var lang = lowerCase(language);
  each(registry.locales.messages, function(messages, key) {
    var target = lowerCase(key);
    if (target.indexOf(lang) > -1 || lang.indexOf(target) > -1) {
      isoCode = key;
      return false;
    }
  });
  return isoCode;
};
var getValidateLocaleIOSCode = getISOCode;
var setValidateLanguage = function(lang) {
  registry.locales.language = lang || defaultLanguage;
};
var getLocaleByPath = function(path, lang) {
  if (lang === void 0) {
    lang = registry.locales.language;
  }
  return getIn2(registry.locales.messages, "".concat(getISOCode(lang), ".").concat(path));
};
var getValidateLocale = function(path) {
  var message = getLocaleByPath(path);
  return message || getLocaleByPath("pattern") || getLocaleByPath("pattern", defaultLanguage);
};
var getValidateMessageTemplateEngine = function() {
  return registry.template;
};
var getValidateFormats = function(key) {
  return key ? registry.formats[key] : registry.formats;
};
var getValidateRules = function(key) {
  return key ? registry.rules[key] : registry.rules;
};
var registerValidateLocale = function(locale) {
  registry.locales.messages = merge(registry.locales.messages, locale);
};
var registerValidateRules = function(rules) {
  each(rules, function(rule, key) {
    if (isFn(rule)) {
      registry.rules[key] = rule;
    }
  });
};
var registerValidateFormats = function(formats) {
  each(formats, function(pattern, key) {
    if (isStr(pattern) || pattern instanceof RegExp) {
      registry.formats[key] = new RegExp(pattern);
    }
  });
};
var registerValidateMessageTemplateEngine = function(template) {
  registry.template = template;
};

// node_modules/@formily/validator/esm/template.js
var render = function(result, rules) {
  var message = result.message;
  if (isStr(message)) {
    var template = getValidateMessageTemplateEngine();
    if (isFn(template)) {
      result.message = template(message, rules);
    }
    result.message = result.message.replace(/\{\{\s*([\w.]+)\s*\}\}/g, function(_, $0) {
      return Path.getIn(rules, $0);
    });
  }
  return result;
};

// node_modules/@formily/validator/esm/parser.js
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var getRuleMessage = function(rule, type) {
  if (rule.format) {
    return rule.message || getValidateLocale(rule.format);
  }
  return rule.message || getValidateLocale(type);
};
var parseValidatorDescription = function(description) {
  if (!description)
    return {};
  var rules = {};
  if (isStr(description)) {
    rules.format = description;
  } else if (isFn(description)) {
    rules.validator = description;
  } else {
    rules = Object.assign(rules, description);
  }
  return rules;
};
var parseValidatorDescriptions = function(validator) {
  if (!validator)
    return [];
  var array = isArr(validator) ? validator : [validator];
  return array.map(function(description) {
    return parseValidatorDescription(description);
  });
};
var parseValidatorRules = function(rules) {
  if (rules === void 0) {
    rules = {};
  }
  var getRulesKeys = function() {
    var keys = [];
    if ("required" in rules) {
      keys.push("required");
    }
    for (var key in rules) {
      if (key === "required" || key === "validator")
        continue;
      keys.push(key);
    }
    if ("validator" in rules) {
      keys.push("validator");
    }
    return keys;
  };
  var getContext = function(context, value) {
    return __assign5(__assign5(__assign5({}, rules), context), { value });
  };
  var createValidate = function(callback, message) {
    return function(value, context) {
      return __awaiter(void 0, void 0, void 0, function() {
        var context_, results, e_1;
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              context_ = getContext(context, value);
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, 3, , 4]);
              return [4, callback(value, __assign5(__assign5({}, rules), { message }), context_, function(message2, scope) {
                var _a3;
                return (_a3 = render({
                  type: "error",
                  message: message2
                }, Object.assign(context_, scope))) === null || _a3 === void 0 ? void 0 : _a3.message;
              })];
            case 2:
              results = _a2.sent();
              if (isBool(results)) {
                if (!results) {
                  return [2, render({
                    type: "error",
                    message
                  }, context_)];
                }
                return [2, {
                  type: "error",
                  message: void 0
                }];
              } else if (results) {
                if (isValidateResult(results)) {
                  return [2, render(results, context_)];
                }
                return [2, render({
                  type: "error",
                  message: results
                }, context_)];
              }
              return [2, {
                type: "error",
                message: void 0
              }];
            case 3:
              e_1 = _a2.sent();
              return [2, {
                type: "error",
                message: (e_1 === null || e_1 === void 0 ? void 0 : e_1.message) || e_1
              }];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
  };
  return getRulesKeys().reduce(function(buf, key) {
    var callback = getValidateRules(key);
    if (callback) {
      var validator = createValidate(callback, getRuleMessage(rules, key));
      return buf.concat(validator);
    }
    return buf;
  }, []);
};
var parseValidator = function(validator, options) {
  if (options === void 0) {
    options = {};
  }
  if (!validator)
    return [];
  var array = isArr(validator) ? validator : [validator];
  return array.reduce(function(buf, description) {
    var _a2;
    var rules = parseValidatorDescription(description);
    var triggerType = (_a2 = rules.triggerType) !== null && _a2 !== void 0 ? _a2 : "onInput";
    if ((options === null || options === void 0 ? void 0 : options.triggerType) && options.triggerType !== triggerType)
      return buf;
    return rules ? buf.concat(parseValidatorRules(rules)) : buf;
  }, []);
};

// node_modules/@formily/validator/esm/locale.js
var locale_default = {
  en: {
    pattern: "This field is invalid",
    invalid: "This field is invalid",
    required: "The field value is required",
    number: "The field value is not a number",
    integer: "The field value is not an integer number",
    url: "The field value is a invalid url",
    email: "The field value is not a email format",
    ipv6: "The field value is not a ipv6 format",
    ipv4: "The field value is not a ipv4 format",
    idcard: "The field value is not an idcard format",
    qq: "The field value is not a qq number format",
    phone: "The field value is not a phone number format",
    money: "The field value is not a currency format",
    zh: "The field value is not a chinese string",
    date: "The field value is not a valid date format",
    zip: "The field value is not a zip format",
    len: "The length or number of entries must be {{len}}",
    min: "The length or number of entries must be at least {{min}}",
    minLength: "The length or number of entries must be at least {{minLength}}",
    minItems: "The length or number of entries must be at least {{minItems}}",
    maximum: "The field value cannot be greater than {{maximum}}",
    exclusiveMaximum: "The field value must be less than {{exclusiveMaximum}}",
    minimum: "The field value cannot be less than {{minimum}}",
    exclusiveMinimum: "The field value must be greater than {{exclusiveMinimum}}",
    max: "The field length or number of entries must be at most {{max}}",
    maxLength: "The field length or number of entries must be at most {{maxLength}}",
    maxItems: "The field length or number of entries must be at most {{maxItems}}",
    whitespace: "This field value cannot be blank string.",
    enum: "The field value must be one of {{enum}}",
    const: "The field value must be equal to {{const}}",
    multipleOf: "The field value must be divisible by {{multipleOf}}",
    maxProperties: "The number of field properties cannot be greater than {{maxProperties}}",
    minProperties: "The number of field properties cannot be less than {{maxProperties}}",
    uniqueItems: "Array elements are not unique"
  },
  zh: {
    pattern: "该字段不是一个合法的字段",
    invalid: "该字段不是一个合法的字段",
    required: "该字段是必填字段",
    number: "该字段不是合法的数字",
    integer: "该字段不是合法的整型数字",
    url: "该字段不是合法的url",
    email: "该字段不是合法的邮箱格式",
    ipv6: "该字段不是合法的ipv6格式",
    ipv4: "该字段不是合法的ipv4格式",
    idcard: "该字段不是合法的身份证格式",
    qq: "该字段不符合QQ号格式",
    phone: "该字段不是有效的手机号",
    money: "该字段不是有效货币格式",
    zh: "该字段不是合法的中文字符串",
    date: "该字段不是合法的日期格式",
    zip: "该字段不是合法的邮编格式",
    len: "长度或条目数必须为{{len}}",
    min: "长度或条目数不能小于{{min}}",
    minLength: "长度或条目数不能小于{{minLength}}",
    minItems: "长度或条目数不能小于{{minItems}}",
    max: "长度或条目数不能大于{{max}}",
    maxLength: "长度或条目数不能大于{{maxLength}}",
    maxItems: "长度或条目数不能大于{{maxItems}}",
    maximum: "数值不能大于{{maximum}}",
    exclusiveMaximum: "数值必须小于{{exclusiveMaximum}}",
    minimum: "数值不能小于{{minimum}}",
    exclusiveMinimum: "数值必须大于{{exclusiveMinimum}}",
    whitespace: "不能为纯空白字符串",
    enum: "字段值必须为{{enum}}其中一个",
    const: "字段值必须等于{{const}}",
    multipleOf: "字段值不能被{{multipleOf}}整除",
    maxProperties: "字段属性数量不能大于{{maxProperties}}",
    minProperties: "字段属性数量不能小于{{minProperties}}",
    uniqueItems: "数组元素不唯一"
  },
  "en-US": {
    pattern: "This field is invalid",
    invalid: "This field is invalid",
    required: "The field value is required",
    number: "The field value is not a number",
    integer: "The field value is not an integer number",
    url: "The field value is a invalid url",
    email: "The field value is not a email format",
    ipv6: "The field value is not a ipv6 format",
    ipv4: "The field value is not a ipv4 format",
    idcard: "The field value is not an idcard format",
    qq: "The field value is not a qq number format",
    phone: "The field value is not a phone number format",
    money: "The field value is not a currency format",
    zh: "The field value is not a chinese string",
    date: "The field value is not a valid date format",
    zip: "The field value is not a zip format",
    len: "The length or number of entries must be {{len}}",
    min: "The length or number of entries must be at least {{min}}",
    minLength: "The length or number of entries must be at least {{minLength}}",
    minItems: "The length or number of entries must be at least {{minItems}}",
    maximum: "The field value cannot be greater than {{maximum}}",
    exclusiveMaximum: "The field value must be less than {{exclusiveMaximum}}",
    minimum: "The field value cannot be less than {{minimum}}",
    exclusiveMinimum: "The field value must be greater than {{exclusiveMinimum}}",
    max: "The field length or number of entries must be at most {{max}}",
    maxLength: "The field length or number of entries must be at most {{maxLength}}",
    maxItems: "The field length or number of entries must be at most {{maxItems}}",
    whitespace: "This field value cannot be blank string.",
    enum: "The field value must be one of {{enum}}",
    const: "The field value must be equal to {{const}}",
    multipleOf: "The field value must be divisible by {{multipleOf}}",
    maxProperties: "The number of field properties cannot be greater than {{maxProperties}}",
    minProperties: "The number of field properties cannot be less than {{maxProperties}}",
    uniqueItems: "Array elements are not unique"
  },
  "zh-CN": {
    pattern: "该字段不是一个合法的字段",
    invalid: "该字段不是一个合法的字段",
    required: "该字段是必填字段",
    number: "该字段不是合法的数字",
    integer: "该字段不是合法的整型数字",
    url: "该字段不是合法的url",
    email: "该字段不是合法的邮箱格式",
    ipv6: "该字段不是合法的ipv6格式",
    ipv4: "该字段不是合法的ipv4格式",
    idcard: "该字段不是合法的身份证格式",
    qq: "该字段不符合QQ号格式",
    phone: "该字段不是有效的手机号",
    money: "该字段不是有效货币格式",
    zh: "该字段不是合法的中文字符串",
    date: "该字段不是合法的日期格式",
    zip: "该字段不是合法的邮编格式",
    len: "长度或条目数必须为{{len}}",
    min: "长度或条目数不能小于{{min}}",
    minLength: "长度或条目数不能小于{{minLength}}",
    minItems: "长度或条目数不能小于{{minItems}}",
    maxLength: "长度或条目数不能大于{{maxLength}}",
    maxItems: "长度或条目数不能大于{{maxItems}}",
    max: "长度或条目数不能大于{{max}}",
    maximum: "数值不能大于{{maximum}}",
    exclusiveMaximum: "数值必须小于{{exclusiveMaximum}}",
    minimum: "数值不能小于{{minimum}}",
    exclusiveMinimum: "数值必须大于{{exclusiveMinimum}}",
    whitespace: "不能为纯空白字符串",
    enum: "字段值必须为{{enum}}其中一个",
    const: "字段值必须等于{{const}}",
    multipleOf: "字段值不能被{{multipleOf}}整除",
    maxProperties: "字段属性数量不能大于{{maxProperties}}",
    minProperties: "字段属性数量不能小于{{minProperties}}",
    uniqueItems: "数组元素不唯一"
  },
  "zh-TW": {
    pattern: "該字段不是一個合法的字段",
    invalid: "該字段不是一個合法的字段",
    required: "該字段是必填字段",
    number: "該字段不是合法的數字",
    integer: "該字段不是合法的整型數字",
    url: "該字段不是合法的url",
    email: "該字段不是合法的郵箱格式",
    ipv6: "該字段不是合法的ipv6格式",
    ipv4: "該字段不是合法的ipv4格式",
    idcard: "該字段不是合法的身份證格式",
    qq: "該字段不符合QQ號格式",
    phone: "該字段不是有效的手機號",
    money: "該字段不是有效貨幣格式",
    zh: "該字段不是合法的中文字符串",
    date: "該字段不是合法的日期格式",
    zip: "該字段不是合法的郵編格式",
    len: "長度或條目數必須為{{len}}",
    min: "長度或條目數不能小於{{min}}",
    minItems: "長度或條目數不能小於{{minItems}}",
    minLength: "長度或條目數不能小於{{minLength}}",
    max: "長度或條目數不能大於{{max}}",
    maxItems: "長度或條目數不能大於{{maxItems}}",
    maxLength: "長度或條目數不能大於{{maxLength}}",
    maximum: "數值不能大於{{maximum}}",
    exclusiveMaximum: "數值必須小於{{exclusiveMaximum}}",
    minimum: "數值不能小於{{minimum}}",
    exclusiveMinimum: "數值必須大於{{exclusiveMinimum}}",
    whitespace: "不能為純空白字符串",
    enum: "字段值必須為{{enum}}其中一個",
    const: "字段值必須等於{{const}}",
    multipleOf: "字段值不能被{{multipleOf}}整除",
    maxProperties: "字段屬性數量不能大於{{maxProperties}}",
    minProperties: "字段屬性數量不能小於{{minProperties}}",
    uniqueItems: "數組元素不唯一"
  },
  ja: {
    url: "このフィールドは無効なURLです",
    whitespace: "このフィールドを空の文字列にすることはできません。",
    zh: "このフィールドは中国語の文字列ではありません",
    zip: "このフィールドはzip形式ではありません",
    date: "このフィールドは有効な日付形式ではありません",
    email: "このフィールドはメール形式ではありません",
    exclusiveMaximum: "値は{{exclusiveMaximum}}未満である必要があります",
    exclusiveMinimum: "値は{{exclusiveMinimum}}より大きい必要があります",
    idcard: "このフィールドはIDカード形式ではありません",
    integer: "このフィールドは整数ではありません",
    ipv4: "このフィールドはIPv4形式ではありません",
    ipv6: "このフィールドはIPv6形式ではありません",
    len: "エントリの長さまたは数は{{len}}でなければなりません",
    max: "エントリの長さまたは数は最大{{max}}でなければなりません",
    maxItems: "エントリの長さまたは数は最大{{maxItems}}でなければなりません",
    maxLength: "エントリの長さまたは数は最大{{maxLength}}でなければなりません",
    maximum: "値は{{最大}}を超えることはできません",
    min: "エントリの長さまたは数は、少なくとも{{min}}である必要があります",
    minItems: "エントリの長さまたは数は、少なくとも{{minItems}}である必要があります",
    minLength: "エントリの長さまたは数は、少なくとも{{minLength}}である必要があります",
    minimum: "値は{{minimum}}以上にする必要があります",
    money: "このフィールドは通貨形式ではありません",
    number: "このフィールドは数値ではありません",
    pattern: "このフィールドはどのパターンとも一致しません",
    invalid: "このフィールドはどのパターンとも一致しません",
    phone: "このフィールドは電話番号の形式ではありません",
    qq: "このフィールドはqq数値形式ではありません",
    required: "この項目は必須です",
    enum: "フィールド値は{{enum}}のいずれかである必要があります",
    cons: "フィールド値は{{const}}と等しくなければなりません",
    multipleOf: "フィールド値を{{multipleOf}}で割り切れない",
    maxProperties: "フィールドプロパティの数は{{maxProperties}}を超えることはできません",
    minProperties: "フィールドプロパティの数は{{minProperties}}未満にすることはできません",
    uniqueItems: "配列要素は一意ではありません"
  }
};

// node_modules/@formily/validator/esm/formats.js
var formats_default = {
  url: new RegExp(
    // protocol identifier
    "^(?:(?:(?:https?|ftp|rtmp):)?//)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:22[0-3]|2[01]\\d|[1-9]\\d?|1\\d\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1?\\d{1,2})){2}(?:\\.(?:25[0-4]|2[0-4]\\d|1\\d\\d|[1-9]\\d?))|(?:(?:[a-z\\u00a1-\\uffff0-9_]-*)*[a-z\\u00a1-\\uffff0-9_]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9_]-*)*[a-z\\u00a1-\\uffff0-9_]+)*(?:\\.(?:[a-z\\u00a1-\\uffff_]{2,})))(?::\\d{2,5})?(?:/?\\S*)?$"
  ),
  email: /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
  ipv6: /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
  ipv4: /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/,
  number: /^[+-]?\d+(\.\d+)?$/,
  integer: /^[+-]?\d+$/,
  qq: /^(\+?[1-9]\d*|0)$/,
  phone: /^\d{3}-\d{8}$|^\d{4}-\d{7}$|^\d{11}$/,
  idcard: /^\d{15}$|^\d{17}(\d|x|X)$/,
  money: /^([\u0024\u00A2\u00A3\u00A4\u20AC\u00A5\u20B1\u20B9\uFFE5]\s*)(\d+,?)+(\.\d+)?\s*$/,
  zh: /^[\u4e00-\u9fa5]+$/,
  date: /^[0-9]+[./-][0-9]+[./-][0-9]+\s*(?:[0-9]+\s*:\s*[0-9]+\s*:\s*[0-9]+)?$/,
  zip: /^[0-9]{6}$/
};

// node_modules/@formily/validator/esm/rules.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var __awaiter2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read3 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray3 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var isValidateEmpty = function(value) {
  var _a2;
  if (isArr(value)) {
    for (var i = 0; i < value.length; i++) {
      if (isValid(value[i]))
        return false;
    }
    return true;
  } else {
    if (value === null || value === void 0 ? void 0 : value.getCurrentContent) {
      return !((_a2 = value.getCurrentContent()) === null || _a2 === void 0 ? void 0 : _a2.hasText());
    }
    return isEmpty(value);
  }
};
var getLength = function(value) {
  return isStr(value) ? stringLength(value) : value ? value.length : 0;
};
var extendSameRules = function(rules, names) {
  each(names, function(realName, name) {
    rules[name] = function(value, rule) {
      var _a2;
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      return rules[realName].apply(rules, __spreadArray3([value, __assign6(__assign6({}, rule), (_a2 = {}, _a2[realName] = rule[name], _a2))], __read3(args), false));
    };
  });
};
var RULES = {
  format: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    if (rule.format) {
      var format = getValidateFormats(rule.format);
      if (format) {
        return !new RegExp(format).test(value) ? rule.message : "";
      }
    }
    return "";
  },
  required: function(value, rule) {
    if (rule.required !== true)
      return "";
    return isValidateEmpty(value) ? rule.message : "";
  },
  max: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    var length = isNum(value) ? value : getLength(value);
    var max = Number(rule.max);
    return length > max ? rule.message : "";
  },
  min: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    var length = isNum(value) ? value : getLength(value);
    var min = Number(rule.min);
    return length < min ? rule.message : "";
  },
  exclusiveMaximum: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    var length = isNum(value) ? value : getLength(value);
    var max = Number(rule.exclusiveMaximum);
    return length >= max ? rule.message : "";
  },
  exclusiveMinimum: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    var length = isNum(value) ? value : getLength(value);
    var min = Number(rule.exclusiveMinimum);
    return length <= min ? rule.message : "";
  },
  len: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    var length = getLength(value);
    var len = Number(rule.len);
    return length !== len ? rule.message : "";
  },
  pattern: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    return !new RegExp(rule.pattern).test(value) ? rule.message : "";
  },
  validator: function(value, rule, context, format) {
    return __awaiter2(this, void 0, void 0, function() {
      var response;
      return __generator2(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            if (!isFn(rule.validator)) return [3, 2];
            return [4, Promise.resolve(rule.validator(value, rule, context, format))];
          case 1:
            response = _a2.sent();
            if (isBool(response)) {
              return [2, !response ? rule.message : ""];
            } else {
              return [2, response];
            }
            _a2.label = 2;
          case 2:
            throw new Error("The rule's validator property must be a function.");
        }
      });
    });
  },
  whitespace: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    if (rule.whitespace) {
      return /^\s+$/.test(value) ? rule.message : "";
    }
  },
  enum: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    var enums = toArr(rule.enum);
    return enums.indexOf(value) === -1 ? rule.message : "";
  },
  const: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    return rule.const !== value ? rule.message : "";
  },
  multipleOf: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    return Number(value) % Number(rule.multipleOf) !== 0 ? rule.message : "";
  },
  uniqueItems: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    value = toArr(value);
    return value.some(function(item, index) {
      for (var i = 0; i < value.length; i++) {
        if (i !== index && !isEqual(value[i], item)) {
          return false;
        }
      }
      return true;
    }) ? "" : rule.message;
  },
  maxProperties: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    return Object.keys(value || {}).length <= Number(rule.maxProperties) ? "" : rule.message;
  },
  minProperties: function(value, rule) {
    if (isValidateEmpty(value))
      return "";
    return Object.keys(value || {}).length >= Number(rule.minProperties) ? "" : rule.message;
  }
};
extendSameRules(RULES, {
  maximum: "max",
  minimum: "min",
  maxItems: "max",
  minItems: "min",
  maxLength: "max",
  minLength: "min"
});
var rules_default = RULES;

// node_modules/@formily/validator/esm/validator.js
var __awaiter3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator3 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
registerValidateRules(rules_default);
registerValidateLocale(locale_default);
registerValidateFormats(formats_default);
var validate = function(value, validator, options) {
  return __awaiter3(void 0, void 0, void 0, function() {
    var validates, results, i, result, type, message;
    return __generator3(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          validates = parseValidator(validator, options);
          results = {
            error: [],
            success: [],
            warning: []
          };
          i = 0;
          _a2.label = 1;
        case 1:
          if (!(i < validates.length)) return [3, 4];
          return [4, validates[i](value, options === null || options === void 0 ? void 0 : options.context)];
        case 2:
          result = _a2.sent();
          type = result.type, message = result.message;
          results[type] = results[type] || [];
          if (message) {
            results[type].push(message);
            if (options === null || options === void 0 ? void 0 : options.validateFirst)
              return [3, 4];
          }
          _a2.label = 3;
        case 3:
          i++;
          return [3, 1];
        case 4:
          return [2, results];
      }
    });
  });
};

// node_modules/@formily/core/esm/types.js
var LifeCycleTypes;
(function(LifeCycleTypes2) {
  LifeCycleTypes2["ON_FORM_INIT"] = "onFormInit";
  LifeCycleTypes2["ON_FORM_MOUNT"] = "onFormMount";
  LifeCycleTypes2["ON_FORM_UNMOUNT"] = "onFormUnmount";
  LifeCycleTypes2["ON_FORM_INPUT_CHANGE"] = "onFormInputChange";
  LifeCycleTypes2["ON_FORM_VALUES_CHANGE"] = "onFormValuesChange";
  LifeCycleTypes2["ON_FORM_INITIAL_VALUES_CHANGE"] = "onFormInitialValuesChange";
  LifeCycleTypes2["ON_FORM_SUBMIT"] = "onFormSubmit";
  LifeCycleTypes2["ON_FORM_RESET"] = "onFormReset";
  LifeCycleTypes2["ON_FORM_SUBMIT_START"] = "onFormSubmitStart";
  LifeCycleTypes2["ON_FORM_SUBMITTING"] = "onFormSubmitting";
  LifeCycleTypes2["ON_FORM_SUBMIT_END"] = "onFormSubmitEnd";
  LifeCycleTypes2["ON_FORM_SUBMIT_VALIDATE_START"] = "onFormSubmitValidateStart";
  LifeCycleTypes2["ON_FORM_SUBMIT_VALIDATE_SUCCESS"] = "onFormSubmitValidateSuccess";
  LifeCycleTypes2["ON_FORM_SUBMIT_VALIDATE_FAILED"] = "onFormSubmitValidateFailed";
  LifeCycleTypes2["ON_FORM_SUBMIT_VALIDATE_END"] = "onFormSubmitValidateEnd";
  LifeCycleTypes2["ON_FORM_SUBMIT_SUCCESS"] = "onFormSubmitSuccess";
  LifeCycleTypes2["ON_FORM_SUBMIT_FAILED"] = "onFormSubmitFailed";
  LifeCycleTypes2["ON_FORM_VALIDATE_START"] = "onFormValidateStart";
  LifeCycleTypes2["ON_FORM_VALIDATING"] = "onFormValidating";
  LifeCycleTypes2["ON_FORM_VALIDATE_SUCCESS"] = "onFormValidateSuccess";
  LifeCycleTypes2["ON_FORM_VALIDATE_FAILED"] = "onFormValidateFailed";
  LifeCycleTypes2["ON_FORM_VALIDATE_END"] = "onFormValidateEnd";
  LifeCycleTypes2["ON_FORM_GRAPH_CHANGE"] = "onFormGraphChange";
  LifeCycleTypes2["ON_FORM_LOADING"] = "onFormLoading";
  LifeCycleTypes2["ON_FIELD_INIT"] = "onFieldInit";
  LifeCycleTypes2["ON_FIELD_INPUT_VALUE_CHANGE"] = "onFieldInputValueChange";
  LifeCycleTypes2["ON_FIELD_VALUE_CHANGE"] = "onFieldValueChange";
  LifeCycleTypes2["ON_FIELD_INITIAL_VALUE_CHANGE"] = "onFieldInitialValueChange";
  LifeCycleTypes2["ON_FIELD_SUBMIT"] = "onFieldSubmit";
  LifeCycleTypes2["ON_FIELD_SUBMIT_START"] = "onFieldSubmitStart";
  LifeCycleTypes2["ON_FIELD_SUBMITTING"] = "onFieldSubmitting";
  LifeCycleTypes2["ON_FIELD_SUBMIT_END"] = "onFieldSubmitEnd";
  LifeCycleTypes2["ON_FIELD_SUBMIT_VALIDATE_START"] = "onFieldSubmitValidateStart";
  LifeCycleTypes2["ON_FIELD_SUBMIT_VALIDATE_SUCCESS"] = "onFieldSubmitValidateSuccess";
  LifeCycleTypes2["ON_FIELD_SUBMIT_VALIDATE_FAILED"] = "onFieldSubmitValidateFailed";
  LifeCycleTypes2["ON_FIELD_SUBMIT_VALIDATE_END"] = "onFieldSubmitValidateEnd";
  LifeCycleTypes2["ON_FIELD_SUBMIT_SUCCESS"] = "onFieldSubmitSuccess";
  LifeCycleTypes2["ON_FIELD_SUBMIT_FAILED"] = "onFieldSubmitFailed";
  LifeCycleTypes2["ON_FIELD_VALIDATE_START"] = "onFieldValidateStart";
  LifeCycleTypes2["ON_FIELD_VALIDATING"] = "onFieldValidating";
  LifeCycleTypes2["ON_FIELD_VALIDATE_SUCCESS"] = "onFieldValidateSuccess";
  LifeCycleTypes2["ON_FIELD_VALIDATE_FAILED"] = "onFieldValidateFailed";
  LifeCycleTypes2["ON_FIELD_VALIDATE_END"] = "onFieldValidateEnd";
  LifeCycleTypes2["ON_FIELD_LOADING"] = "onFieldLoading";
  LifeCycleTypes2["ON_FIELD_RESET"] = "onFieldReset";
  LifeCycleTypes2["ON_FIELD_MOUNT"] = "onFieldMount";
  LifeCycleTypes2["ON_FIELD_UNMOUNT"] = "onFieldUnmount";
})(LifeCycleTypes || (LifeCycleTypes = {}));

// node_modules/@formily/core/esm/shared/constants.js
var ReservedProperties = {
  form: true,
  parent: true,
  props: true,
  caches: true,
  requests: true,
  disposers: true,
  heart: true,
  graph: true,
  indexes: true,
  fields: true,
  lifecycles: true,
  componentType: true,
  componentProps: true,
  decoratorType: true,
  decoratorProps: true
};
var ReadOnlyProperties = {
  address: true,
  path: true,
  valid: true,
  invalid: true,
  selfValid: true,
  selfInvalid: true,
  errors: true,
  successes: true,
  warnings: true,
  validateStatus: true
};
var SELF_DISPLAY = "selfDisplay";
var SELF_PATTERN = "selfPattern";
var MutuallyExclusiveProperties = {
  pattern: SELF_PATTERN,
  editable: SELF_PATTERN,
  readOnly: SELF_PATTERN,
  readPretty: SELF_PATTERN,
  disabled: SELF_PATTERN,
  display: SELF_DISPLAY,
  hidden: SELF_DISPLAY,
  visible: SELF_DISPLAY
};
var RESPONSE_REQUEST_DURATION = 100;
var GlobalState = {
  lifecycles: [],
  context: [],
  effectStart: false,
  effectEnd: false,
  initializing: false
};
var NumberIndexReg = /^\.(\d+)/;

// node_modules/@formily/core/esm/shared/internals.js
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var __awaiter4 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator4 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var hasOwnProperty4 = Object.prototype.hasOwnProperty;
var notify = function(target, formType, fieldType) {
  if (isForm(target)) {
    target.notify(formType);
  } else {
    target.notify(fieldType);
  }
};
var isHTMLInputEvent = function(event, stopPropagation) {
  var _a2;
  if (stopPropagation === void 0) {
    stopPropagation = true;
  }
  if (event === null || event === void 0 ? void 0 : event.target) {
    if (typeof event.target === "object" && ("value" in event.target || "checked" in event.target))
      return true;
    if (stopPropagation)
      (_a2 = event.stopPropagation) === null || _a2 === void 0 ? void 0 : _a2.call(event);
  }
  return false;
};
var getValuesFromEvent = function(args) {
  return args.map(function(event) {
    if (event === null || event === void 0 ? void 0 : event.target) {
      if (isValid(event.target.value))
        return event.target.value;
      if (isValid(event.target.checked))
        return event.target.checked;
      return;
    }
    return event;
  });
};
var getTypedDefaultValue = function(field) {
  if (isArrayField(field))
    return [];
  if (isObjectField(field))
    return {};
};
var buildFieldPath = function(field) {
  return buildDataPath(field.form.fields, field.address);
};
var buildDataPath = function(fields, pattern) {
  var prevArray = false;
  var segments = pattern.segments;
  var path = segments.reduce(function(path2, key, index) {
    var currentPath = path2.concat(key);
    var currentAddress = segments.slice(0, index + 1);
    var current = fields[currentAddress.join(".")];
    if (prevArray) {
      if (!isVoidField(current)) {
        prevArray = false;
      }
      return path2;
    }
    if (index >= segments.length - 1) {
      return currentPath;
    }
    if (isVoidField(current)) {
      var parentAddress = segments.slice(0, index);
      var parent_1 = fields[parentAddress.join(".")];
      if (isArrayField(parent_1) && isNumberLike(key)) {
        prevArray = true;
        return currentPath;
      }
      return path2;
    } else {
      prevArray = false;
    }
    return currentPath;
  }, []);
  return new Path(path);
};
var locateNode = function(field, address) {
  field.address = Path.parse(address);
  field.path = buildFieldPath(field);
  field.form.indexes[field.path.toString()] = field.address.toString();
  return field;
};
var patchFieldStates = function(target, patches) {
  patches.forEach(function(_a2) {
    var type = _a2.type, address = _a2.address, oldAddress = _a2.oldAddress, payload = _a2.payload;
    if (type === "remove") {
      destroy(target, address, false);
    } else if (type === "update") {
      if (payload) {
        target[address] = payload;
        if (target[oldAddress] === payload) {
          target[oldAddress] = void 0;
        }
      }
      if (address && payload) {
        locateNode(payload, address);
      }
    }
  });
};
var destroy = function(target, address, forceClear) {
  if (forceClear === void 0) {
    forceClear = true;
  }
  var field = target[address];
  field === null || field === void 0 ? void 0 : field.dispose();
  if (isDataField(field) && forceClear) {
    var form = field.form;
    var path = field.path;
    form.deleteValuesIn(path);
    form.deleteInitialValuesIn(path);
  }
  delete target[address];
};
var patchFormValues = function(form, path, source) {
  var update = function(path2, source2) {
    if (path2.length) {
      form.setValuesIn(path2, clone(source2));
    } else {
      Object.assign(form.values, clone(source2));
    }
  };
  var patch = function(source2, path2) {
    if (path2 === void 0) {
      path2 = [];
    }
    var targetValue = form.getValuesIn(path2);
    var targetField = form.query(path2).take();
    var isUnVoidField = targetField && !isVoidField(targetField);
    if (isUnVoidField && targetField.display === "none") {
      targetField.caches.value = clone(source2);
      return;
    }
    if (allowAssignDefaultValue(targetValue, source2)) {
      update(path2, source2);
    } else {
      if (isEmpty(source2))
        return;
      if (GlobalState.initializing)
        return;
      if (isPlainObj(targetValue) && isPlainObj(source2)) {
        each(source2, function(value, key) {
          patch(value, path2.concat(key));
        });
      } else {
        if (targetField) {
          if (isUnVoidField && !targetField.selfModified) {
            update(path2, source2);
          }
        } else if (form.initialized) {
          update(path2, source2);
        }
      }
    }
  };
  patch(source, path);
};
var matchFeedback = function(search, feedback) {
  if (!search || !feedback)
    return false;
  if (search.type && search.type !== feedback.type)
    return false;
  if (search.code && search.code !== feedback.code)
    return false;
  if (search.path && feedback.path) {
    if (!Path.parse(search.path).match(feedback.path))
      return false;
  }
  if (search.address && feedback.address) {
    if (!Path.parse(search.address).match(feedback.address))
      return false;
  }
  if (search.triggerType && search.triggerType !== feedback.triggerType)
    return false;
  return true;
};
var queryFeedbacks = function(field, search) {
  return field.feedbacks.filter(function(feedback) {
    var _a2, _b, _c;
    if (!((_a2 = feedback.messages) === null || _a2 === void 0 ? void 0 : _a2.length))
      return false;
    return matchFeedback(search, __assign7(__assign7({}, feedback), { address: (_b = field.address) === null || _b === void 0 ? void 0 : _b.toString(), path: (_c = field.path) === null || _c === void 0 ? void 0 : _c.toString() }));
  });
};
var queryFeedbackMessages = function(field, search) {
  if (!field.feedbacks.length)
    return [];
  return queryFeedbacks(field, search).reduce(function(buf, info) {
    return isEmpty(info.messages) ? buf : buf.concat(info.messages);
  }, []);
};
var updateFeedback = function(field, feedback) {
  if (!feedback)
    return;
  return batch(function() {
    var _a2, _b;
    if (!field.feedbacks.length) {
      if (!((_a2 = feedback.messages) === null || _a2 === void 0 ? void 0 : _a2.length)) {
        return;
      }
      field.feedbacks = [feedback];
    } else {
      var searched_1 = queryFeedbacks(field, feedback);
      if (searched_1.length) {
        field.feedbacks = field.feedbacks.reduce(function(buf, item) {
          var _a3;
          if (searched_1.includes(item)) {
            if ((_a3 = feedback.messages) === null || _a3 === void 0 ? void 0 : _a3.length) {
              item.messages = feedback.messages;
              return buf.concat(item);
            } else {
              return buf;
            }
          } else {
            return buf.concat(item);
          }
        }, []);
        return;
      } else if ((_b = feedback.messages) === null || _b === void 0 ? void 0 : _b.length) {
        field.feedbacks = field.feedbacks.concat(feedback);
      }
    }
  });
};
var validateToFeedbacks = function(field, triggerType) {
  if (triggerType === void 0) {
    triggerType = "onInput";
  }
  return __awaiter4(void 0, void 0, void 0, function() {
    var results;
    var _a2;
    return __generator4(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, validate(field.value, field.validator, {
            triggerType,
            validateFirst: (_a2 = field.props.validateFirst) !== null && _a2 !== void 0 ? _a2 : field.form.props.validateFirst,
            context: { field, form: field.form }
          })];
        case 1:
          results = _b.sent();
          batch(function() {
            each(results, function(messages, type) {
              field.setFeedback({
                triggerType,
                type,
                code: pascalCase("validate-".concat(type)),
                messages
              });
            });
          });
          return [2, results];
      }
    });
  });
};
var setValidatorRule = function(field, name, value) {
  var _a2;
  if (!isValid(value))
    return;
  var validators = parseValidatorDescriptions(field.validator);
  var hasRule = validators.some(function(desc) {
    return name in desc;
  });
  var rule = (_a2 = {}, _a2[name] = value, _a2);
  if (hasRule) {
    field.validator = validators.map(function(desc) {
      if (isPlainObj(desc) && hasOwnProperty4.call(desc, name)) {
        desc[name] = value;
        return desc;
      }
      return desc;
    });
  } else {
    if (name === "required") {
      field.validator = [rule].concat(validators);
    } else {
      field.validator = validators.concat(rule);
    }
  }
};
var spliceArrayState = function(field, props) {
  var _a2 = __assign7({ startIndex: 0, deleteCount: 0, insertCount: 0 }, props), startIndex = _a2.startIndex, deleteCount = _a2.deleteCount, insertCount = _a2.insertCount;
  var address = field.address.toString();
  var addrLength = address.length;
  var form = field.form;
  var fields = form.fields;
  var fieldPatches = [];
  var offset = insertCount - deleteCount;
  var isArrayChildren = function(identifier) {
    return identifier.indexOf(address) === 0 && identifier.length > addrLength;
  };
  var isAfterNode = function(identifier) {
    var _a3;
    var afterStr = identifier.substring(addrLength);
    var number = (_a3 = afterStr.match(NumberIndexReg)) === null || _a3 === void 0 ? void 0 : _a3[1];
    if (number === void 0)
      return false;
    var index = Number(number);
    return index > startIndex + deleteCount - 1;
  };
  var isInsertNode = function(identifier) {
    var _a3;
    var afterStr = identifier.substring(addrLength);
    var number = (_a3 = afterStr.match(NumberIndexReg)) === null || _a3 === void 0 ? void 0 : _a3[1];
    if (number === void 0)
      return false;
    var index = Number(number);
    return index >= startIndex && index < startIndex + insertCount;
  };
  var isDeleteNode = function(identifier) {
    var _a3;
    var preStr = identifier.substring(0, addrLength);
    var afterStr = identifier.substring(addrLength);
    var number = (_a3 = afterStr.match(NumberIndexReg)) === null || _a3 === void 0 ? void 0 : _a3[1];
    if (number === void 0)
      return false;
    var index = Number(number);
    return index > startIndex && !fields["".concat(preStr).concat(afterStr.replace(/^\.\d+/, ".".concat(index + deleteCount)))] || index === startIndex;
  };
  var moveIndex = function(identifier) {
    var _a3;
    if (offset === 0)
      return identifier;
    var preStr = identifier.substring(0, addrLength);
    var afterStr = identifier.substring(addrLength);
    var number = (_a3 = afterStr.match(NumberIndexReg)) === null || _a3 === void 0 ? void 0 : _a3[1];
    if (number === void 0)
      return identifier;
    var index = Number(number) + offset;
    return "".concat(preStr).concat(afterStr.replace(/^\.\d+/, ".".concat(index)));
  };
  batch(function() {
    each(fields, function(field2, identifier) {
      if (isArrayChildren(identifier)) {
        if (isAfterNode(identifier)) {
          var newIdentifier = moveIndex(identifier);
          fieldPatches.push({
            type: "update",
            address: newIdentifier,
            oldAddress: identifier,
            payload: field2
          });
        }
        if (isInsertNode(identifier) || isDeleteNode(identifier)) {
          fieldPatches.push({ type: "remove", address: identifier });
        }
      }
    });
    patchFieldStates(fields, fieldPatches);
  });
  field.form.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
};
var exchangeArrayState = function(field, props) {
  var _a2 = __assign7({ fromIndex: 0, toIndex: 0 }, props), fromIndex = _a2.fromIndex, toIndex = _a2.toIndex;
  var address = field.address.toString();
  var fields = field.form.fields;
  var addrLength = address.length;
  var fieldPatches = [];
  var isArrayChildren = function(identifier) {
    return identifier.indexOf(address) === 0 && identifier.length > addrLength;
  };
  var isDown = fromIndex < toIndex;
  var isMoveNode = function(identifier) {
    var _a3;
    var afterStr = identifier.slice(address.length);
    var number = (_a3 = afterStr.match(NumberIndexReg)) === null || _a3 === void 0 ? void 0 : _a3[1];
    if (number === void 0)
      return false;
    var index = Number(number);
    return isDown ? index > fromIndex && index <= toIndex : index < fromIndex && index >= toIndex;
  };
  var isFromNode = function(identifier) {
    var _a3;
    var afterStr = identifier.substring(addrLength);
    var number = (_a3 = afterStr.match(NumberIndexReg)) === null || _a3 === void 0 ? void 0 : _a3[1];
    if (number === void 0)
      return false;
    var index = Number(number);
    return index === fromIndex;
  };
  var moveIndex = function(identifier) {
    var preStr = identifier.substring(0, addrLength);
    var afterStr = identifier.substring(addrLength);
    var number = afterStr.match(NumberIndexReg)[1];
    var current = Number(number);
    var index = current;
    if (index === fromIndex) {
      index = toIndex;
    } else {
      index += isDown ? -1 : 1;
    }
    return "".concat(preStr).concat(afterStr.replace(/^\.\d+/, ".".concat(index)));
  };
  batch(function() {
    each(fields, function(field2, identifier) {
      if (isArrayChildren(identifier)) {
        if (isMoveNode(identifier) || isFromNode(identifier)) {
          var newIdentifier = moveIndex(identifier);
          fieldPatches.push({
            type: "update",
            address: newIdentifier,
            oldAddress: identifier,
            payload: field2
          });
          if (!fields[newIdentifier]) {
            fieldPatches.push({
              type: "remove",
              address: identifier
            });
          }
        }
      }
    });
    patchFieldStates(fields, fieldPatches);
  });
  field.form.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
};
var cleanupArrayChildren = function(field, start) {
  var address = field.address.toString();
  var fields = field.form.fields;
  var isArrayChildren = function(identifier) {
    return identifier.indexOf(address) === 0 && identifier.length > address.length;
  };
  var isNeedCleanup = function(identifier) {
    var _a2;
    var afterStr = identifier.slice(address.length);
    var numStr = (_a2 = afterStr.match(NumberIndexReg)) === null || _a2 === void 0 ? void 0 : _a2[1];
    if (numStr === void 0)
      return false;
    var index = Number(numStr);
    return index >= start;
  };
  batch(function() {
    each(fields, function(field2, identifier) {
      if (isArrayChildren(identifier) && isNeedCleanup(identifier)) {
        field2.destroy();
      }
    });
  });
};
var cleanupObjectChildren = function(field, keys) {
  if (keys.length === 0)
    return;
  var address = field.address.toString();
  var fields = field.form.fields;
  var isObjectChildren = function(identifier) {
    return identifier.indexOf(address) === 0 && identifier.length > address.length;
  };
  var isNeedCleanup = function(identifier) {
    var _a2;
    var afterStr = identifier.slice(address.length);
    var key = (_a2 = afterStr.match(/^\.([^.]+)/)) === null || _a2 === void 0 ? void 0 : _a2[1];
    if (key === void 0)
      return false;
    return keys.includes(key);
  };
  batch(function() {
    each(fields, function(field2, identifier) {
      if (isObjectChildren(identifier) && isNeedCleanup(identifier)) {
        field2.destroy();
      }
    });
  });
};
var initFieldUpdate = batch.scope.bound(function(field) {
  var form = field.form;
  var updates = Path.ensureIn(form, "requests.updates", []);
  var indexes = Path.ensureIn(form, "requests.updateIndexes", {});
  for (var index = 0; index < updates.length; index++) {
    var _a2 = updates[index], pattern = _a2.pattern, callbacks = _a2.callbacks;
    var removed = false;
    if (field.match(pattern)) {
      callbacks.forEach(function(callback) {
        field.setState(callback);
      });
      if (!pattern.isWildMatchPattern && !pattern.isMatchPattern) {
        updates.splice(index--, 1);
        removed = true;
      }
    }
    if (!removed) {
      indexes[pattern.toString()] = index;
    } else {
      delete indexes[pattern.toString()];
    }
  }
});
var subscribeUpdate = function(form, pattern, callback) {
  var updates = Path.ensureIn(form, "requests.updates", []);
  var indexes = Path.ensureIn(form, "requests.updateIndexes", {});
  var id = pattern.toString();
  var current = indexes[id];
  if (isValid(current)) {
    if (updates[current] && !updates[current].callbacks.some(function(fn) {
      return fn.toString() === callback.toString() ? fn === callback : false;
    })) {
      updates[current].callbacks.push(callback);
    }
  } else {
    indexes[id] = updates.length;
    updates.push({
      pattern,
      callbacks: [callback]
    });
  }
};
var deserialize = function(model2, setter) {
  if (!model2)
    return;
  if (isFn(setter)) {
    setter(model2);
  } else {
    for (var key in setter) {
      if (!hasOwnProperty4.call(setter, key))
        continue;
      if (ReadOnlyProperties[key] || ReservedProperties[key])
        continue;
      var MutuallyExclusiveKey = MutuallyExclusiveProperties[key];
      if (MutuallyExclusiveKey && hasOwnProperty4.call(setter, MutuallyExclusiveKey) && !isValid(setter[MutuallyExclusiveKey]))
        continue;
      var value = setter[key];
      if (isFn(value))
        continue;
      model2[key] = value;
    }
  }
  return model2;
};
var serialize = function(model2, getter) {
  if (isFn(getter)) {
    return getter(model2);
  } else {
    var results = {};
    for (var key in model2) {
      if (!hasOwnProperty4.call(model2, key))
        continue;
      if (ReservedProperties[key])
        continue;
      if (key === "address" || key === "path") {
        results[key] = model2[key].toString();
        continue;
      }
      var value = model2[key];
      if (isFn(value))
        continue;
      results[key] = toJS(value);
    }
    return results;
  }
};
var createChildrenFeedbackFilter = function(field) {
  var _a2;
  var identifier = (_a2 = field.address) === null || _a2 === void 0 ? void 0 : _a2.toString();
  return function(_a3) {
    var address = _a3.address;
    return address === identifier || address.indexOf(identifier + ".") === 0;
  };
};
var createStateSetter = function(model2) {
  return batch.bound(function(setter) {
    return deserialize(model2, setter);
  });
};
var createStateGetter = function(model2) {
  return function(getter) {
    return serialize(model2, getter);
  };
};
var createBatchStateSetter = function(form) {
  return batch.bound(function(pattern, payload) {
    if (isQuery(pattern)) {
      pattern.forEach(function(field) {
        field.setState(payload);
      });
    } else if (isGeneralField(pattern)) {
      pattern.setState(payload);
    } else {
      var matchCount_1 = 0, path = Path.parse(pattern);
      form.query(path).forEach(function(field) {
        field.setState(payload);
        matchCount_1++;
      });
      if (matchCount_1 === 0 || path.isWildMatchPattern) {
        subscribeUpdate(form, path, payload);
      }
    }
  });
};
var createBatchStateGetter = function(form) {
  return function(pattern, payload) {
    if (isQuery(pattern)) {
      return pattern.take(payload);
    } else if (isGeneralField(pattern)) {
      return pattern.getState(payload);
    } else {
      return form.query(pattern).take(function(field) {
        return field.getState(payload);
      });
    }
  };
};
var triggerFormInitialValuesChange = function(form, change) {
  if (Array.isArray(change.object) && change.key === "length")
    return;
  if (contains(form.initialValues, change.object) || form.initialValues === change.value) {
    if (change.type === "add" || change.type === "set") {
      patchFormValues(form, change.path.slice(1), change.value);
    }
    if (form.initialized) {
      form.notify(LifeCycleTypes.ON_FORM_INITIAL_VALUES_CHANGE);
    }
  }
};
var triggerFormValuesChange = function(form, change) {
  if (Array.isArray(change.object) && change.key === "length")
    return;
  if ((contains(form.values, change.object) || form.values === change.value) && form.initialized) {
    form.notify(LifeCycleTypes.ON_FORM_VALUES_CHANGE);
  }
};
var setValidating = function(target, validating) {
  clearTimeout(target.requests.validate);
  if (validating) {
    target.requests.validate = setTimeout(function() {
      batch(function() {
        target.validating = validating;
        notify(target, LifeCycleTypes.ON_FORM_VALIDATING, LifeCycleTypes.ON_FIELD_VALIDATING);
      });
    }, RESPONSE_REQUEST_DURATION);
    notify(target, LifeCycleTypes.ON_FORM_VALIDATE_START, LifeCycleTypes.ON_FIELD_VALIDATE_START);
  } else {
    if (target.validating !== validating) {
      target.validating = validating;
    }
    notify(target, LifeCycleTypes.ON_FORM_VALIDATE_END, LifeCycleTypes.ON_FIELD_VALIDATE_END);
  }
};
var setSubmitting = function(target, submitting) {
  clearTimeout(target.requests.submit);
  if (submitting) {
    target.requests.submit = setTimeout(function() {
      batch(function() {
        target.submitting = submitting;
        notify(target, LifeCycleTypes.ON_FORM_SUBMITTING, LifeCycleTypes.ON_FIELD_SUBMITTING);
      });
    }, RESPONSE_REQUEST_DURATION);
    notify(target, LifeCycleTypes.ON_FORM_SUBMIT_START, LifeCycleTypes.ON_FIELD_SUBMIT_START);
  } else {
    if (target.submitting !== submitting) {
      target.submitting = submitting;
    }
    notify(target, LifeCycleTypes.ON_FORM_SUBMIT_END, LifeCycleTypes.ON_FIELD_SUBMIT_END);
  }
};
var setLoading = function(target, loading) {
  clearTimeout(target.requests.loading);
  if (loading) {
    target.requests.loading = setTimeout(function() {
      batch(function() {
        target.loading = loading;
        notify(target, LifeCycleTypes.ON_FORM_LOADING, LifeCycleTypes.ON_FIELD_LOADING);
      });
    }, RESPONSE_REQUEST_DURATION);
  } else if (target.loading !== loading) {
    target.loading = loading;
  }
};
var batchSubmit = function(target, onSubmit) {
  return __awaiter4(void 0, void 0, void 0, function() {
    var getValues, e_1, results, e_2;
    return __generator4(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          getValues = function(target2) {
            if (isForm(target2)) {
              return toJS(target2.values);
            }
            return toJS(target2.value);
          };
          target.setSubmitting(true);
          _a2.label = 1;
        case 1:
          _a2.trys.push([1, 3, , 4]);
          notify(target, LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_START, LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_START);
          return [4, target.validate()];
        case 2:
          _a2.sent();
          notify(target, LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_SUCCESS, LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_SUCCESS);
          return [3, 4];
        case 3:
          e_1 = _a2.sent();
          notify(target, LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_FAILED, LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_FAILED);
          return [3, 4];
        case 4:
          notify(target, LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_END, LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_END);
          _a2.label = 5;
        case 5:
          _a2.trys.push([5, 9, , 10]);
          if (target.invalid) {
            throw target.errors;
          }
          if (!isFn(onSubmit)) return [3, 7];
          return [4, onSubmit(getValues(target))];
        case 6:
          results = _a2.sent();
          return [3, 8];
        case 7:
          results = getValues(target);
          _a2.label = 8;
        case 8:
          notify(target, LifeCycleTypes.ON_FORM_SUBMIT_SUCCESS, LifeCycleTypes.ON_FIELD_SUBMIT_SUCCESS);
          return [3, 10];
        case 9:
          e_2 = _a2.sent();
          target.setSubmitting(false);
          notify(target, LifeCycleTypes.ON_FORM_SUBMIT_FAILED, LifeCycleTypes.ON_FIELD_SUBMIT_FAILED);
          notify(target, LifeCycleTypes.ON_FORM_SUBMIT, LifeCycleTypes.ON_FIELD_SUBMIT);
          throw e_2;
        case 10:
          target.setSubmitting(false);
          notify(target, LifeCycleTypes.ON_FORM_SUBMIT, LifeCycleTypes.ON_FIELD_SUBMIT);
          return [2, results];
      }
    });
  });
};
var shouldValidate = function(field) {
  var _a2, _b, _c, _d;
  var validatePattern = (_b = (_a2 = field.props.validatePattern) !== null && _a2 !== void 0 ? _a2 : field.form.props.validatePattern) !== null && _b !== void 0 ? _b : ["editable"];
  var validateDisplay = (_d = (_c = field.props.validateDisplay) !== null && _c !== void 0 ? _c : field.form.props.validateDisplay) !== null && _d !== void 0 ? _d : ["visible"];
  return validatePattern.includes(field.pattern) && validateDisplay.includes(field.display);
};
var batchValidate = function(target, pattern, triggerType) {
  return __awaiter4(void 0, void 0, void 0, function() {
    var tasks;
    return __generator4(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          if (isForm(target))
            target.setValidating(true);
          else {
            if (!shouldValidate(target))
              return [
                2
                /*return*/
              ];
          }
          tasks = [];
          target.query(pattern).forEach(function(field) {
            if (!isVoidField(field)) {
              tasks.push(validateSelf(field, triggerType, field === target));
            }
          });
          return [4, Promise.all(tasks)];
        case 1:
          _a2.sent();
          if (isForm(target))
            target.setValidating(false);
          if (target.invalid) {
            notify(target, LifeCycleTypes.ON_FORM_VALIDATE_FAILED, LifeCycleTypes.ON_FIELD_VALIDATE_FAILED);
            throw target.errors;
          }
          notify(target, LifeCycleTypes.ON_FORM_VALIDATE_SUCCESS, LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS);
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
var batchReset = function(target, pattern, options) {
  return __awaiter4(void 0, void 0, void 0, function() {
    var tasks;
    return __generator4(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          tasks = [];
          target.query(pattern).forEach(function(field) {
            if (!isVoidField(field)) {
              tasks.push(resetSelf(field, options, target === field));
            }
          });
          if (isForm(target)) {
            target.modified = false;
          }
          notify(target, LifeCycleTypes.ON_FORM_RESET, LifeCycleTypes.ON_FIELD_RESET);
          return [4, Promise.all(tasks)];
        case 1:
          _a2.sent();
          return [
            2
            /*return*/
          ];
      }
    });
  });
};
var validateSelf = batch.bound(function(target, triggerType, noEmit) {
  if (noEmit === void 0) {
    noEmit = false;
  }
  return __awaiter4(void 0, void 0, void 0, function() {
    var start, end, allTriggerTypes, results_1, i, payload, results;
    return __generator4(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          start = function() {
            setValidating(target, true);
          };
          end = function() {
            setValidating(target, false);
            if (noEmit)
              return;
            if (target.selfValid) {
              target.notify(LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS);
            } else {
              target.notify(LifeCycleTypes.ON_FIELD_VALIDATE_FAILED);
            }
          };
          if (!shouldValidate(target))
            return [2, {}];
          start();
          if (!!triggerType) return [3, 5];
          allTriggerTypes = parseValidatorDescriptions(target.validator).reduce(function(types, desc) {
            return types.indexOf(desc.triggerType) > -1 ? types : types.concat(desc.triggerType);
          }, []);
          results_1 = {};
          i = 0;
          _a2.label = 1;
        case 1:
          if (!(i < allTriggerTypes.length)) return [3, 4];
          return [4, validateToFeedbacks(target, allTriggerTypes[i])];
        case 2:
          payload = _a2.sent();
          each(payload, function(result, key) {
            results_1[key] = results_1[key] || [];
            results_1[key] = results_1[key].concat(result);
          });
          _a2.label = 3;
        case 3:
          i++;
          return [3, 1];
        case 4:
          end();
          return [2, results_1];
        case 5:
          return [4, validateToFeedbacks(target, triggerType)];
        case 6:
          results = _a2.sent();
          end();
          return [2, results];
      }
    });
  });
});
var resetSelf = batch.bound(function(target, options, noEmit) {
  if (noEmit === void 0) {
    noEmit = false;
  }
  return __awaiter4(void 0, void 0, void 0, function() {
    var typedDefaultValue, initialValue;
    return __generator4(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          typedDefaultValue = getTypedDefaultValue(target);
          target.modified = false;
          target.selfModified = false;
          target.visited = false;
          target.feedbacks = [];
          target.inputValue = typedDefaultValue;
          target.inputValues = [];
          target.caches = {};
          if (!isUndef(target.value)) {
            if (options === null || options === void 0 ? void 0 : options.forceClear) {
              target.value = typedDefaultValue;
            } else {
              initialValue = target.initialValue;
              target.value = toJS(!isUndef(initialValue) ? initialValue : typedDefaultValue);
            }
          }
          if (!noEmit) {
            target.notify(LifeCycleTypes.ON_FIELD_RESET);
          }
          if (!(options === null || options === void 0 ? void 0 : options.validate)) return [3, 2];
          return [4, validateSelf(target)];
        case 1:
          return [2, _a2.sent()];
        case 2:
          return [
            2
            /*return*/
          ];
      }
    });
  });
});
var modifySelf = function(target) {
  if (target.selfModified)
    return;
  target.selfModified = true;
  target.modified = true;
  var parent = target.parent;
  while (parent) {
    if (isDataField(parent)) {
      if (parent.modified)
        return;
      parent.modified = true;
    }
    parent = parent.parent;
  }
  target.form.modified = true;
};
var getValidFormValues = function(values) {
  if (isObservable(values))
    return values;
  return clone(values || {});
};
var getValidFieldDefaultValue = function(value, initialValue) {
  if (allowAssignDefaultValue(value, initialValue))
    return clone(initialValue);
  return value;
};
var allowAssignDefaultValue = function(target, source) {
  var isValidTarget = !isUndef(target);
  var isValidSource = !isUndef(source);
  if (!isValidTarget) {
    return isValidSource;
  }
  if (typeof target === typeof source) {
    if (target === "")
      return false;
    if (target === 0)
      return false;
  }
  var isEmptyTarget = target !== null && isEmpty(target, true);
  var isEmptySource = source !== null && isEmpty(source, true);
  if (isEmptyTarget) {
    return !isEmptySource;
  }
  return false;
};
var createReactions = function(field) {
  var reactions = toArr(field.props.reactions);
  field.form.addEffects(field, function() {
    reactions.forEach(function(reaction2) {
      if (isFn(reaction2)) {
        field.disposers.push(autorun(batch.scope.bound(function() {
          if (field.destroyed)
            return;
          reaction2(field);
        })));
      }
    });
  });
};
var createReaction = function(tracker, scheduler) {
  return reaction(tracker, untracked.bound(scheduler));
};
var initializeStart = function() {
  GlobalState.initializing = true;
};
var initializeEnd = function() {
  batch.endpoint(function() {
    GlobalState.initializing = false;
  });
};
var getArrayParent = function(field, index) {
  if (index === void 0) {
    index = field.index;
  }
  if (index > -1) {
    var parent_2 = field.parent;
    while (parent_2) {
      if (isArrayField(parent_2))
        return parent_2;
      if (parent_2 === field.form)
        return;
      parent_2 = parent_2.parent;
    }
  }
};
var getObjectParent = function(field) {
  var parent = field.parent;
  while (parent) {
    if (isArrayField(parent))
      return;
    if (isObjectField(parent))
      return parent;
    if (parent === field.form)
      return;
    parent = parent.parent;
  }
};

// node_modules/@formily/core/esm/models/Query.js
var output = function(field, taker) {
  if (!field)
    return;
  if (isFn(taker)) {
    return taker(field, field.address);
  }
  return field;
};
var takeMatchPattern = function(form, pattern) {
  var identifier = pattern.toString();
  var indexIdentifier = form.indexes[identifier];
  var absoluteField = form.fields[identifier];
  var indexField = form.fields[indexIdentifier];
  if (absoluteField) {
    return identifier;
  } else if (indexField) {
    return indexIdentifier;
  }
};
var Query = (
  /** @class */
  function() {
    function Query2(props) {
      var _this = this;
      this.addresses = [];
      this.pattern = Path.parse(props.pattern, props.base);
      this.form = props.form;
      if (!this.pattern.isMatchPattern) {
        var matched = takeMatchPattern(this.form, this.pattern.haveRelativePattern ? buildDataPath(props.form.fields, this.pattern) : this.pattern);
        if (matched) {
          this.addresses = [matched];
        }
      } else {
        each(this.form.fields, function(field, address) {
          if (!field) {
            delete _this.form.fields[address];
            return;
          }
          if (field.match(_this.pattern)) {
            _this.addresses.push(address);
          }
        });
      }
    }
    Query2.prototype.take = function(taker) {
      return output(this.form.fields[this.addresses[0]], taker);
    };
    Query2.prototype.map = function(iterator) {
      var _this = this;
      return this.addresses.map(function(address) {
        return output(_this.form.fields[address], iterator);
      });
    };
    Query2.prototype.forEach = function(iterator) {
      var _this = this;
      return this.addresses.forEach(function(address) {
        return output(_this.form.fields[address], iterator);
      });
    };
    Query2.prototype.reduce = function(reducer, initial) {
      var _this = this;
      return this.addresses.reduce(function(value, address) {
        return output(_this.form.fields[address], function(field, address2) {
          return reducer(value, field, address2);
        });
      }, initial);
    };
    Query2.prototype.get = function(key) {
      var results = this.take();
      if (results) {
        return results[key];
      }
    };
    Query2.prototype.getIn = function(pattern) {
      return Path.getIn(this.take(), pattern);
    };
    Query2.prototype.value = function() {
      return this.get("value");
    };
    Query2.prototype.initialValue = function() {
      return this.get("initialValue");
    };
    return Query2;
  }()
);

// node_modules/@formily/core/esm/models/BaseField.js
var __read4 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray4 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var BaseField = (
  /** @class */
  function() {
    function BaseField2() {
      var _this = this;
      this.disposers = [];
      this.actions = {};
      this.setTitle = function(title) {
        _this.title = title;
      };
      this.setDescription = function(description) {
        _this.description = description;
      };
      this.setDisplay = function(type) {
        _this.display = type;
      };
      this.setPattern = function(type) {
        _this.pattern = type;
      };
      this.setComponent = function(component, props) {
        if (component) {
          _this.componentType = component;
        }
        if (props) {
          _this.componentProps = _this.componentProps || {};
          Object.assign(_this.componentProps, props);
        }
      };
      this.setComponentProps = function(props) {
        if (props) {
          _this.componentProps = _this.componentProps || {};
          Object.assign(_this.componentProps, props);
        }
      };
      this.setDecorator = function(component, props) {
        if (component) {
          _this.decoratorType = component;
        }
        if (props) {
          _this.decoratorProps = _this.decoratorProps || {};
          Object.assign(_this.decoratorProps, props);
        }
      };
      this.setDecoratorProps = function(props) {
        if (props) {
          _this.decoratorProps = _this.decoratorProps || {};
          Object.assign(_this.decoratorProps, props);
        }
      };
      this.setData = function(data) {
        _this.data = data;
      };
      this.setContent = function(content) {
        _this.content = content;
      };
      this.onInit = function() {
        _this.initialized = true;
        initFieldUpdate(_this);
        _this.notify(LifeCycleTypes.ON_FIELD_INIT);
      };
      this.onMount = function() {
        _this.mounted = true;
        _this.unmounted = false;
        _this.notify(LifeCycleTypes.ON_FIELD_MOUNT);
      };
      this.onUnmount = function() {
        _this.mounted = false;
        _this.unmounted = true;
        _this.notify(LifeCycleTypes.ON_FIELD_UNMOUNT);
      };
      this.query = function(pattern) {
        return new Query({
          pattern,
          base: _this.address,
          form: _this.form
        });
      };
      this.notify = function(type, payload) {
        return _this.form.notify(type, payload !== null && payload !== void 0 ? payload : _this);
      };
      this.dispose = function() {
        _this.disposers.forEach(function(dispose) {
          dispose();
        });
        _this.form.removeEffects(_this);
      };
      this.destroy = function(forceClear) {
        if (forceClear === void 0) {
          forceClear = true;
        }
        destroy(_this.form.fields, _this.address.toString(), forceClear);
      };
      this.match = function(pattern) {
        return Path.parse(pattern).matchAliasGroup(_this.address, _this.path);
      };
      this.inject = function(actions) {
        each(actions, function(action2, key) {
          if (isFn(action2)) {
            _this.actions[key] = action2;
          }
        });
      };
      this.invoke = function(name) {
        var _a2, _b;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        return (_b = (_a2 = _this.actions)[name]) === null || _b === void 0 ? void 0 : _b.call.apply(_b, __spreadArray4([_a2], __read4(args), false));
      };
    }
    BaseField2.prototype.locate = function(address) {
      this.form.fields[address.toString()] = this;
      locateNode(this, address);
    };
    Object.defineProperty(BaseField2.prototype, "indexes", {
      get: function() {
        return this.path.transform(/^\d+$/, function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          return args.map(function(index) {
            return Number(index);
          });
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "index", {
      get: function() {
        var _a2;
        return (_a2 = this.indexes[this.indexes.length - 1]) !== null && _a2 !== void 0 ? _a2 : -1;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "records", {
      get: function() {
        var array = getArrayParent(this);
        return array === null || array === void 0 ? void 0 : array.value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "record", {
      get: function() {
        var _a2;
        var obj = getObjectParent(this);
        if (obj) {
          return obj.value;
        }
        var index = this.index;
        var array = getArrayParent(this, index);
        if (array) {
          return (_a2 = array.value) === null || _a2 === void 0 ? void 0 : _a2[index];
        }
        return this.form.values;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "component", {
      get: function() {
        return [this.componentType, this.componentProps];
      },
      set: function(value) {
        var component = toArr(value);
        this.componentType = component[0];
        this.componentProps = component[1] || {};
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "decorator", {
      get: function() {
        return [this.decoratorType, this.decoratorProps];
      },
      set: function(value) {
        var decorator = toArr(value);
        this.decoratorType = decorator[0];
        this.decoratorProps = decorator[1] || {};
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "parent", {
      get: function() {
        var parent = this.address.parent();
        var identifier = parent.toString();
        while (!this.form.fields[identifier]) {
          parent = parent.parent();
          identifier = parent.toString();
          if (!identifier)
            return;
        }
        return this.form.fields[identifier];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "display", {
      get: function() {
        var _a2;
        var parentDisplay = (_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.display;
        if (parentDisplay && parentDisplay !== "visible") {
          if (this.selfDisplay && this.selfDisplay !== "visible")
            return this.selfDisplay;
          return parentDisplay;
        }
        if (isValid(this.selfDisplay))
          return this.selfDisplay;
        return parentDisplay || this.form.display || "visible";
      },
      set: function(display) {
        this.selfDisplay = display;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "pattern", {
      get: function() {
        var _a2;
        var parentPattern = ((_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.pattern) || this.form.pattern || "editable";
        var selfPattern = this.selfPattern;
        if (isValid(selfPattern)) {
          if (parentPattern === "readPretty" && selfPattern !== "editable") {
            return parentPattern;
          }
          return selfPattern;
        }
        return parentPattern;
      },
      set: function(pattern) {
        this.selfPattern = pattern;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "editable", {
      get: function() {
        return this.pattern === "editable";
      },
      set: function(editable) {
        if (!isValid(editable))
          return;
        if (editable) {
          this.pattern = "editable";
        } else {
          this.pattern = "readPretty";
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "disabled", {
      get: function() {
        return this.pattern === "disabled";
      },
      set: function(disabled) {
        if (!isValid(disabled))
          return;
        if (disabled) {
          this.pattern = "disabled";
        } else {
          this.pattern = "editable";
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "readOnly", {
      get: function() {
        return this.pattern === "readOnly";
      },
      set: function(readOnly) {
        if (!isValid(readOnly))
          return;
        if (readOnly) {
          this.pattern = "readOnly";
        } else {
          this.pattern = "editable";
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "readPretty", {
      get: function() {
        return this.pattern === "readPretty";
      },
      set: function(readPretty) {
        if (!isValid(readPretty))
          return;
        if (readPretty) {
          this.pattern = "readPretty";
        } else {
          this.pattern = "editable";
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "hidden", {
      get: function() {
        return this.display === "hidden";
      },
      set: function(hidden) {
        if (!isValid(hidden))
          return;
        if (hidden) {
          this.display = "hidden";
        } else {
          this.display = "visible";
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "visible", {
      get: function() {
        return this.display === "visible";
      },
      set: function(visible) {
        if (!isValid(visible))
          return;
        if (visible) {
          this.display = "visible";
        } else {
          this.display = "none";
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(BaseField2.prototype, "destroyed", {
      get: function() {
        return !this.form.fields[this.address.toString()];
      },
      enumerable: false,
      configurable: true
    });
    return BaseField2;
  }()
);

// node_modules/@formily/core/esm/models/Field.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __awaiter5 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator5 = function(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var Field = (
  /** @class */
  function(_super) {
    __extends3(Field2, _super);
    function Field2(address, props, form, designable) {
      var _this = _super.call(this) || this;
      _this.displayName = "Field";
      _this.caches = {};
      _this.requests = {};
      _this.setDataSource = function(dataSource) {
        _this.dataSource = dataSource;
      };
      _this.setFeedback = function(feedback) {
        updateFeedback(_this, feedback);
      };
      _this.setSelfErrors = function(messages) {
        _this.selfErrors = messages;
      };
      _this.setSelfWarnings = function(messages) {
        _this.selfWarnings = messages;
      };
      _this.setSelfSuccesses = function(messages) {
        _this.selfSuccesses = messages;
      };
      _this.setValidator = function(validator) {
        _this.validator = validator;
      };
      _this.setValidatorRule = function(name, value) {
        setValidatorRule(_this, name, value);
      };
      _this.setRequired = function(required) {
        _this.required = required;
      };
      _this.setValue = function(value) {
        if (_this.destroyed)
          return;
        if (!_this.initialized) {
          if (_this.display === "none") {
            _this.caches.value = value;
            return;
          }
          value = getValidFieldDefaultValue(value, _this.initialValue);
          if (!allowAssignDefaultValue(_this.value, value) && !_this.designable) {
            return;
          }
        }
        _this.form.setValuesIn(_this.path, value);
      };
      _this.setInitialValue = function(initialValue) {
        if (_this.destroyed)
          return;
        if (!_this.initialized) {
          if (!allowAssignDefaultValue(_this.initialValue, initialValue) && !_this.designable) {
            return;
          }
        }
        _this.form.setInitialValuesIn(_this.path, initialValue);
      };
      _this.setLoading = function(loading) {
        setLoading(_this, loading);
      };
      _this.setValidating = function(validating) {
        setValidating(_this, validating);
      };
      _this.setSubmitting = function(submitting) {
        setSubmitting(_this, submitting);
      };
      _this.setState = createStateSetter(_this);
      _this.getState = createStateGetter(_this);
      _this.onInput = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return __awaiter5(_this, void 0, void 0, function() {
          var isHTMLInputEventFromSelf, getValues, values, value;
          return __generator5(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                isHTMLInputEventFromSelf = function(args2) {
                  var _a3, _b;
                  return isHTMLInputEvent(args2[0]) && "currentTarget" in args2[0] ? ((_a3 = args2[0]) === null || _a3 === void 0 ? void 0 : _a3.target) === ((_b = args2[0]) === null || _b === void 0 ? void 0 : _b.currentTarget) : true;
                };
                getValues = function(args2) {
                  var _a3;
                  if ((_a3 = args2[0]) === null || _a3 === void 0 ? void 0 : _a3.target) {
                    if (!isHTMLInputEvent(args2[0]))
                      return args2;
                  }
                  return getValuesFromEvent(args2);
                };
                if (!isHTMLInputEventFromSelf(args))
                  return [
                    2
                    /*return*/
                  ];
                values = getValues(args);
                value = values[0];
                this.caches.inputting = true;
                this.inputValue = value;
                this.inputValues = values;
                this.value = value;
                this.modify();
                this.notify(LifeCycleTypes.ON_FIELD_INPUT_VALUE_CHANGE);
                this.notify(LifeCycleTypes.ON_FORM_INPUT_CHANGE, this.form);
                return [4, validateSelf(this, "onInput")];
              case 1:
                _a2.sent();
                this.caches.inputting = false;
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      _this.onFocus = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return __awaiter5(_this, void 0, void 0, function() {
          var _a2;
          return __generator5(this, function(_b) {
            switch (_b.label) {
              case 0:
                if ((_a2 = args[0]) === null || _a2 === void 0 ? void 0 : _a2.target) {
                  if (!isHTMLInputEvent(args[0], false))
                    return [
                      2
                      /*return*/
                    ];
                }
                this.active = true;
                this.visited = true;
                return [4, validateSelf(this, "onFocus")];
              case 1:
                _b.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      _this.onBlur = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return __awaiter5(_this, void 0, void 0, function() {
          var _a2;
          return __generator5(this, function(_b) {
            switch (_b.label) {
              case 0:
                if ((_a2 = args[0]) === null || _a2 === void 0 ? void 0 : _a2.target) {
                  if (!isHTMLInputEvent(args[0], false))
                    return [
                      2
                      /*return*/
                    ];
                }
                this.active = false;
                return [4, validateSelf(this, "onBlur")];
              case 1:
                _b.sent();
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      };
      _this.validate = function(triggerType) {
        return batchValidate(_this, "".concat(_this.address, ".**"), triggerType);
      };
      _this.submit = function(onSubmit) {
        return batchSubmit(_this, onSubmit);
      };
      _this.reset = function(options) {
        return batchReset(_this, "".concat(_this.address, ".**"), options);
      };
      _this.queryFeedbacks = function(search) {
        return queryFeedbacks(_this, search);
      };
      _this.modify = function() {
        return modifySelf(_this);
      };
      _this.form = form;
      _this.props = props;
      _this.designable = designable;
      initializeStart();
      _this.locate(address);
      _this.initialize();
      _this.makeObservable();
      _this.makeReactive();
      _this.onInit();
      initializeEnd();
      return _this;
    }
    Field2.prototype.initialize = function() {
      this.initialized = false;
      this.loading = false;
      this.validating = false;
      this.submitting = false;
      this.selfModified = false;
      this.active = false;
      this.visited = false;
      this.mounted = false;
      this.unmounted = false;
      this.inputValues = [];
      this.inputValue = null;
      this.feedbacks = [];
      this.title = this.props.title;
      this.description = this.props.description;
      this.display = this.props.display;
      this.pattern = this.props.pattern;
      this.editable = this.props.editable;
      this.disabled = this.props.disabled;
      this.readOnly = this.props.readOnly;
      this.readPretty = this.props.readPretty;
      this.visible = this.props.visible;
      this.hidden = this.props.hidden;
      this.dataSource = this.props.dataSource;
      this.validator = this.props.validator;
      this.required = this.props.required;
      this.content = this.props.content;
      this.initialValue = this.props.initialValue;
      this.value = this.props.value;
      this.data = this.props.data;
      this.decorator = toArr(this.props.decorator);
      this.component = toArr(this.props.component);
    };
    Field2.prototype.makeObservable = function() {
      if (this.designable)
        return;
      define(this, {
        path: observable2.ref,
        title: observable2.ref,
        description: observable2.ref,
        dataSource: observable2.ref,
        selfDisplay: observable2.ref,
        selfPattern: observable2.ref,
        loading: observable2.ref,
        validating: observable2.ref,
        submitting: observable2.ref,
        selfModified: observable2.ref,
        modified: observable2.ref,
        active: observable2.ref,
        visited: observable2.ref,
        initialized: observable2.ref,
        mounted: observable2.ref,
        unmounted: observable2.ref,
        inputValue: observable2.ref,
        inputValues: observable2.ref,
        decoratorType: observable2.ref,
        componentType: observable2.ref,
        content: observable2.ref,
        feedbacks: observable2.ref,
        decoratorProps: observable2,
        componentProps: observable2,
        validator: observable2.shallow,
        data: observable2.shallow,
        component: observable2.computed,
        decorator: observable2.computed,
        errors: observable2.computed,
        warnings: observable2.computed,
        successes: observable2.computed,
        valid: observable2.computed,
        invalid: observable2.computed,
        selfErrors: observable2.computed,
        selfWarnings: observable2.computed,
        selfSuccesses: observable2.computed,
        selfValid: observable2.computed,
        selfInvalid: observable2.computed,
        validateStatus: observable2.computed,
        value: observable2.computed,
        initialValue: observable2.computed,
        display: observable2.computed,
        pattern: observable2.computed,
        required: observable2.computed,
        hidden: observable2.computed,
        visible: observable2.computed,
        disabled: observable2.computed,
        readOnly: observable2.computed,
        readPretty: observable2.computed,
        editable: observable2.computed,
        indexes: observable2.computed,
        setDisplay: action,
        setTitle: action,
        setDescription: action,
        setDataSource: action,
        setValue: action,
        setPattern: action,
        setInitialValue: action,
        setLoading: action,
        setValidating: action,
        setFeedback: action,
        setSelfErrors: action,
        setSelfWarnings: action,
        setSelfSuccesses: action,
        setValidator: action,
        setRequired: action,
        setComponent: action,
        setComponentProps: action,
        setDecorator: action,
        setDecoratorProps: action,
        setData: action,
        setContent: action,
        validate: action,
        reset: action,
        onInit: batch,
        onInput: batch,
        onMount: batch,
        onUnmount: batch,
        onFocus: batch,
        onBlur: batch
      });
    };
    Field2.prototype.makeReactive = function() {
      var _this = this;
      if (this.designable)
        return;
      this.disposers.push(createReaction(function() {
        return _this.value;
      }, function(value) {
        _this.notify(LifeCycleTypes.ON_FIELD_VALUE_CHANGE);
        if (isValid(value)) {
          if (_this.selfModified && !_this.caches.inputting) {
            validateSelf(_this);
          }
          if (!isEmpty(value) && _this.display === "none") {
            _this.caches.value = toJS(value);
            _this.form.deleteValuesIn(_this.path);
          }
        }
      }), createReaction(function() {
        return _this.initialValue;
      }, function() {
        _this.notify(LifeCycleTypes.ON_FIELD_INITIAL_VALUE_CHANGE);
      }), createReaction(function() {
        return _this.display;
      }, function(display) {
        var _a2;
        var value = _this.value;
        if (display !== "none") {
          if (value === void 0 && _this.caches.value !== void 0) {
            _this.setValue(_this.caches.value);
            _this.caches.value = void 0;
          }
        } else {
          _this.caches.value = (_a2 = toJS(value)) !== null && _a2 !== void 0 ? _a2 : toJS(_this.initialValue);
          _this.form.deleteValuesIn(_this.path);
        }
        if (display === "none" || display === "hidden") {
          _this.setFeedback({
            type: "error",
            messages: []
          });
        }
      }), createReaction(function() {
        return _this.pattern;
      }, function(pattern) {
        if (pattern !== "editable") {
          _this.setFeedback({
            type: "error",
            messages: []
          });
        }
      }));
      createReactions(this);
    };
    Object.defineProperty(Field2.prototype, "selfErrors", {
      get: function() {
        return queryFeedbackMessages(this, {
          type: "error"
        });
      },
      set: function(messages) {
        this.setFeedback({
          type: "error",
          code: "EffectError",
          messages
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "errors", {
      get: function() {
        return this.form.errors.filter(createChildrenFeedbackFilter(this));
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "selfWarnings", {
      get: function() {
        return queryFeedbackMessages(this, {
          type: "warning"
        });
      },
      set: function(messages) {
        this.setFeedback({
          type: "warning",
          code: "EffectWarning",
          messages
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "warnings", {
      get: function() {
        return this.form.warnings.filter(createChildrenFeedbackFilter(this));
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "selfSuccesses", {
      get: function() {
        return queryFeedbackMessages(this, {
          type: "success"
        });
      },
      set: function(messages) {
        this.setFeedback({
          type: "success",
          code: "EffectSuccess",
          messages
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "successes", {
      get: function() {
        return this.form.successes.filter(createChildrenFeedbackFilter(this));
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "selfValid", {
      get: function() {
        return !this.selfErrors.length;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "valid", {
      get: function() {
        return !this.errors.length;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "selfInvalid", {
      get: function() {
        return !this.selfValid;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "invalid", {
      get: function() {
        return !this.valid;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "value", {
      get: function() {
        return this.form.getValuesIn(this.path);
      },
      set: function(value) {
        this.setValue(value);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "initialValue", {
      get: function() {
        return this.form.getInitialValuesIn(this.path);
      },
      set: function(initialValue) {
        this.setInitialValue(initialValue);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "required", {
      get: function() {
        var validators = isArr(this.validator) ? this.validator : parseValidatorDescriptions(this.validator);
        return validators.some(function(desc) {
          return !!(desc === null || desc === void 0 ? void 0 : desc["required"]);
        });
      },
      set: function(required) {
        if (this.required === required)
          return;
        this.setValidatorRule("required", required);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Field2.prototype, "validateStatus", {
      get: function() {
        if (this.validating)
          return "validating";
        if (this.selfInvalid)
          return "error";
        if (this.selfWarnings.length)
          return "warning";
        if (this.selfSuccesses.length)
          return "success";
      },
      enumerable: false,
      configurable: true
    });
    return Field2;
  }(BaseField)
);

// node_modules/@formily/core/esm/shared/effective.js
var __read5 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray5 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var createEffectHook = function(type, callback) {
  return function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (GlobalState.effectStart) {
      GlobalState.lifecycles.push(new LifeCycle(type, function(payload, ctx) {
        if (isFn(callback)) {
          callback.apply(void 0, __spreadArray5([payload, ctx], __read5(GlobalState.context), false)).apply(void 0, __spreadArray5([], __read5(args), false));
        }
      }));
    } else {
      throw new Error("Effect hooks cannot be used in asynchronous function body");
    }
  };
};
var createEffectContext = function(defaultValue) {
  var index;
  return {
    provide: function(value) {
      if (GlobalState.effectStart) {
        index = GlobalState.context.length;
        GlobalState.context[index] = isValid(value) ? value : defaultValue;
      } else {
        throw new Error("Provide method cannot be used in asynchronous function body");
      }
    },
    consume: function() {
      if (!GlobalState.effectStart) {
        throw new Error("Consume method cannot be used in asynchronous function body");
      }
      return GlobalState.context[index];
    }
  };
};
var FormEffectContext = createEffectContext();
var useEffectForm = FormEffectContext.consume;
var runEffects = function(context) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  GlobalState.lifecycles = [];
  GlobalState.context = [];
  GlobalState.effectStart = true;
  GlobalState.effectEnd = false;
  if (isForm(context)) {
    FormEffectContext.provide(context);
  }
  args.forEach(function(effects) {
    if (isFn(effects)) {
      effects(context);
    }
  });
  GlobalState.context = [];
  GlobalState.effectStart = false;
  GlobalState.effectEnd = true;
  return GlobalState.lifecycles;
};

// node_modules/@formily/core/esm/models/ArrayField.js
var __extends4 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __read6 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray6 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var ArrayField = (
  /** @class */
  function(_super) {
    __extends4(ArrayField2, _super);
    function ArrayField2(address, props, form, designable) {
      var _this = _super.call(this, address, props, form, designable) || this;
      _this.displayName = "ArrayField";
      _this.push = function() {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          items[_i] = arguments[_i];
        }
        return action(function() {
          var _a2;
          if (!isArr(_this.value)) {
            _this.value = [];
          }
          (_a2 = _this.value).push.apply(_a2, __spreadArray6([], __read6(items), false));
          return _this.onInput(_this.value);
        });
      };
      _this.pop = function() {
        if (!isArr(_this.value))
          return;
        return action(function() {
          var index = _this.value.length - 1;
          spliceArrayState(_this, {
            startIndex: index,
            deleteCount: 1
          });
          _this.value.pop();
          return _this.onInput(_this.value);
        });
      };
      _this.insert = function(index) {
        var items = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          items[_i - 1] = arguments[_i];
        }
        return action(function() {
          var _a2;
          if (!isArr(_this.value)) {
            _this.value = [];
          }
          if (items.length === 0) {
            return;
          }
          spliceArrayState(_this, {
            startIndex: index,
            insertCount: items.length
          });
          (_a2 = _this.value).splice.apply(_a2, __spreadArray6([index, 0], __read6(items), false));
          return _this.onInput(_this.value);
        });
      };
      _this.remove = function(index) {
        if (!isArr(_this.value))
          return;
        return action(function() {
          spliceArrayState(_this, {
            startIndex: index,
            deleteCount: 1
          });
          _this.value.splice(index, 1);
          return _this.onInput(_this.value);
        });
      };
      _this.shift = function() {
        if (!isArr(_this.value))
          return;
        return action(function() {
          _this.value.shift();
          return _this.onInput(_this.value);
        });
      };
      _this.unshift = function() {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          items[_i] = arguments[_i];
        }
        return action(function() {
          var _a2;
          if (!isArr(_this.value)) {
            _this.value = [];
          }
          spliceArrayState(_this, {
            startIndex: 0,
            insertCount: items.length
          });
          (_a2 = _this.value).unshift.apply(_a2, __spreadArray6([], __read6(items), false));
          return _this.onInput(_this.value);
        });
      };
      _this.move = function(fromIndex, toIndex) {
        if (!isArr(_this.value))
          return;
        if (fromIndex === toIndex)
          return;
        return action(function() {
          move(_this.value, fromIndex, toIndex);
          exchangeArrayState(_this, {
            fromIndex,
            toIndex
          });
          return _this.onInput(_this.value);
        });
      };
      _this.moveUp = function(index) {
        if (!isArr(_this.value))
          return;
        return _this.move(index, index - 1 < 0 ? _this.value.length - 1 : index - 1);
      };
      _this.moveDown = function(index) {
        if (!isArr(_this.value))
          return;
        return _this.move(index, index + 1 >= _this.value.length ? 0 : index + 1);
      };
      _this.makeAutoCleanable();
      return _this;
    }
    ArrayField2.prototype.makeAutoCleanable = function() {
      var _this = this;
      this.disposers.push(reaction(function() {
        var _a2;
        return (_a2 = _this.value) === null || _a2 === void 0 ? void 0 : _a2.length;
      }, function(newLength, oldLength) {
        if (oldLength && !newLength) {
          cleanupArrayChildren(_this, 0);
        } else if (newLength < oldLength) {
          cleanupArrayChildren(_this, newLength);
        }
      }));
    };
    return ArrayField2;
  }(Field)
);

// node_modules/@formily/core/esm/models/ObjectField.js
var __extends5 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ObjectField = (
  /** @class */
  function(_super) {
    __extends5(ObjectField2, _super);
    function ObjectField2(address, props, form, designable) {
      var _this = _super.call(this, address, props, form, designable) || this;
      _this.displayName = "ObjectField";
      _this.additionalProperties = [];
      _this.addProperty = function(key, value) {
        _this.form.setValuesIn(_this.path.concat(key), value);
        _this.additionalProperties.push(key);
        return _this.onInput(_this.value);
      };
      _this.removeProperty = function(key) {
        _this.form.deleteValuesIn(_this.path.concat(key));
        _this.additionalProperties.splice(_this.additionalProperties.indexOf(key), 1);
        return _this.onInput(_this.value);
      };
      _this.existProperty = function(key) {
        return _this.form.existValuesIn(_this.path.concat(key));
      };
      _this.makeAutoCleanable();
      return _this;
    }
    ObjectField2.prototype.makeAutoCleanable = function() {
      var _this = this;
      this.disposers.push(reaction(function() {
        return Object.keys(_this.value || {});
      }, function(newKeys) {
        var filterKeys = _this.additionalProperties.filter(function(key) {
          return !newKeys.includes(key);
        });
        cleanupObjectChildren(_this, filterKeys);
      }));
    };
    return ObjectField2;
  }(Field)
);

// node_modules/@formily/core/esm/models/VoidField.js
var __extends6 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var VoidField = (
  /** @class */
  function(_super) {
    __extends6(VoidField2, _super);
    function VoidField2(address, props, form, designable) {
      var _this = _super.call(this) || this;
      _this.displayName = "VoidField";
      _this.setState = createStateSetter(_this);
      _this.getState = createStateGetter(_this);
      _this.form = form;
      _this.props = props;
      _this.designable = designable;
      initializeStart();
      _this.locate(address);
      _this.initialize();
      _this.makeObservable();
      _this.makeReactive();
      _this.onInit();
      initializeEnd();
      return _this;
    }
    VoidField2.prototype.initialize = function() {
      this.mounted = false;
      this.unmounted = false;
      this.initialized = false;
      this.title = this.props.title;
      this.description = this.props.description;
      this.pattern = this.props.pattern;
      this.display = this.props.display;
      this.hidden = this.props.hidden;
      this.editable = this.props.editable;
      this.disabled = this.props.disabled;
      this.readOnly = this.props.readOnly;
      this.readPretty = this.props.readPretty;
      this.visible = this.props.visible;
      this.content = this.props.content;
      this.data = this.props.data;
      this.decorator = toArr(this.props.decorator);
      this.component = toArr(this.props.component);
    };
    VoidField2.prototype.makeObservable = function() {
      if (this.designable)
        return;
      define(this, {
        path: observable2.ref,
        title: observable2.ref,
        description: observable2.ref,
        selfDisplay: observable2.ref,
        selfPattern: observable2.ref,
        initialized: observable2.ref,
        mounted: observable2.ref,
        unmounted: observable2.ref,
        decoratorType: observable2.ref,
        componentType: observable2.ref,
        content: observable2.ref,
        data: observable2.shallow,
        decoratorProps: observable2,
        componentProps: observable2,
        display: observable2.computed,
        pattern: observable2.computed,
        hidden: observable2.computed,
        visible: observable2.computed,
        disabled: observable2.computed,
        readOnly: observable2.computed,
        readPretty: observable2.computed,
        editable: observable2.computed,
        component: observable2.computed,
        decorator: observable2.computed,
        indexes: observable2.computed,
        setTitle: action,
        setDescription: action,
        setDisplay: action,
        setPattern: action,
        setComponent: action,
        setComponentProps: action,
        setDecorator: action,
        setDecoratorProps: action,
        setData: action,
        setContent: action,
        onInit: batch,
        onMount: batch,
        onUnmount: batch
      });
    };
    VoidField2.prototype.makeReactive = function() {
      if (this.designable)
        return;
      createReactions(this);
    };
    return VoidField2;
  }(BaseField)
);

// node_modules/@formily/core/esm/models/Form.js
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var DEV_TOOLS_HOOK = "__FORMILY_DEV_TOOLS_HOOK__";
var Form = (
  /** @class */
  function() {
    function Form2(props) {
      var _this = this;
      this.displayName = "Form";
      this.fields = {};
      this.requests = {};
      this.indexes = {};
      this.disposers = [];
      this.createField = function(props2) {
        var address = Path.parse(props2.basePath).concat(props2.name);
        var identifier = address.toString();
        if (!identifier)
          return;
        if (!_this.fields[identifier] || _this.props.designable) {
          batch(function() {
            new Field(address, props2, _this, _this.props.designable);
          });
          _this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
        }
        return _this.fields[identifier];
      };
      this.createArrayField = function(props2) {
        var address = Path.parse(props2.basePath).concat(props2.name);
        var identifier = address.toString();
        if (!identifier)
          return;
        if (!_this.fields[identifier] || _this.props.designable) {
          batch(function() {
            new ArrayField(address, __assign8(__assign8({}, props2), { value: isArr(props2.value) ? props2.value : [] }), _this, _this.props.designable);
          });
          _this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
        }
        return _this.fields[identifier];
      };
      this.createObjectField = function(props2) {
        var address = Path.parse(props2.basePath).concat(props2.name);
        var identifier = address.toString();
        if (!identifier)
          return;
        if (!_this.fields[identifier] || _this.props.designable) {
          batch(function() {
            new ObjectField(address, __assign8(__assign8({}, props2), { value: isObj(props2.value) ? props2.value : {} }), _this, _this.props.designable);
          });
          _this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
        }
        return _this.fields[identifier];
      };
      this.createVoidField = function(props2) {
        var address = Path.parse(props2.basePath).concat(props2.name);
        var identifier = address.toString();
        if (!identifier)
          return;
        if (!_this.fields[identifier] || _this.props.designable) {
          batch(function() {
            new VoidField(address, props2, _this, _this.props.designable);
          });
          _this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
        }
        return _this.fields[identifier];
      };
      this.setValues = function(values, strategy) {
        if (strategy === void 0) {
          strategy = "merge";
        }
        if (!isPlainObj(values))
          return;
        if (strategy === "merge" || strategy === "deepMerge") {
          merge(_this.values, values, {
            // never reach
            arrayMerge: function(target, source) {
              return source;
            },
            assign: true
          });
        } else if (strategy === "shallowMerge") {
          Object.assign(_this.values, values);
        } else {
          _this.values = values;
        }
      };
      this.setInitialValues = function(initialValues, strategy) {
        if (strategy === void 0) {
          strategy = "merge";
        }
        if (!isPlainObj(initialValues))
          return;
        if (strategy === "merge" || strategy === "deepMerge") {
          merge(_this.initialValues, initialValues, {
            // never reach
            arrayMerge: function(target, source) {
              return source;
            },
            assign: true
          });
        } else if (strategy === "shallowMerge") {
          Object.assign(_this.initialValues, initialValues);
        } else {
          _this.initialValues = initialValues;
        }
      };
      this.setValuesIn = function(pattern, value) {
        Path.setIn(_this.values, pattern, value);
      };
      this.deleteValuesIn = function(pattern) {
        Path.deleteIn(_this.values, pattern);
      };
      this.existValuesIn = function(pattern) {
        return Path.existIn(_this.values, pattern);
      };
      this.getValuesIn = function(pattern) {
        return Path.getIn(_this.values, pattern);
      };
      this.setInitialValuesIn = function(pattern, initialValue) {
        Path.setIn(_this.initialValues, pattern, initialValue);
      };
      this.deleteInitialValuesIn = function(pattern) {
        Path.deleteIn(_this.initialValues, pattern);
      };
      this.existInitialValuesIn = function(pattern) {
        return Path.existIn(_this.initialValues, pattern);
      };
      this.getInitialValuesIn = function(pattern) {
        return Path.getIn(_this.initialValues, pattern);
      };
      this.setLoading = function(loading) {
        setLoading(_this, loading);
      };
      this.setSubmitting = function(submitting) {
        setSubmitting(_this, submitting);
      };
      this.setValidating = function(validating) {
        setValidating(_this, validating);
      };
      this.setDisplay = function(display) {
        _this.display = display;
      };
      this.setPattern = function(pattern) {
        _this.pattern = pattern;
      };
      this.addEffects = function(id, effects) {
        if (!_this.heart.hasLifeCycles(id)) {
          _this.heart.addLifeCycles(id, runEffects(_this, effects));
        }
      };
      this.removeEffects = function(id) {
        _this.heart.removeLifeCycles(id);
      };
      this.setEffects = function(effects) {
        _this.heart.setLifeCycles(runEffects(_this, effects));
      };
      this.clearErrors = function(pattern) {
        if (pattern === void 0) {
          pattern = "*";
        }
        _this.query(pattern).forEach(function(field) {
          if (!isVoidField(field)) {
            field.setFeedback({
              type: "error",
              messages: []
            });
          }
        });
      };
      this.clearWarnings = function(pattern) {
        if (pattern === void 0) {
          pattern = "*";
        }
        _this.query(pattern).forEach(function(field) {
          if (!isVoidField(field)) {
            field.setFeedback({
              type: "warning",
              messages: []
            });
          }
        });
      };
      this.clearSuccesses = function(pattern) {
        if (pattern === void 0) {
          pattern = "*";
        }
        _this.query(pattern).forEach(function(field) {
          if (!isVoidField(field)) {
            field.setFeedback({
              type: "success",
              messages: []
            });
          }
        });
      };
      this.query = function(pattern) {
        return new Query({
          pattern,
          base: "",
          form: _this
        });
      };
      this.queryFeedbacks = function(search) {
        return _this.query(search.address || search.path || "*").reduce(function(messages, field) {
          if (isVoidField(field))
            return messages;
          return messages.concat(field.queryFeedbacks(search).map(function(feedback) {
            return __assign8(__assign8({}, feedback), { address: field.address.toString(), path: field.path.toString() });
          }).filter(function(feedback) {
            return feedback.messages.length > 0;
          }));
        }, []);
      };
      this.notify = function(type, payload) {
        _this.heart.publish(type, payload !== null && payload !== void 0 ? payload : _this);
      };
      this.subscribe = function(subscriber) {
        return _this.heart.subscribe(subscriber);
      };
      this.unsubscribe = function(id) {
        _this.heart.unsubscribe(id);
      };
      this.onInit = function() {
        _this.initialized = true;
        _this.notify(LifeCycleTypes.ON_FORM_INIT);
      };
      this.onMount = function() {
        _this.mounted = true;
        _this.notify(LifeCycleTypes.ON_FORM_MOUNT);
        if (globalThisPolyfill[DEV_TOOLS_HOOK] && !_this.props.designable) {
          globalThisPolyfill[DEV_TOOLS_HOOK].inject(_this.id, _this);
        }
      };
      this.onUnmount = function() {
        _this.notify(LifeCycleTypes.ON_FORM_UNMOUNT);
        _this.query("*").forEach(function(field) {
          return field.destroy(false);
        });
        _this.disposers.forEach(function(dispose) {
          return dispose();
        });
        _this.unmounted = true;
        _this.indexes = {};
        _this.heart.clear();
        if (globalThisPolyfill[DEV_TOOLS_HOOK] && !_this.props.designable) {
          globalThisPolyfill[DEV_TOOLS_HOOK].unmount(_this.id);
        }
      };
      this.setState = createStateSetter(this);
      this.getState = createStateGetter(this);
      this.setFormState = createStateSetter(this);
      this.getFormState = createStateGetter(this);
      this.setFieldState = createBatchStateSetter(this);
      this.getFieldState = createBatchStateGetter(this);
      this.getFormGraph = function() {
        return _this.graph.getGraph();
      };
      this.setFormGraph = function(graph) {
        _this.graph.setGraph(graph);
      };
      this.clearFormGraph = function(pattern, forceClear) {
        if (pattern === void 0) {
          pattern = "*";
        }
        if (forceClear === void 0) {
          forceClear = true;
        }
        _this.query(pattern).forEach(function(field) {
          field.destroy(forceClear);
        });
      };
      this.validate = function(pattern) {
        if (pattern === void 0) {
          pattern = "*";
        }
        return batchValidate(_this, pattern);
      };
      this.submit = function(onSubmit) {
        return batchSubmit(_this, onSubmit);
      };
      this.reset = function(pattern, options) {
        if (pattern === void 0) {
          pattern = "*";
        }
        return batchReset(_this, pattern, options);
      };
      this.initialize(props);
      this.makeObservable();
      this.makeReactive();
      this.makeValues();
      this.onInit();
    }
    Form2.prototype.initialize = function(props) {
      this.id = uid();
      this.props = __assign8({}, props);
      this.initialized = false;
      this.submitting = false;
      this.validating = false;
      this.loading = false;
      this.modified = false;
      this.mounted = false;
      this.unmounted = false;
      this.display = this.props.display || "visible";
      this.pattern = this.props.pattern || "editable";
      this.editable = this.props.editable;
      this.disabled = this.props.disabled;
      this.readOnly = this.props.readOnly;
      this.readPretty = this.props.readPretty;
      this.visible = this.props.visible;
      this.hidden = this.props.hidden;
      this.graph = new Graph(this);
      this.heart = new Heart({
        lifecycles: this.lifecycles,
        context: this
      });
    };
    Form2.prototype.makeValues = function() {
      this.values = getValidFormValues(this.props.values);
      this.initialValues = getValidFormValues(this.props.initialValues);
    };
    Form2.prototype.makeObservable = function() {
      define(this, {
        fields: observable2.shallow,
        indexes: observable2.shallow,
        initialized: observable2.ref,
        validating: observable2.ref,
        submitting: observable2.ref,
        loading: observable2.ref,
        modified: observable2.ref,
        pattern: observable2.ref,
        display: observable2.ref,
        mounted: observable2.ref,
        unmounted: observable2.ref,
        values: observable2,
        initialValues: observable2,
        valid: observable2.computed,
        invalid: observable2.computed,
        errors: observable2.computed,
        warnings: observable2.computed,
        successes: observable2.computed,
        hidden: observable2.computed,
        visible: observable2.computed,
        editable: observable2.computed,
        readOnly: observable2.computed,
        readPretty: observable2.computed,
        disabled: observable2.computed,
        setValues: action,
        setValuesIn: action,
        setInitialValues: action,
        setInitialValuesIn: action,
        setPattern: action,
        setDisplay: action,
        setState: action,
        deleteInitialValuesIn: action,
        deleteValuesIn: action,
        setSubmitting: action,
        setValidating: action,
        reset: action,
        submit: action,
        validate: action,
        onMount: batch,
        onUnmount: batch,
        onInit: batch
      });
    };
    Form2.prototype.makeReactive = function() {
      var _this = this;
      this.disposers.push(observe(this, function(change) {
        triggerFormInitialValuesChange(_this, change);
        triggerFormValuesChange(_this, change);
      }, true));
    };
    Object.defineProperty(Form2.prototype, "valid", {
      get: function() {
        return !this.invalid;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "invalid", {
      get: function() {
        return this.errors.length > 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "errors", {
      get: function() {
        return this.queryFeedbacks({
          type: "error"
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "warnings", {
      get: function() {
        return this.queryFeedbacks({
          type: "warning"
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "successes", {
      get: function() {
        return this.queryFeedbacks({
          type: "success"
        });
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "lifecycles", {
      get: function() {
        return runEffects(this, this.props.effects);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "hidden", {
      get: function() {
        return this.display === "hidden";
      },
      set: function(hidden) {
        if (!isValid(hidden))
          return;
        if (hidden) {
          this.display = "hidden";
        } else {
          this.display = "visible";
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "visible", {
      get: function() {
        return this.display === "visible";
      },
      set: function(visible) {
        if (!isValid(visible))
          return;
        if (visible) {
          this.display = "visible";
        } else {
          this.display = "none";
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "editable", {
      get: function() {
        return this.pattern === "editable";
      },
      set: function(editable) {
        if (!isValid(editable))
          return;
        if (editable) {
          this.pattern = "editable";
        } else {
          this.pattern = "readPretty";
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "readOnly", {
      get: function() {
        return this.pattern === "readOnly";
      },
      set: function(readOnly) {
        if (!isValid(readOnly))
          return;
        if (readOnly) {
          this.pattern = "readOnly";
        } else {
          this.pattern = "editable";
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "disabled", {
      get: function() {
        return this.pattern === "disabled";
      },
      set: function(disabled) {
        if (!isValid(disabled))
          return;
        if (disabled) {
          this.pattern = "disabled";
        } else {
          this.pattern = "editable";
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Form2.prototype, "readPretty", {
      get: function() {
        return this.pattern === "readPretty";
      },
      set: function(readPretty) {
        if (!isValid(readPretty))
          return;
        if (readPretty) {
          this.pattern = "readPretty";
        } else {
          this.pattern = "editable";
        }
      },
      enumerable: false,
      configurable: true
    });
    return Form2;
  }()
);

// node_modules/@formily/core/esm/shared/externals.js
var createForm = function(options) {
  return new Form(options);
};

// node_modules/@formily/core/esm/effects/onFormEffects.js
function createFormEffect(type) {
  return createEffectHook(type, function(form) {
    return function(callback) {
      batch(function() {
        callback(form);
      });
    };
  });
}
var onFormInit = createFormEffect(LifeCycleTypes.ON_FORM_INIT);
var onFormMount = createFormEffect(LifeCycleTypes.ON_FORM_MOUNT);
var onFormUnmount = createFormEffect(LifeCycleTypes.ON_FORM_UNMOUNT);
var onFormValuesChange = createFormEffect(LifeCycleTypes.ON_FORM_VALUES_CHANGE);
var onFormInitialValuesChange = createFormEffect(LifeCycleTypes.ON_FORM_INITIAL_VALUES_CHANGE);
var onFormInputChange = createFormEffect(LifeCycleTypes.ON_FORM_INPUT_CHANGE);
var onFormSubmit = createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT);
var onFormReset = createFormEffect(LifeCycleTypes.ON_FORM_RESET);
var onFormSubmitStart = createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_START);
var onFormSubmitEnd = createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_END);
var onFormSubmitSuccess = createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_SUCCESS);
var onFormSubmitFailed = createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_FAILED);
var onFormSubmitValidateStart = createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_START);
var onFormSubmitValidateSuccess = createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_SUCCESS);
var onFormSubmitValidateFailed = createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_FAILED);
var onFormSubmitValidateEnd = createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_END);
var onFormValidateStart = createFormEffect(LifeCycleTypes.ON_FORM_VALIDATE_START);
var onFormValidateSuccess = createFormEffect(LifeCycleTypes.ON_FORM_VALIDATE_SUCCESS);
var onFormValidateFailed = createFormEffect(LifeCycleTypes.ON_FORM_VALIDATE_FAILED);
var onFormValidateEnd = createFormEffect(LifeCycleTypes.ON_FORM_VALIDATE_END);
var onFormGraphChange = createFormEffect(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
var onFormLoading = createFormEffect(LifeCycleTypes.ON_FORM_LOADING);
function onFormReact(callback) {
  var dispose = null;
  onFormInit(function(form) {
    dispose = autorun(function() {
      if (isFn(callback))
        callback(form);
    });
  });
  onFormUnmount(function() {
    dispose();
  });
}

// node_modules/@formily/core/esm/effects/onFieldEffects.js
function createFieldEffect(type) {
  return createEffectHook(type, function(field, form) {
    return function(pattern, callback) {
      if (Path.parse(pattern).matchAliasGroup(field.address, field.path)) {
        batch(function() {
          callback(field, form);
        });
      }
    };
  });
}
var _onFieldInit = createFieldEffect(LifeCycleTypes.ON_FIELD_INIT);
var onFieldMount = createFieldEffect(LifeCycleTypes.ON_FIELD_MOUNT);
var onFieldUnmount = createFieldEffect(LifeCycleTypes.ON_FIELD_UNMOUNT);
var onFieldValueChange = createFieldEffect(LifeCycleTypes.ON_FIELD_VALUE_CHANGE);
var onFieldInitialValueChange = createFieldEffect(LifeCycleTypes.ON_FIELD_INITIAL_VALUE_CHANGE);
var onFieldInputValueChange = createFieldEffect(LifeCycleTypes.ON_FIELD_INPUT_VALUE_CHANGE);
var onFieldValidateStart = createFieldEffect(LifeCycleTypes.ON_FIELD_VALIDATE_START);
var onFieldValidateEnd = createFieldEffect(LifeCycleTypes.ON_FIELD_VALIDATE_END);
var onFieldValidating = createFieldEffect(LifeCycleTypes.ON_FIELD_VALIDATING);
var onFieldValidateFailed = createFieldEffect(LifeCycleTypes.ON_FIELD_VALIDATE_FAILED);
var onFieldValidateSuccess = createFieldEffect(LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS);
var onFieldSubmit = createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT);
var onFieldSubmitStart = createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_START);
var onFieldSubmitEnd = createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_END);
var onFieldSubmitValidateStart = createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_START);
var onFieldSubmitValidateEnd = createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_END);
var onFieldSubmitSuccess = createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_SUCCESS);
var onFieldSubmitFailed = createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_FAILED);
var onFieldSubmitValidateSuccess = createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_SUCCESS);
var onFieldSubmitValidateFailed = createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_FAILED);
var onFieldReset = createFieldEffect(LifeCycleTypes.ON_FIELD_RESET);
var onFieldLoading = createFieldEffect(LifeCycleTypes.ON_FIELD_LOADING);
function onFieldInit(pattern, callback) {
  var form = useEffectForm();
  var count = form.query(pattern).reduce(function(count2, field) {
    callback(field, form);
    return count2 + 1;
  }, 0);
  if (count === 0) {
    _onFieldInit(pattern, callback);
  }
}
function onFieldReact(pattern, callback) {
  onFieldInit(pattern, function(field, form) {
    field.disposers.push(autorun(function() {
      if (isFn(callback))
        callback(field, form);
    }));
  });
}
function onFieldChange(pattern, watches, callback) {
  if (isFn(watches)) {
    callback = watches;
    watches = ["value"];
  } else {
    watches = watches || ["value"];
  }
  onFieldInit(pattern, function(field, form) {
    if (isFn(callback))
      callback(field, form);
    var dispose = reaction(function() {
      return toArr(watches).map(function(key) {
        return field[key];
      });
    }, function() {
      if (isFn(callback))
        callback(field, form);
    });
    field.disposers.push(dispose);
  });
}

export {
  isFn,
  isArr,
  isPlainObj,
  isStr,
  isBool,
  isNum,
  toArr,
  each,
  map,
  reduce,
  globalThisPolyfill,
  instOf,
  clone,
  isUndef,
  isValid,
  isEmpty,
  lowerCase,
  Path,
  applyMiddleware,
  lazyMerge,
  uid,
  isObservable,
  markRaw,
  toJS,
  hasCollected,
  batch,
  action,
  untracked,
  observable2 as observable,
  define,
  model,
  autorun,
  reaction,
  Tracker,
  isForm,
  isGeneralField,
  isField,
  isArrayField,
  isObjectField,
  isVoidField,
  isFormState,
  isFieldState,
  isGeneralFieldState,
  isArrayFieldState,
  isDataField,
  isDataFieldState,
  isObjectFieldState,
  isVoidFieldState,
  isQuery,
  getValidateLocaleIOSCode,
  setValidateLanguage,
  getLocaleByPath,
  registerValidateLocale,
  registerValidateRules,
  registerValidateFormats,
  registerValidateMessageTemplateEngine,
  LifeCycleTypes,
  createEffectHook,
  createEffectContext,
  useEffectForm,
  createForm,
  onFormInit,
  onFormMount,
  onFormUnmount,
  onFormValuesChange,
  onFormInitialValuesChange,
  onFormInputChange,
  onFormSubmit,
  onFormReset,
  onFormSubmitStart,
  onFormSubmitEnd,
  onFormSubmitSuccess,
  onFormSubmitFailed,
  onFormSubmitValidateStart,
  onFormSubmitValidateSuccess,
  onFormSubmitValidateFailed,
  onFormSubmitValidateEnd,
  onFormValidateStart,
  onFormValidateSuccess,
  onFormValidateFailed,
  onFormValidateEnd,
  onFormGraphChange,
  onFormLoading,
  onFormReact,
  onFieldMount,
  onFieldUnmount,
  onFieldValueChange,
  onFieldInitialValueChange,
  onFieldInputValueChange,
  onFieldValidateStart,
  onFieldValidateEnd,
  onFieldValidating,
  onFieldValidateFailed,
  onFieldValidateSuccess,
  onFieldSubmit,
  onFieldSubmitStart,
  onFieldSubmitEnd,
  onFieldSubmitValidateStart,
  onFieldSubmitValidateEnd,
  onFieldSubmitSuccess,
  onFieldSubmitFailed,
  onFieldSubmitValidateSuccess,
  onFieldSubmitValidateFailed,
  onFieldReset,
  onFieldLoading,
  onFieldInit,
  onFieldReact,
  onFieldChange
};
//# sourceMappingURL=chunk-UZ6MRKEL.js.map
