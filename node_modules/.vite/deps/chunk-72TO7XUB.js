import {
  Path,
  Tracker,
  autorun,
  each,
  globalThisPolyfill,
  hasCollected,
  instOf,
  isArr,
  isBool,
  isFn,
  isObjectField,
  isObservable,
  isPlainObj,
  isStr,
  isValid,
  isVoidField,
  lazyMerge,
  lowerCase,
  map,
  observable,
  onFieldInit,
  onFieldInitialValueChange,
  onFieldInputValueChange,
  onFieldMount,
  onFieldUnmount,
  onFieldValidateEnd,
  onFieldValidateFailed,
  onFieldValidateStart,
  onFieldValidateSuccess,
  onFieldValueChange,
  reduce,
  toArr,
  toJS,
  uid,
  untracked
} from "./chunk-UZ6MRKEL.js";
import {
  require_react_dom
} from "./chunk-VQI7OUBR.js";
import {
  require_react
} from "./chunk-N3GI42K4.js";
import {
  __commonJS,
  __toESM
} from "./chunk-7D4SUZUM.js";

// node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment6 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment6;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/hoist-non-react-statics/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics3(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics3(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys.length; ++i) {
          var key = keys[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics3;
  }
});

// node_modules/@formily/json-schema/esm/shared.js
var REVA_ACTIONS_KEY = Symbol.for("__REVA_ACTIONS");
var SchemaNestedMap = {
  parent: true,
  root: true,
  properties: true,
  patternProperties: true,
  additionalProperties: true,
  items: true,
  additionalItems: true,
  "x-linkages": true,
  "x-reactions": true
};
var SchemaStateMap = {
  title: "title",
  description: "description",
  default: "initialValue",
  enum: "dataSource",
  readOnly: "readOnly",
  writeOnly: "editable",
  "x-content": "content",
  "x-data": "data",
  "x-value": "value",
  "x-editable": "editable",
  "x-disabled": "disabled",
  "x-read-pretty": "readPretty",
  "x-read-only": "readOnly",
  "x-visible": "visible",
  "x-hidden": "hidden",
  "x-display": "display",
  "x-pattern": "pattern",
  "x-validator": "validator",
  "x-decorator": "decoratorType",
  "x-component": "componentType",
  "x-decorator-props": "decoratorProps",
  "x-component-props": "componentProps"
};
var SchemaValidatorMap = {
  required: true,
  format: true,
  maxItems: true,
  minItems: true,
  maxLength: true,
  minLength: true,
  maximum: true,
  minimum: true,
  exclusiveMaximum: true,
  exclusiveMinimum: true,
  pattern: true,
  const: true,
  multipleOf: true,
  maxProperties: true,
  minProperties: true,
  uniqueItems: true
};
var SchemaNormalKeys = Object.keys(SchemaStateMap);
var SchemaValidatorKeys = Object.keys(SchemaValidatorMap);
var hasOwnProperty = Object.prototype.hasOwnProperty;
var traverse = function(target, visitor) {
  var seenObjects = [];
  var root = target;
  var traverse2 = function(target2, path) {
    if (path === void 0) {
      path = [];
    }
    if (isPlainObj(target2)) {
      var seenIndex = seenObjects.indexOf(target2);
      if (seenIndex > -1) {
        return;
      }
      var addIndex = seenObjects.length;
      seenObjects.push(target2);
      if (isNoNeedCompileObject(target2) && root !== target2) {
        visitor(target2, path);
        return;
      }
      each(target2, function(value, key) {
        traverse2(value, path.concat(key));
      });
      seenObjects.splice(addIndex, 1);
    } else {
      visitor(target2, path);
    }
  };
  traverse2(target);
};
var traverseSchema = function(schema, visitor) {
  var _a2;
  if (schema["x-validator"] !== void 0) {
    visitor(schema["x-validator"], ["x-validator"], (_a2 = schema["x-compile-omitted"]) === null || _a2 === void 0 ? void 0 : _a2.includes("x-validator"));
  }
  var seenObjects = [];
  var root = schema;
  var traverse2 = function(target, path) {
    var _a3;
    if (path === void 0) {
      path = [];
    }
    if (path[0] === "x-compile-omitted" || path[0] === "x-validator" || path[0] === "version" || path[0] === "_isJSONSchemaObject")
      return;
    if (String(path[0]).indexOf("x-") == -1 && isFn(target))
      return;
    if (SchemaNestedMap[path[0]])
      return;
    if (((_a3 = schema["x-compile-omitted"]) === null || _a3 === void 0 ? void 0 : _a3.indexOf(path[0])) > -1) {
      visitor(target, path, true);
      return;
    }
    if (isPlainObj(target)) {
      if (path[0] === "default" || path[0] === "x-value") {
        visitor(target, path);
        return;
      }
      var seenIndex = seenObjects.indexOf(target);
      if (seenIndex > -1) {
        return;
      }
      var addIndex = seenObjects.length;
      seenObjects.push(target);
      if (isNoNeedCompileObject(target) && root !== target) {
        visitor(target, path);
        return;
      }
      each(target, function(value, key) {
        traverse2(value, path.concat(key));
      });
      seenObjects.splice(addIndex, 1);
    } else {
      visitor(target, path);
    }
  };
  traverse2(schema);
};
var isNoNeedCompileObject = function(source) {
  if ("$$typeof" in source && "_owner" in source) {
    return true;
  }
  if (source["_isAMomentObject"]) {
    return true;
  }
  if (Schema.isSchemaInstance(source)) {
    return true;
  }
  if (source[REVA_ACTIONS_KEY]) {
    return true;
  }
  if (isFn(source["toJS"])) {
    return true;
  }
  if (isFn(source["toJSON"])) {
    return true;
  }
  if (isObservable(source)) {
    return true;
  }
  return false;
};
var createDataSource = function(source) {
  return toArr(source).map(function(item) {
    if (typeof item === "object") {
      return item;
    } else {
      return {
        label: item,
        value: item
      };
    }
  });
};
var patchStateFormSchema = function(targetState, pattern, compiled) {
  untracked(function() {
    var _a2;
    var path = Path.parse(pattern);
    var segments = path.segments;
    var key = segments[0];
    var isEnum = key === "enum" && isArr(compiled);
    var schemaMapKey = SchemaStateMap[key];
    if (schemaMapKey) {
      Path.setIn(targetState, [schemaMapKey].concat(segments.slice(1)), isEnum ? createDataSource(compiled) : compiled);
    } else {
      var isValidatorKey = SchemaValidatorMap[key];
      if (isValidatorKey) {
        (_a2 = targetState["setValidatorRule"]) === null || _a2 === void 0 ? void 0 : _a2.call(targetState, key, compiled);
      }
    }
  });
};

// node_modules/@formily/json-schema/esm/compiler.js
var ExpRE = /^\s*\{\{([\s\S]*)\}\}\s*$/;
var Registry = {
  silent: false,
  compile: function(expression, scope) {
    if (scope === void 0) {
      scope = {};
    }
    if (Registry.silent) {
      try {
        return new Function("$root", "with($root) { return (".concat(expression, "); }"))(scope);
      } catch (_a2) {
      }
    } else {
      return new Function("$root", "with($root) { return (".concat(expression, "); }"))(scope);
    }
  }
};
var silent = function(value) {
  if (value === void 0) {
    value = true;
  }
  Registry.silent = !!value;
};
var registerCompiler = function(compiler) {
  if (isFn(compiler)) {
    Registry.compile = compiler;
  }
};
var shallowCompile = function(source, scope) {
  if (isStr(source)) {
    var matched = source.match(ExpRE);
    if (!matched)
      return source;
    return Registry.compile(matched[1], scope);
  }
  return source;
};
var compile = function(source, scope) {
  var seenObjects = [];
  var compile2 = function(source2) {
    if (isStr(source2)) {
      return shallowCompile(source2, scope);
    } else if (isArr(source2)) {
      return source2.map(function(value) {
        return compile2(value);
      });
    } else if (isPlainObj(source2)) {
      if (isNoNeedCompileObject(source2))
        return source2;
      var seenIndex = seenObjects.indexOf(source2);
      if (seenIndex > -1) {
        return source2;
      }
      var addIndex = seenObjects.length;
      seenObjects.push(source2);
      var results = reduce(source2, function(buf, value, key) {
        buf[key] = compile2(value);
        return buf;
      }, {});
      seenObjects.splice(addIndex, 1);
      return results;
    }
    return source2;
  };
  return compile2(source);
};
var patchCompile = function(targetState, sourceState, scope) {
  traverse(sourceState, function(value, pattern) {
    var compiled = compile(value, scope);
    if (compiled === void 0)
      return;
    var path = Path.parse(pattern);
    var key = path.segments[0];
    if (hasOwnProperty.call(targetState, key)) {
      untracked(function() {
        return Path.setIn(targetState, path, compiled);
      });
    }
  });
};
var patchSchemaCompile = function(targetState, sourceSchema, scope, demand) {
  if (demand === void 0) {
    demand = false;
  }
  traverseSchema(sourceSchema, function(value, path, omitCompile) {
    var compiled = value;
    var collected = hasCollected(function() {
      if (!omitCompile) {
        compiled = compile(value, scope);
      }
    });
    if (compiled === void 0)
      return;
    if (demand) {
      if (collected || !targetState.initialized) {
        patchStateFormSchema(targetState, path, compiled);
      }
    } else {
      patchStateFormSchema(targetState, path, compiled);
    }
  });
};

// node_modules/@formily/json-schema/esm/transformer.js
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var FieldEffects = {
  onFieldInit,
  onFieldMount,
  onFieldUnmount,
  onFieldValueChange,
  onFieldInputValueChange,
  onFieldInitialValueChange,
  onFieldValidateStart,
  onFieldValidateEnd,
  onFieldValidateFailed,
  onFieldValidateSuccess
};
var DefaultFieldEffects = ["onFieldInit", "onFieldValueChange"];
var getDependencyValue = function(field, pattern, property) {
  var _a2 = __read(String(pattern).split(/\s*#\s*/), 2), target = _a2[0], path = _a2[1];
  return field.query(target).getIn(path || property || "value");
};
var getDependencies = function(field, dependencies) {
  if (isArr(dependencies)) {
    var results_1 = [];
    dependencies.forEach(function(pattern) {
      if (isStr(pattern)) {
        results_1.push(getDependencyValue(field, pattern));
      } else if (isPlainObj(pattern)) {
        if (pattern.name && pattern.source) {
          results_1[pattern.name] = getDependencyValue(field, pattern.source, pattern.property);
        }
      }
    });
    return results_1;
  } else if (isPlainObj(dependencies)) {
    return reduce(dependencies, function(buf, pattern, key) {
      buf[key] = getDependencyValue(field, pattern);
      return buf;
    }, {});
  }
  return [];
};
var setSchemaFieldState = function(options, demand) {
  if (demand === void 0) {
    demand = false;
  }
  var _a2 = options || {}, request = _a2.request, target = _a2.target, runner = _a2.runner, field = _a2.field, scope = _a2.scope;
  if (!request)
    return;
  if (target) {
    if (request.state) {
      field.form.setFieldState(target, function(state) {
        return patchCompile(state, request.state, lazyMerge(scope, {
          $target: state
        }));
      });
    }
    if (request.schema) {
      field.form.setFieldState(target, function(state) {
        return patchSchemaCompile(state, request.schema, lazyMerge(scope, {
          $target: state
        }), demand);
      });
    }
    if (isStr(runner) && runner) {
      field.form.setFieldState(target, function(state) {
        shallowCompile("{{function(){".concat(runner, "}}}"), lazyMerge(scope, {
          $target: state
        }))();
      });
    }
  } else {
    if (request.state) {
      field.setState(function(state) {
        return patchCompile(state, request.state, scope);
      });
    }
    if (request.schema) {
      field.setState(function(state) {
        return patchSchemaCompile(state, request.schema, scope, demand);
      });
    }
    if (isStr(runner) && runner) {
      shallowCompile("{{function(){".concat(runner, "}}}"), scope)();
    }
  }
};
var getBaseScope = function(field, options) {
  if (options === void 0) {
    options = {};
  }
  var $observable = function(target, deps) {
    return autorun.memo(function() {
      return observable(target);
    }, deps);
  };
  var $props = function(props) {
    return field.setComponentProps(props);
  };
  var $effect = autorun.effect;
  var $memo = autorun.memo;
  var $self = field;
  var $form = field.form;
  var $values = field.form.values;
  return lazyMerge({
    get $lookup() {
      var _a2, _b2;
      return (_b2 = (_a2 = options === null || options === void 0 ? void 0 : options.scope) === null || _a2 === void 0 ? void 0 : _a2.$record) !== null && _b2 !== void 0 ? _b2 : $values;
    },
    get $records() {
      return field.records;
    },
    get $record() {
      var record = field.record;
      if (typeof record === "object") {
        return lazyMerge(record, {
          get $lookup() {
            var _a2, _b2;
            return (_b2 = (_a2 = options === null || options === void 0 ? void 0 : options.scope) === null || _a2 === void 0 ? void 0 : _a2.$record) !== null && _b2 !== void 0 ? _b2 : $values;
          },
          get $index() {
            return field.index;
          }
        });
      }
      return record;
    },
    get $index() {
      return field.index;
    }
  }, options.scope, {
    $form,
    $self,
    $observable,
    $effect,
    $memo,
    $props,
    $values
  });
};
var getBaseReactions = function(schema, options) {
  return function(field) {
    setSchemaFieldState({
      field,
      request: { schema },
      scope: getBaseScope(field, options)
    }, true);
  };
};
var getUserReactions = function(schema, options) {
  var reactions = toArr(schema["x-reactions"]);
  return reactions.map(function(unCompiled) {
    return function(field) {
      var baseScope = getBaseScope(field, options);
      var reaction = shallowCompile(unCompiled, baseScope);
      if (!reaction)
        return;
      if (isFn(reaction)) {
        return reaction(field, baseScope);
      }
      var when = reaction.when, fulfill = reaction.fulfill, otherwise = reaction.otherwise, target = reaction.target, effects = reaction.effects;
      var run = function() {
        var $deps = getDependencies(field, reaction.dependencies);
        var $dependencies = $deps;
        var scope = lazyMerge(baseScope, {
          $target: null,
          $deps,
          $dependencies
        });
        var compiledWhen = shallowCompile(when, scope);
        var condition = when ? compiledWhen : true;
        var request = condition ? fulfill : otherwise;
        var runner = request === null || request === void 0 ? void 0 : request.run;
        setSchemaFieldState({
          field,
          target,
          request,
          runner,
          scope
        });
      };
      if (target) {
        reaction.effects = (effects === null || effects === void 0 ? void 0 : effects.length) ? effects : DefaultFieldEffects;
      }
      if (reaction.effects) {
        autorun.memo(function() {
          untracked(function() {
            each(reaction.effects, function(type) {
              if (FieldEffects[type]) {
                FieldEffects[type](field.address, run);
              }
            });
          });
        }, []);
      } else {
        run();
      }
    };
  });
};
var transformFieldProps = function(schema, options) {
  return {
    name: schema.name,
    reactions: [getBaseReactions(schema, options)].concat(getUserReactions(schema, options))
  };
};

// node_modules/@formily/json-schema/esm/patches.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var patches = [];
var polyfills = {};
var reducePatches = function(schema) {
  return patches.reduce(function(buf, patch) {
    return patch(buf);
  }, __assign({}, schema));
};
var registerPatches = function() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  args.forEach(function(patch) {
    if (isFn(patch)) {
      patches.push(patch);
    }
  });
};
var registerPolyfills = function(version, patch) {
  if (version && isFn(patch)) {
    polyfills[version] = polyfills[version] || [];
    polyfills[version].push(patch);
  }
};
var enablePolyfills = function(versions) {
  if (isArr(versions)) {
    versions.forEach(function(version) {
      if (isArr(polyfills[version])) {
        polyfills[version].forEach(function(patch) {
          registerPatches(patch);
        });
      }
    });
  }
};

// node_modules/@formily/json-schema/esm/polyfills/SPECIFICATION_1_0.js
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var VOID_COMPONENTS = [
  "card",
  "block",
  "grid-col",
  "grid-row",
  "grid",
  "layout",
  "step",
  "tab",
  "text-box"
];
var TYPE_DEFAULT_COMPONENTS = {};
var transformCondition = function(condition) {
  if (isStr(condition)) {
    return condition.replace(/\$value/, "$self.value");
  }
};
var transformXLinkage = function(linkages) {
  if (isArr(linkages)) {
    return linkages.reduce(function(buf, item) {
      if (!item)
        return buf;
      if (item.type === "value:visible") {
        return buf.concat({
          target: item.target,
          when: transformCondition(item.condition),
          fulfill: {
            state: {
              visible: true
            }
          },
          otherwise: {
            state: {
              visible: false
            }
          }
        });
      } else if (item.type === "value:schema") {
        return buf.concat({
          target: item.target,
          when: transformCondition(item.condition),
          fulfill: {
            schema: SpecificationV1Polyfill(__assign2({ version: "1.0" }, item.schema))
          },
          otherwise: {
            schema: SpecificationV1Polyfill(__assign2({ version: "1.0" }, item.otherwise))
          }
        });
      } else if (item.type === "value:state") {
        return buf.concat({
          target: item.target,
          when: transformCondition(item.condition),
          fulfill: {
            state: item.state
          },
          otherwise: {
            state: item.otherwise
          }
        });
      }
    }, []);
  }
  return [];
};
var SpecificationV1Polyfill = function(schema) {
  if (isValid(schema["editable"])) {
    schema["x-editable"] = schema["x-editable"] || schema["editable"];
    delete schema["editable"];
  }
  if (isValid(schema["visible"])) {
    schema["x-visible"] = schema["x-visible"] || schema["visible"];
    delete schema["visible"];
  }
  if (isValid(schema["display"])) {
    schema["x-display"] = schema["x-display"] || (schema["display"] ? "visible" : "hidden");
    delete schema["display"];
  }
  if (isValid(schema["x-props"])) {
    schema["x-decorator-props"] = schema["x-decorator-props"] || schema["x-props"];
    delete schema["display"];
  }
  if (schema["x-linkages"]) {
    schema["x-reactions"] = toArr(schema["x-reactions"]).concat(transformXLinkage(schema["x-linkages"]));
    delete schema["x-linkages"];
  }
  if (schema["x-component"]) {
    if (VOID_COMPONENTS.some(function(component) {
      return lowerCase(component) === lowerCase(schema["x-component"]);
    })) {
      schema["type"] = "void";
    }
  } else {
    if (TYPE_DEFAULT_COMPONENTS[schema["type"]]) {
      schema["x-component"] = TYPE_DEFAULT_COMPONENTS[schema["type"]];
    }
  }
  if (!schema["x-decorator"] && schema["type"] !== "void" && schema["type"] !== "object") {
    schema["x-decorator"] = schema["x-decorator"] || "FormItem";
  }
  if (schema["x-rules"]) {
    schema["x-validator"] = [].concat(schema["x-validator"] || []).concat(schema["x-rules"]);
  }
  return schema;
};
registerPolyfills("1.0", SpecificationV1Polyfill);
var registerVoidComponents = function(components) {
  VOID_COMPONENTS.push.apply(VOID_COMPONENTS, __spreadArray([], __read2(components), false));
};
var registerTypeDefaultComponents = function(maps) {
  Object.assign(TYPE_DEFAULT_COMPONENTS, maps);
};

// node_modules/@formily/json-schema/esm/schema.js
var Schema = (
  /** @class */
  function() {
    function Schema2(json, parent) {
      var _this = this;
      this._isJSONSchemaObject = true;
      this.version = "2.0";
      this.addProperty = function(key, schema) {
        _this.properties = _this.properties || {};
        _this.properties[key] = new Schema2(schema, _this);
        _this.properties[key].name = key;
        return _this.properties[key];
      };
      this.removeProperty = function(key) {
        var schema = _this.properties[key];
        delete _this.properties[key];
        return schema;
      };
      this.setProperties = function(properties) {
        for (var key in properties) {
          _this.addProperty(key, properties[key]);
        }
        return _this;
      };
      this.addPatternProperty = function(key, schema) {
        if (!schema)
          return;
        _this.patternProperties = _this.patternProperties || {};
        _this.patternProperties[key] = new Schema2(schema, _this);
        _this.patternProperties[key].name = key;
        return _this.patternProperties[key];
      };
      this.removePatternProperty = function(key) {
        var schema = _this.patternProperties[key];
        delete _this.patternProperties[key];
        return schema;
      };
      this.setPatternProperties = function(properties) {
        if (!properties)
          return _this;
        for (var key in properties) {
          _this.addPatternProperty(key, properties[key]);
        }
        return _this;
      };
      this.setAdditionalProperties = function(properties) {
        if (!properties)
          return;
        _this.additionalProperties = new Schema2(properties);
        return _this.additionalProperties;
      };
      this.setItems = function(schema) {
        if (!schema)
          return;
        if (Array.isArray(schema)) {
          _this.items = schema.map(function(item) {
            return new Schema2(item, _this);
          });
        } else {
          _this.items = new Schema2(schema, _this);
        }
        return _this.items;
      };
      this.setAdditionalItems = function(items) {
        if (!items)
          return;
        _this.additionalItems = new Schema2(items, _this);
        return _this.additionalItems;
      };
      this.findDefinitions = function(ref) {
        if (!ref || !_this.root || !isStr(ref))
          return;
        if (ref.indexOf("#/") !== 0)
          return;
        return Path.getIn(_this.root, ref.substring(2).split("/"));
      };
      this.mapProperties = function(callback) {
        return Schema2.getOrderProperties(_this).map(function(_a2, index) {
          var schema = _a2.schema, key = _a2.key;
          return callback(schema, key, index);
        });
      };
      this.mapPatternProperties = function(callback) {
        return Schema2.getOrderProperties(_this, "patternProperties").map(function(_a2, index) {
          var schema = _a2.schema, key = _a2.key;
          return callback(schema, key, index);
        });
      };
      this.reduceProperties = function(callback, predicate) {
        var results = predicate;
        Schema2.getOrderProperties(_this, "properties").forEach(function(_a2, index) {
          var schema = _a2.schema, key = _a2.key;
          results = callback(results, schema, key, index);
        });
        return results;
      };
      this.reducePatternProperties = function(callback, predicate) {
        var results = predicate;
        Schema2.getOrderProperties(_this, "patternProperties").forEach(function(_a2, index) {
          var schema = _a2.schema, key = _a2.key;
          results = callback(results, schema, key, index);
        });
        return results;
      };
      this.compile = function(scope) {
        var schema = new Schema2({}, _this.parent);
        each(_this, function(value, key) {
          if (isFn(value) && !key.includes("x-"))
            return;
          if (key === "parent" || key === "root")
            return;
          if (!SchemaNestedMap[key]) {
            schema[key] = value ? compile(value, scope) : value;
          } else {
            schema[key] = value ? shallowCompile(value, scope) : value;
          }
        });
        return schema;
      };
      this.fromJSON = function(json2) {
        if (!json2)
          return _this;
        if (Schema2.isSchemaInstance(json2))
          return json2;
        each(reducePatches(json2), function(value, key) {
          if (isFn(value) && !key.includes("x-"))
            return;
          if (key === "properties") {
            _this.setProperties(value);
          } else if (key === "patternProperties") {
            _this.setPatternProperties(value);
          } else if (key === "additionalProperties") {
            _this.setAdditionalProperties(value);
          } else if (key === "items") {
            _this.setItems(value);
          } else if (key === "additionalItems") {
            _this.setAdditionalItems(value);
          } else if (key === "$ref") {
            _this.fromJSON(_this.findDefinitions(value));
          } else {
            _this[key] = value;
          }
        });
        return _this;
      };
      this.toJSON = function(recursion) {
        if (recursion === void 0) {
          recursion = true;
        }
        var results = {};
        each(_this, function(value, key) {
          var _a2, _b2;
          if (isFn(value) && !key.includes("x-") || key === "parent" || key === "root")
            return;
          if (key === "properties" || key === "patternProperties") {
            if (!recursion)
              return;
            results[key] = map(value, function(item) {
              var _a3;
              return (_a3 = item === null || item === void 0 ? void 0 : item.toJSON) === null || _a3 === void 0 ? void 0 : _a3.call(item);
            });
          } else if (key === "additionalProperties" || key === "additionalItems") {
            if (!recursion)
              return;
            results[key] = (_a2 = value === null || value === void 0 ? void 0 : value.toJSON) === null || _a2 === void 0 ? void 0 : _a2.call(value);
          } else if (key === "items") {
            if (!recursion)
              return;
            if (Array.isArray(value)) {
              results[key] = value.map(function(item) {
                var _a3;
                return (_a3 = item === null || item === void 0 ? void 0 : item.toJSON) === null || _a3 === void 0 ? void 0 : _a3.call(item);
              });
            } else {
              results[key] = (_b2 = value === null || value === void 0 ? void 0 : value.toJSON) === null || _b2 === void 0 ? void 0 : _b2.call(value);
            }
          } else {
            results[key] = value;
          }
        });
        return results;
      };
      this.toFieldProps = function(options) {
        return transformFieldProps(_this, options);
      };
      if (parent) {
        this.parent = parent;
        this.root = parent.root;
      } else {
        this.root = this;
      }
      return this.fromJSON(json);
    }
    Schema2.getOrderProperties = function(schema, propertiesName) {
      if (schema === void 0) {
        schema = {};
      }
      if (propertiesName === void 0) {
        propertiesName = "properties";
      }
      var orderProperties = [];
      var unorderProperties = [];
      for (var key in schema[propertiesName]) {
        var item = schema[propertiesName][key];
        var index = item["x-index"];
        if (!isNaN(index)) {
          orderProperties[index] = { schema: item, key };
        } else {
          unorderProperties.push({ schema: item, key });
        }
      }
      return orderProperties.concat(unorderProperties).filter(function(item2) {
        return !!item2;
      });
    };
    Schema2.compile = function(expression, scope) {
      return compile(expression, scope);
    };
    Schema2.shallowCompile = function(expression, scope) {
      return shallowCompile(expression, scope);
    };
    Schema2.isSchemaInstance = function(value) {
      return instOf(value, Schema2);
    };
    Schema2.registerCompiler = registerCompiler;
    Schema2.registerPatches = registerPatches;
    Schema2.registerVoidComponents = registerVoidComponents;
    Schema2.registerTypeDefaultComponents = registerTypeDefaultComponents;
    Schema2.registerPolyfills = registerPolyfills;
    Schema2.enablePolyfills = enablePolyfills;
    Schema2.silent = silent;
    return Schema2;
  }()
);

// node_modules/@formily/react/esm/components/FormProvider.js
var import_react13 = __toESM(require_react());

// node_modules/@formily/reactive-react/esm/observer.js
var import_react6 = __toESM(require_react());
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());

// node_modules/@formily/reactive-react/esm/hooks/useForceUpdate.js
var import_react3 = __toESM(require_react());

// node_modules/@formily/reactive-react/esm/hooks/useLayoutEffect.js
var import_react = __toESM(require_react());
var useLayoutEffect = typeof document !== "undefined" ? import_react.useLayoutEffect : import_react.useEffect;

// node_modules/@formily/reactive-react/esm/hooks/useDidUpdate.js
var import_react2 = __toESM(require_react());

// node_modules/@formily/reactive-react/esm/shared/global.js
function globalSelf() {
  try {
    if (typeof self !== "undefined") {
      return self;
    }
  } catch (e) {
  }
  try {
    if (typeof window !== "undefined") {
      return window;
    }
  } catch (e) {
  }
  try {
    if (typeof global !== "undefined") {
      return global;
    }
  } catch (e) {
  }
  return Function("return this")();
}
var globalThisPolyfill2 = globalSelf();

// node_modules/@formily/reactive-react/esm/shared/gc.js
var registry = globalThisPolyfill2["FinalizationRegistry"] && new globalThisPolyfill2["FinalizationRegistry"](function(token) {
  var _a2;
  return (_a2 = token === null || token === void 0 ? void 0 : token.clean) === null || _a2 === void 0 ? void 0 : _a2.call(token);
});
var GarbageCollector = (
  /** @class */
  function() {
    function GarbageCollector2(clean, expireTime) {
      if (expireTime === void 0) {
        expireTime = 1e4;
      }
      this.token = {
        clean
      };
      this.expireTime = expireTime;
    }
    GarbageCollector2.prototype.open = function(target) {
      var _this = this;
      if (registry) {
        registry.register(target, this.token, this.token);
      } else {
        this.request = setTimeout(function() {
          var _a2, _b2;
          (_b2 = (_a2 = _this.token) === null || _a2 === void 0 ? void 0 : _a2.clean) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
        }, this.expireTime);
      }
    };
    GarbageCollector2.prototype.close = function() {
      if (registry) {
        registry.unregister(this.token);
      } else {
        clearTimeout(this.request);
      }
    };
    return GarbageCollector2;
  }()
);

// node_modules/@formily/reactive-react/esm/shared/immediate.js
var immediate = function(callback) {
  var disposed = false;
  Promise.resolve(0).then(function() {
    if (disposed) {
      disposed = false;
      return;
    }
    callback();
  });
  return function() {
    disposed = true;
  };
};

// node_modules/@formily/reactive-react/esm/hooks/useDidUpdate.js
var useDidUpdate = function(callback) {
  var request = (0, import_react2.useRef)(null);
  request.current = immediate(callback);
  useLayoutEffect(function() {
    request.current();
    callback();
  });
};

// node_modules/@formily/reactive-react/esm/hooks/useForceUpdate.js
var __read3 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var EMPTY_ARRAY = [];
var RENDER_COUNT = { value: 0 };
var RENDER_QUEUE = /* @__PURE__ */ new Set();
function useForceUpdate() {
  var _a2 = __read3((0, import_react3.useState)([]), 2), setState = _a2[1];
  var firstRenderedRef = (0, import_react3.useRef)(false);
  var needUpdateRef = (0, import_react3.useRef)(false);
  useLayoutEffect(function() {
    firstRenderedRef.current = true;
    if (needUpdateRef.current) {
      setState([]);
      needUpdateRef.current = false;
    }
    return function() {
      firstRenderedRef.current = false;
    };
  }, EMPTY_ARRAY);
  var update = (0, import_react3.useCallback)(function() {
    setState([]);
  }, EMPTY_ARRAY);
  var scheduler = (0, import_react3.useCallback)(function() {
    if (!firstRenderedRef.current) {
      needUpdateRef.current = true;
      return;
    }
    if (RENDER_COUNT.value === 0) {
      update();
    } else {
      RENDER_QUEUE.add(update);
    }
  }, EMPTY_ARRAY);
  RENDER_COUNT.value++;
  useDidUpdate(function() {
    if (RENDER_COUNT.value > 0) {
      RENDER_COUNT.value--;
    }
    if (RENDER_COUNT.value === 0) {
      RENDER_QUEUE.forEach(function(update2) {
        RENDER_QUEUE.delete(update2);
        update2();
      });
    }
  });
  return scheduler;
}

// node_modules/@formily/reactive-react/esm/hooks/useCompatFactory.js
var import_react5 = __toESM(require_react());

// node_modules/@formily/reactive-react/esm/hooks/useCompatEffect.js
var import_react4 = __toESM(require_react());
var isArr2 = Array.isArray;
var isEqualDeps = function(target, source) {
  var arrA = isArr2(target);
  var arrB = isArr2(source);
  if (arrA !== arrB)
    return false;
  if (arrA) {
    if (target.length !== source.length)
      return false;
    return target.every(function(val, index) {
      return val === source[index];
    });
  }
  return target === source;
};
var useCompatEffect = function(effect, deps) {
  var depsRef = (0, import_react4.useRef)(null);
  var mountedRef = (0, import_react4.useRef)(false);
  (0, import_react4.useEffect)(function() {
    mountedRef.current = true;
    var dispose = effect();
    return function() {
      mountedRef.current = false;
      if (!isEqualDeps(depsRef.current, deps)) {
        if (dispose)
          dispose();
        return;
      }
      immediate(function() {
        if (mountedRef.current)
          return;
        if (dispose)
          dispose();
      });
    };
  }, deps);
  depsRef.current = deps;
};

// node_modules/@formily/reactive-react/esm/hooks/useCompatFactory.js
var __read4 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var ObjectToBeRetainedByReact = (
  /** @class */
  /* @__PURE__ */ function() {
    function ObjectToBeRetainedByReact2() {
    }
    return ObjectToBeRetainedByReact2;
  }()
);
function objectToBeRetainedByReactFactory() {
  return new ObjectToBeRetainedByReact();
}
var useCompatFactory = function(factory) {
  var instRef = import_react5.default.useRef(null);
  var gcRef = import_react5.default.useRef();
  var _a2 = __read4(import_react5.default.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a2[0];
  if (!instRef.current) {
    instRef.current = factory();
  }
  if (!gcRef.current) {
    gcRef.current = new GarbageCollector(function() {
      if (instRef.current) {
        instRef.current.dispose();
      }
    });
    gcRef.current.open(objectRetainedByReact);
  }
  useCompatEffect(function() {
    gcRef.current.close();
    return function() {
      if (instRef.current) {
        instRef.current.dispose();
        instRef.current = null;
      }
    };
  }, []);
  return instRef.current;
};

// node_modules/@formily/reactive-react/esm/hooks/useObserver.js
var useObserver = function(view, options) {
  var forceUpdate = useForceUpdate();
  var tracker = useCompatFactory(function() {
    return new Tracker(function() {
      if (typeof (options === null || options === void 0 ? void 0 : options.scheduler) === "function") {
        options.scheduler(forceUpdate);
      } else {
        forceUpdate();
      }
    }, options === null || options === void 0 ? void 0 : options.displayName);
  });
  return tracker.track(view);
};

// node_modules/@formily/reactive-react/esm/observer.js
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
function observer(component, options) {
  var realOptions = __assign3({ forwardRef: false }, options);
  var wrappedComponent = realOptions.forwardRef ? (0, import_react6.forwardRef)(function(props, ref) {
    return useObserver(function() {
      return component(__assign3(__assign3({}, props), { ref }));
    }, realOptions);
  }) : function(props) {
    return useObserver(function() {
      return component(props);
    }, realOptions);
  };
  var memoComponent = (0, import_react6.memo)(wrappedComponent);
  (0, import_hoist_non_react_statics.default)(memoComponent, component);
  if (realOptions.displayName) {
    memoComponent.displayName = realOptions.displayName;
  }
  return memoComponent;
}
var Observer = observer(function(props) {
  var children = typeof props.children === "function" ? props.children() : props.children;
  return import_react6.default.createElement(import_react6.Fragment, {}, children);
});

// node_modules/@formily/reactive-react/esm/hooks/index.js
var unstable_useCompatEffect = useCompatEffect;
var unstable_useCompatFactory = useCompatFactory;

// node_modules/@formily/react/esm/hooks/useAttach.js
var useAttach = function(target) {
  unstable_useCompatEffect(function() {
    target.onMount();
    return function() {
      return target.onUnmount();
    };
  }, [target]);
  return target;
};

// node_modules/@formily/react/esm/shared/context.js
var import_react7 = __toESM(require_react());
var createContextCleaner = function() {
  var contexts = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    contexts[_i] = arguments[_i];
  }
  return function(_a2) {
    var children = _a2.children;
    return contexts.reduce(function(buf, ctx) {
      return import_react7.default.createElement(ctx.Provider, { value: void 0 }, buf);
    }, children);
  };
};
var FormContext = (0, import_react7.createContext)(null);
var FieldContext = (0, import_react7.createContext)(null);
var SchemaMarkupContext = (0, import_react7.createContext)(null);
var SchemaContext = (0, import_react7.createContext)(null);
var SchemaExpressionScopeContext = (0, import_react7.createContext)(null);
var SchemaComponentsContext = (0, import_react7.createContext)(null);
var SchemaOptionsContext = (0, import_react7.createContext)(null);
var ContextCleaner = createContextCleaner(FieldContext, SchemaMarkupContext, SchemaContext, SchemaExpressionScopeContext, SchemaComponentsContext, SchemaOptionsContext);

// node_modules/@formily/react/esm/shared/connect.js
var import_react12 = __toESM(require_react());

// node_modules/@formily/react/esm/hooks/useForm.js
var import_react8 = __toESM(require_react());
var useForm = function() {
  return (0, import_react8.useContext)(FormContext);
};

// node_modules/@formily/react/esm/hooks/useField.js
var import_react9 = __toESM(require_react());
var useField = function() {
  return (0, import_react9.useContext)(FieldContext);
};

// node_modules/@formily/react/esm/hooks/useParentForm.js
var useParentForm = function() {
  var field = useField();
  var form = useForm();
  var findObjectParent = function(field2) {
    if (!field2)
      return form;
    if (isObjectField(field2))
      return field2;
    return findObjectParent(field2 === null || field2 === void 0 ? void 0 : field2.parent);
  };
  return findObjectParent(field);
};

// node_modules/@formily/react/esm/hooks/useFieldSchema.js
var import_react10 = __toESM(require_react());
var useFieldSchema = function() {
  return (0, import_react10.useContext)(SchemaContext);
};

// node_modules/@formily/react/esm/hooks/useFormEffects.js
var useFormEffects = function(effects) {
  var form = useForm();
  unstable_useCompatFactory(function() {
    var id = uid();
    form.addEffects(id, effects);
    return {
      dispose: function() {
        form.removeEffects(id);
      }
    };
  });
};

// node_modules/@formily/react/esm/hooks/useExpressionScope.js
var import_react11 = __toESM(require_react());
var useExpressionScope = function() {
  return (0, import_react11.useContext)(SchemaExpressionScopeContext);
};

// node_modules/@formily/react/esm/shared/connect.js
var import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
var __assign4 = function() {
  __assign4 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign4.apply(this, arguments);
};
function mapProps() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return function(target) {
    return observer(function(props) {
      var field = useField();
      var results = args.reduce(function(props2, mapper) {
        if (isFn(mapper)) {
          props2 = Object.assign(props2, mapper(props2, field));
        } else {
          each(mapper, function(to, extract) {
            var extractValue = Path.getIn(field, extract);
            var targetValue = isStr(to) ? to : extract;
            var originalValue = Path.getIn(props2, targetValue);
            if (extract === "value") {
              if (to !== extract) {
                delete props2.value;
              }
            }
            if (isValid(originalValue) && !isValid(extractValue))
              return;
            Path.setIn(props2, targetValue, extractValue);
          });
        }
        return props2;
      }, __assign4({}, props));
      return import_react12.default.createElement(target, results);
    }, {
      forwardRef: true
    });
  };
}
function mapReadPretty(component, readPrettyProps) {
  return function(target) {
    return observer(function(props) {
      var field = useField();
      if (!isVoidField(field) && (field === null || field === void 0 ? void 0 : field.pattern) === "readPretty") {
        return import_react12.default.createElement(component, __assign4(__assign4({}, readPrettyProps), props));
      }
      return import_react12.default.createElement(target, props);
    }, {
      forwardRef: true
    });
  };
}
function connect(target) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  var Target = args.reduce(function(target2, mapper) {
    return mapper(target2);
  }, target);
  var Destination = import_react12.default.forwardRef(function(props, ref) {
    return import_react12.default.createElement(Target, __assign4(__assign4({}, props), { ref }));
  });
  if (target)
    (0, import_hoist_non_react_statics2.default)(Destination, target);
  return Destination;
}

// node_modules/@formily/react/esm/components/FormProvider.js
var FormProvider = function(props) {
  var form = useAttach(props.form);
  return import_react13.default.createElement(
    ContextCleaner,
    null,
    import_react13.default.createElement(FormContext.Provider, { value: form }, props.children)
  );
};
FormProvider.displayName = "FormProvider";

// node_modules/@formily/react/esm/components/FormConsumer.js
var import_react14 = __toESM(require_react());
var FormConsumer = observer(function(props) {
  var children = isFn(props.children) ? props.children(useForm()) : null;
  return import_react14.default.createElement(import_react14.Fragment, null, children);
});
FormConsumer.displayName = "FormConsumer";

// node_modules/@formily/react/esm/components/ArrayField.js
var import_react16 = __toESM(require_react());

// node_modules/@formily/react/esm/components/ReactiveField.js
var import_react15 = __toESM(require_react());
var __assign5 = function() {
  __assign5 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign5.apply(this, arguments);
};
var __read5 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray2 = function(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var mergeChildren = function(children, content) {
  if (!children && !content)
    return;
  if (isFn(children))
    return;
  return import_react15.default.createElement(
    import_react15.Fragment,
    null,
    children,
    content
  );
};
var isValidComponent = function(target) {
  return target && (typeof target === "object" || typeof target === "function");
};
var renderChildren = function(children, field, form) {
  return isFn(children) ? children(field, form) : children;
};
var ReactiveInternal = function(props) {
  var _a2;
  var components = (0, import_react15.useContext)(SchemaComponentsContext);
  if (!props.field) {
    return import_react15.default.createElement(import_react15.Fragment, null, renderChildren(props.children));
  }
  var field = props.field;
  var content = mergeChildren(renderChildren(props.children, field, field.form), (_a2 = field.content) !== null && _a2 !== void 0 ? _a2 : field.componentProps.children);
  if (field.display !== "visible")
    return null;
  var getComponent = function(target) {
    var _a3;
    return isValidComponent(target) ? target : (_a3 = Path.getIn(components, target)) !== null && _a3 !== void 0 ? _a3 : target;
  };
  var renderDecorator = function(children) {
    if (!field.decoratorType) {
      return import_react15.default.createElement(import_react15.Fragment, null, children);
    }
    return import_react15.default.createElement(getComponent(field.decoratorType), toJS(field.decoratorProps), children);
  };
  var renderComponent = function() {
    var _a3, _b2, _c2;
    if (!field.componentType)
      return content;
    var value = !isVoidField(field) ? field.value : void 0;
    var onChange = !isVoidField(field) ? function() {
      var _a4, _b3;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      field.onInput.apply(field, __spreadArray2([], __read5(args), false));
      (_b3 = (_a4 = field.componentProps) === null || _a4 === void 0 ? void 0 : _a4.onChange) === null || _b3 === void 0 ? void 0 : _b3.call.apply(_b3, __spreadArray2([_a4], __read5(args), false));
    } : (_a3 = field.componentProps) === null || _a3 === void 0 ? void 0 : _a3.onChange;
    var onFocus = !isVoidField(field) ? function() {
      var _a4, _b3;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      field.onFocus.apply(field, __spreadArray2([], __read5(args), false));
      (_b3 = (_a4 = field.componentProps) === null || _a4 === void 0 ? void 0 : _a4.onFocus) === null || _b3 === void 0 ? void 0 : _b3.call.apply(_b3, __spreadArray2([_a4], __read5(args), false));
    } : (_b2 = field.componentProps) === null || _b2 === void 0 ? void 0 : _b2.onFocus;
    var onBlur = !isVoidField(field) ? function() {
      var _a4, _b3;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      field.onBlur.apply(field, __spreadArray2([], __read5(args), false));
      (_b3 = (_a4 = field.componentProps) === null || _a4 === void 0 ? void 0 : _a4.onBlur) === null || _b3 === void 0 ? void 0 : _b3.call.apply(_b3, __spreadArray2([_a4], __read5(args), false));
    } : (_c2 = field.componentProps) === null || _c2 === void 0 ? void 0 : _c2.onBlur;
    var disabled = !isVoidField(field) ? field.pattern === "disabled" || field.pattern === "readPretty" : void 0;
    var readOnly = !isVoidField(field) ? field.pattern === "readOnly" : void 0;
    return import_react15.default.createElement(getComponent(field.componentType), __assign5(__assign5({ disabled, readOnly }, toJS(field.componentProps)), { value, onChange, onFocus, onBlur }), content);
  };
  return renderDecorator(renderComponent());
};
ReactiveInternal.displayName = "ReactiveField";
var ReactiveField = observer(ReactiveInternal, {
  forwardRef: true
});

// node_modules/@formily/react/esm/components/ArrayField.js
var __assign6 = function() {
  __assign6 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign6.apply(this, arguments);
};
var ArrayField = function(props) {
  var form = useForm();
  var parent = useField();
  var field = useAttach(form.createArrayField(__assign6({ basePath: parent === null || parent === void 0 ? void 0 : parent.address }, props)));
  return import_react16.default.createElement(
    FieldContext.Provider,
    { value: field },
    import_react16.default.createElement(ReactiveField, { field }, props.children)
  );
};
ArrayField.displayName = "ArrayField";

// node_modules/@formily/react/esm/components/ObjectField.js
var import_react17 = __toESM(require_react());
var __assign7 = function() {
  __assign7 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign7.apply(this, arguments);
};
var ObjectField = function(props) {
  var form = useForm();
  var parent = useField();
  var field = useAttach(form.createObjectField(__assign7({ basePath: parent === null || parent === void 0 ? void 0 : parent.address }, props)));
  return import_react17.default.createElement(
    FieldContext.Provider,
    { value: field },
    import_react17.default.createElement(ReactiveField, { field }, props.children)
  );
};
ObjectField.displayName = "ObjectField";

// node_modules/@formily/react/esm/components/VoidField.js
var import_react18 = __toESM(require_react());
var __assign8 = function() {
  __assign8 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign8.apply(this, arguments);
};
var VoidField = function(props) {
  var form = useForm();
  var parent = useField();
  var field = useAttach(form.createVoidField(__assign8({ basePath: parent === null || parent === void 0 ? void 0 : parent.address }, props)));
  return import_react18.default.createElement(
    FieldContext.Provider,
    { value: field },
    import_react18.default.createElement(ReactiveField, { field }, props.children)
  );
};
VoidField.displayName = "VoidField";

// node_modules/@formily/react/esm/components/RecursionField.js
var import_react21 = __toESM(require_react());

// node_modules/@formily/react/esm/components/Field.js
var import_react19 = __toESM(require_react());
var __assign9 = function() {
  __assign9 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign9.apply(this, arguments);
};
var Field = function(props) {
  var form = useForm();
  var parent = useField();
  var field = form.createField(__assign9({ basePath: parent === null || parent === void 0 ? void 0 : parent.address }, props));
  (0, import_react19.useEffect)(function() {
    field === null || field === void 0 ? void 0 : field.onMount();
    return function() {
      field === null || field === void 0 ? void 0 : field.onUnmount();
    };
  }, [field]);
  return import_react19.default.createElement(
    FieldContext.Provider,
    { value: field },
    import_react19.default.createElement(ReactiveField, { field }, props.children)
  );
};
Field.displayName = "Field";

// node_modules/@formily/react/esm/components/ExpressionScope.js
var import_react20 = __toESM(require_react());
var ExpressionScope = function(props) {
  var scope = (0, import_react20.useContext)(SchemaExpressionScopeContext);
  return import_react20.default.createElement(SchemaExpressionScopeContext.Provider, { value: lazyMerge(scope, props.value) }, props.children);
};

// node_modules/@formily/react/esm/components/RecursionField.js
var __assign10 = function() {
  __assign10 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign10.apply(this, arguments);
};
var useFieldProps = function(schema) {
  var scope = useExpressionScope();
  return schema.toFieldProps({
    scope
  });
};
var useBasePath = function(props) {
  var parent = useField();
  if (props.onlyRenderProperties) {
    return props.basePath || (parent === null || parent === void 0 ? void 0 : parent.address.concat(props.name));
  }
  return props.basePath || (parent === null || parent === void 0 ? void 0 : parent.address);
};
var RecursionField = function(props) {
  var basePath = useBasePath(props);
  var fieldSchema = (0, import_react21.useMemo)(function() {
    return new Schema(props.schema);
  }, [props.schema]);
  var fieldProps = useFieldProps(fieldSchema);
  var renderSlots = function(innerSchema, key) {
    var slot = innerSchema["x-slot-node"];
    var target = slot.target, isRenderProp = slot.isRenderProp;
    if (isRenderProp) {
      var args_1 = observable({ $slotArgs: [] });
      Path.setIn(fieldSchema.properties, target, function() {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          _args[_i] = arguments[_i];
        }
        args_1.$slotArgs = _args;
        return import_react21.default.createElement(
          ExpressionScope,
          { value: args_1 },
          import_react21.default.createElement(RecursionField, { schema: innerSchema, name: key })
        );
      });
    } else {
      Path.setIn(fieldSchema.properties, target, import_react21.default.createElement(RecursionField, { schema: innerSchema, name: key }));
    }
  };
  var renderProperties = function(field) {
    if (props.onlyRenderSelf)
      return;
    var properties = Schema.getOrderProperties(fieldSchema);
    if (!properties.length)
      return;
    return import_react21.default.createElement(import_react21.Fragment, null, properties.map(function(_a2, index) {
      var item = _a2.schema, name = _a2.key;
      var base = (field === null || field === void 0 ? void 0 : field.address) || basePath;
      var schema = item;
      if (schema["x-slot-node"]) {
        renderSlots(schema, name);
        return null;
      }
      if (isFn(props.mapProperties)) {
        var mapped = props.mapProperties(item, name);
        if (mapped) {
          schema = mapped;
        }
      }
      if (isFn(props.filterProperties)) {
        if (props.filterProperties(schema, name) === false) {
          return null;
        }
      }
      if (isBool(props.propsRecursion) && props.propsRecursion) {
        return import_react21.default.createElement(RecursionField, { propsRecursion: true, filterProperties: props.filterProperties, mapProperties: props.mapProperties, schema, key: "".concat(index, "-").concat(name), name, basePath: base });
      }
      return import_react21.default.createElement(RecursionField, { schema, key: "".concat(index, "-").concat(name), name, basePath: base });
    }));
  };
  var render2 = function() {
    if (!isValid(props.name))
      return renderProperties();
    if (fieldSchema.type === "object") {
      if (props.onlyRenderProperties)
        return renderProperties();
      return import_react21.default.createElement(ObjectField, __assign10({}, fieldProps, { name: props.name, basePath }), renderProperties);
    } else if (fieldSchema.type === "array") {
      return import_react21.default.createElement(ArrayField, __assign10({}, fieldProps, { name: props.name, basePath }));
    } else if (fieldSchema.type === "void") {
      if (props.onlyRenderProperties)
        return renderProperties();
      return import_react21.default.createElement(VoidField, __assign10({}, fieldProps, { name: props.name, basePath }), renderProperties);
    }
    return import_react21.default.createElement(Field, __assign10({}, fieldProps, { name: props.name, basePath }));
  };
  if (!fieldSchema)
    return import_react21.default.createElement(import_react21.Fragment, null);
  return import_react21.default.createElement(SchemaContext.Provider, { value: fieldSchema }, render2());
};

// node_modules/@formily/react/esm/components/RecordsScope.js
var import_react22 = __toESM(require_react());
var RecordsScope = function(props) {
  return import_react22.default.createElement(ExpressionScope, { value: {
    get $records() {
      var _a2, _b2;
      return (_b2 = (_a2 = props.getRecords) === null || _a2 === void 0 ? void 0 : _a2.call(props)) !== null && _b2 !== void 0 ? _b2 : [];
    }
  } }, props.children);
};

// node_modules/@formily/react/esm/components/RecordScope.js
var import_react23 = __toESM(require_react());
var RecordScope = function(props) {
  var scope = useExpressionScope();
  return import_react23.default.createElement(ExpressionScope, { value: {
    get $lookup() {
      return scope === null || scope === void 0 ? void 0 : scope.$record;
    },
    get $record() {
      var _a2;
      var record = (_a2 = props.getRecord) === null || _a2 === void 0 ? void 0 : _a2.call(props);
      if (typeof record === "object") {
        return lazyMerge(record, {
          get $lookup() {
            return scope === null || scope === void 0 ? void 0 : scope.$record;
          },
          get $index() {
            var _a3;
            return (_a3 = props.getIndex) === null || _a3 === void 0 ? void 0 : _a3.call(props);
          }
        });
      }
      return record;
    },
    get $index() {
      var _a2;
      return (_a2 = props.getIndex) === null || _a2 === void 0 ? void 0 : _a2.call(props);
    }
  } }, props.children);
};

// node_modules/@formily/react/esm/components/SchemaField.js
var import_react25 = __toESM(require_react());

// node_modules/@formily/react/esm/shared/render.js
var import_react24 = __toESM(require_react());
var _a;
var _b;
var _c;
var env = {
  portalDOM: (_b = (_a = globalThisPolyfill === null || globalThisPolyfill === void 0 ? void 0 : globalThisPolyfill.document) === null || _a === void 0 ? void 0 : _a.createElement) === null || _b === void 0 ? void 0 : _b.call(_a, "div"),
  createPortal: (_c = globalThisPolyfill === null || globalThisPolyfill === void 0 ? void 0 : globalThisPolyfill["ReactDOM"]) === null || _c === void 0 ? void 0 : _c.createPortal
};
var loadCreatePortal = function() {
  var _a2, _b2;
  if (!env.createPortal) {
    try {
      (_a2 = env.createPortal) !== null && _a2 !== void 0 ? _a2 : env.createPortal = (_b2 = require_react_dom()) === null || _b2 === void 0 ? void 0 : _b2.createPortal;
    } catch (_c2) {
    }
  }
  if (!env.createPortal) {
    try {
      import("./react-dom.js").then(function(module) {
        var _a3;
        return (_a3 = env.createPortal) !== null && _a3 !== void 0 ? _a3 : env.createPortal = module === null || module === void 0 ? void 0 : module.createPortal;
      }).catch();
    } catch (_d) {
    }
  }
};
var render = function(element) {
  var _a2;
  if (((_a2 = globalThisPolyfill.navigator) === null || _a2 === void 0 ? void 0 : _a2.product) === "ReactNative")
    return null;
  if (env.portalDOM && env.createPortal) {
    return env.createPortal(element, env.portalDOM);
  } else {
    return import_react24.default.createElement("template", {}, element);
  }
};
loadCreatePortal();

// node_modules/@formily/react/esm/components/SchemaField.js
var __assign11 = function() {
  __assign11 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
        t[p] = s[p];
    }
    return t;
  };
  return __assign11.apply(this, arguments);
};
var env2 = {
  nonameId: 0
};
var getRandomName = function() {
  return "NO_NAME_FIELD_$".concat(env2.nonameId++);
};
function createSchemaField(options) {
  if (options === void 0) {
    options = {};
  }
  function SchemaField(props) {
    var schema = Schema.isSchemaInstance(props.schema) ? props.schema : new Schema(__assign11({ type: "object" }, props.schema));
    var renderMarkup = function() {
      env2.nonameId = 0;
      if (props.schema)
        return null;
      return render(import_react25.default.createElement(SchemaMarkupContext.Provider, { value: schema }, props.children));
    };
    var renderChildren2 = function() {
      return import_react25.default.createElement(RecursionField, __assign11({}, props, { schema }));
    };
    return import_react25.default.createElement(
      SchemaOptionsContext.Provider,
      { value: options },
      import_react25.default.createElement(
        SchemaComponentsContext.Provider,
        { value: lazyMerge(options.components, props.components) },
        import_react25.default.createElement(
          ExpressionScope,
          { value: lazyMerge(options.scope, props.scope) },
          renderMarkup(),
          renderChildren2()
        )
      )
    );
  }
  SchemaField.displayName = "SchemaField";
  function MarkupRender(props) {
    var parent = (0, import_react25.useContext)(SchemaMarkupContext);
    if (!parent)
      return import_react25.default.createElement(import_react25.Fragment, null);
    var renderChildren2 = function() {
      return import_react25.default.createElement(import_react25.default.Fragment, null, props.children);
    };
    var appendArraySchema = function(schema2) {
      var items = parent.items;
      if (items && items.name !== props.name) {
        return parent.addProperty(props.name, schema2);
      } else {
        return parent.setItems(schema2);
      }
    };
    if (parent.type === "object" || parent.type === "void") {
      var schema = parent.addProperty(props.name, props);
      return import_react25.default.createElement(SchemaMarkupContext.Provider, { value: schema }, renderChildren2());
    } else if (parent.type === "array") {
      var schema = appendArraySchema(props);
      return import_react25.default.createElement(SchemaMarkupContext.Provider, { value: Array.isArray(schema) ? schema[0] : schema }, props.children);
    } else {
      return renderChildren2();
    }
  }
  function MarkupField(props) {
    return import_react25.default.createElement(MarkupRender, __assign11({}, props, { name: props.name || getRandomName() }));
  }
  MarkupField.displayName = "MarkupField";
  function StringField(props) {
    return import_react25.default.createElement(MarkupField, __assign11({}, props, { type: "string" }));
  }
  StringField.displayName = "StringField";
  function ObjectField2(props) {
    return import_react25.default.createElement(MarkupField, __assign11({}, props, { type: "object" }));
  }
  ObjectField2.displayName = "ObjectField";
  function ArrayField2(props) {
    return import_react25.default.createElement(MarkupField, __assign11({}, props, { type: "array" }));
  }
  ArrayField2.displayName = "ArrayField";
  function BooleanField(props) {
    return import_react25.default.createElement(MarkupField, __assign11({}, props, { type: "boolean" }));
  }
  BooleanField.displayName = "BooleanField";
  function NumberField(props) {
    return import_react25.default.createElement(MarkupField, __assign11({}, props, { type: "number" }));
  }
  NumberField.displayName = "NumberField";
  function DateField(props) {
    return import_react25.default.createElement(MarkupField, __assign11({}, props, { type: "date" }));
  }
  DateField.displayName = "DateField";
  function DateTimeField(props) {
    return import_react25.default.createElement(MarkupField, __assign11({}, props, { type: "datetime" }));
  }
  DateTimeField.displayName = "DateTimeField";
  function VoidField2(props) {
    return import_react25.default.createElement(MarkupField, __assign11({}, props, { type: "void" }));
  }
  VoidField2.displayName = "VoidField";
  SchemaField.Markup = MarkupField;
  SchemaField.String = StringField;
  SchemaField.Object = ObjectField2;
  SchemaField.Array = ArrayField2;
  SchemaField.Boolean = BooleanField;
  SchemaField.Date = DateField;
  SchemaField.DateTime = DateTimeField;
  SchemaField.Void = VoidField2;
  SchemaField.Number = NumberField;
  return SchemaField;
}

export {
  Schema,
  observer,
  Observer,
  FormContext,
  FieldContext,
  SchemaMarkupContext,
  SchemaContext,
  SchemaExpressionScopeContext,
  SchemaComponentsContext,
  SchemaOptionsContext,
  ContextCleaner,
  useForm,
  useField,
  useParentForm,
  useFieldSchema,
  useFormEffects,
  useExpressionScope,
  mapProps,
  mapReadPretty,
  connect,
  FormProvider,
  FormConsumer,
  ArrayField,
  ObjectField,
  VoidField,
  Field,
  ExpressionScope,
  RecursionField,
  RecordsScope,
  RecordScope,
  createSchemaField
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=chunk-72TO7XUB.js.map
